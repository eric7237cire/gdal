/* automatically generated by rust-bindgen 0.55.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const CPL_MULTIPROC_PTHREAD: u32 = 1;
pub const HAVE_PTHREAD_MUTEX_RECURSIVE: u32 = 1;
pub const HAVE_PTHREAD_MUTEX_ADAPTIVE_NP: u32 = 1;
pub const HAVE_PTHREAD_SPINLOCK: u32 = 1;
pub const HAVE_5ARGS_MREMAP: u32 = 1;
pub const GDAL_PREFIX: &'static [u8; 11usize] = b"/usr/local\0";
pub const HAVE_ASSERT_H: u32 = 1;
pub const HAVE_ATOLL: u32 = 1;
pub const HAVE_STRTOLL: u32 = 1;
pub const HAVE_STRTOULL: u32 = 1;
pub const HAVE_GETRLIMIT: u32 = 1;
pub const HAVE_RLIMIT_AS: u32 = 1;
pub const HAVE_DECL_STRTOF: u32 = 1;
pub const HAVE_DLFCN_H: u32 = 1;
pub const HAVE_ERRNO_H: u32 = 1;
pub const HAVE_FCNTL_H: u32 = 1;
pub const HAVE_FLOAT_H: u32 = 1;
pub const HAVE_GETCWD: u32 = 1;
pub const HAVE_ICONV: u32 = 1;
pub const HAVE_IEEEFP: u32 = 1;
pub const HAVE_UINT128_T: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_JPEGLIB_H: u32 = 1;
pub const HAVE_LIBDL: u32 = 1;
pub const HAVE_LIBM: u32 = 1;
pub const HAVE_LIBRT: u32 = 1;
pub const HAVE_LIMITS_H: u32 = 1;
pub const HAVE_LOCALE_H: u32 = 1;
pub const HAVE_LONG_LONG: u32 = 1;
pub const HAVE_UINTPTR_T: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_SNPRINTF: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_STRTOF: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_VALUES_H: u32 = 1;
pub const HAVE_VPRINTF: u32 = 1;
pub const HAVE_VSNPRINTF: u32 = 1;
pub const HAVE_READLINK: u32 = 1;
pub const HAVE_POSIX_SPAWNP: u32 = 1;
pub const HAVE_POSIX_MEMALIGN: u32 = 1;
pub const HAVE_VFORK: u32 = 1;
pub const HAVE_MMAP: u32 = 1;
pub const HAVE_SIGACTION: u32 = 1;
pub const HAVE_STATVFS: u32 = 1;
pub const HAVE_STATVFS64: u32 = 1;
pub const HAVE_LSTAT: u32 = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const SIZEOF_INT: u32 = 4;
pub const SIZEOF_UNSIGNED_LONG: u32 = 8;
pub const SIZEOF_VOIDP: u32 = 8;
pub const STDC_HEADERS: u32 = 1;
pub const UNIX_STDIO_64: u32 = 1;
pub const HAVE_GCC_ATOMIC_BUILTINS: u32 = 1;
pub const HAVE_GCC_BSWAP: u32 = 1;
pub const VSI_LARGE_API_SUPPORTED: u32 = 1;
pub const HAVE_GETADDRINFO: u32 = 1;
pub const HAVE_SC_PHYS_PAGES: u32 = 1;
pub const HAVE_USELOCALE: u32 = 1;
pub const HAVE_STD_IS_NAN: u32 = 1;
pub const HAVE_GCC_WARNING_ZERO_AS_NULL_POINTER_CONSTANT: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _GLIBCXX_STDLIB_H: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 7;
pub const __GLIBCXX__: u32 = 20191114;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _GLIBCXX_MATH_H: u32 = 1;
pub const _CPP_TYPE_TRAITS_H: u32 = 1;
pub const _EXT_TYPE_TRAITS: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __FP_LONG_MAX: u64 = 9223372036854775807;
pub const FP_LLOGB0: i64 = -9223372036854775808;
pub const FP_LLOGBNAN: i64 = -9223372036854775808;
pub const FP_INT_UPWARD: u32 = 0;
pub const FP_INT_DOWNWARD: u32 = 1;
pub const FP_INT_TOWARDZERO: u32 = 2;
pub const FP_INT_TONEARESTFROMZERO: u32 = 3;
pub const FP_INT_TONEAREST: u32 = 4;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const M_El: f64 = 2.718281828459045;
pub const M_LOG2El: f64 = 1.4426950408889634;
pub const M_LOG10El: f64 = 0.4342944819032518;
pub const M_LN2l: f64 = 0.6931471805599453;
pub const M_LN10l: f64 = 2.302585092994046;
pub const M_PIl: f64 = 3.141592653589793;
pub const M_PI_2l: f64 = 1.5707963267948966;
pub const M_PI_4l: f64 = 0.7853981633974483;
pub const M_1_PIl: f64 = 0.3183098861837907;
pub const M_2_PIl: f64 = 0.6366197723675814;
pub const M_2_SQRTPIl: f64 = 1.1283791670955126;
pub const M_SQRT2l: f64 = 1.4142135623730951;
pub const M_SQRT1_2l: f64 = 0.7071067811865476;
pub const _GLIBCXX_CMATH: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const CHAR_WIDTH: u32 = 8;
pub const SCHAR_WIDTH: u32 = 8;
pub const UCHAR_WIDTH: u32 = 8;
pub const SHRT_WIDTH: u32 = 16;
pub const USHRT_WIDTH: u32 = 16;
pub const INT_WIDTH: u32 = 32;
pub const UINT_WIDTH: u32 = 32;
pub const LONG_WIDTH: u32 = 64;
pub const ULONG_WIDTH: u32 = 64;
pub const LLONG_WIDTH: u32 = 64;
pub const ULLONG_WIDTH: u32 = 64;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_FD_SETSIZE: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_QLIMIT: u32 = 1;
pub const _POSIX_HIWAT: u32 = 512;
pub const _POSIX_UIO_MAXIOV: u32 = 16;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _XOPEN_LIM_H: u32 = 1;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const IOV_MAX: u32 = 1024;
pub const NL_ARGMAX: u32 = 4096;
pub const NL_LANGMAX: u32 = 2048;
pub const NZERO: u32 = 20;
pub const WORD_BIT: u32 = 32;
pub const LONG_BIT: u32 = 64;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const __error_t_defined: u32 = 1;
pub const _LOCALE_H: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const HAVE_CXX14: u32 = 1;
pub const CPL_HAS_GINT64: u32 = 1;
pub const CPL_FRMT_GB_WITHOUT_PREFIX: &'static [u8; 3usize] = b"ll\0";
pub const CPL_FRMT_GIB: &'static [u8; 5usize] = b"%lld\0";
pub const CPL_FRMT_GUIB: &'static [u8; 5usize] = b"%llu\0";
pub const CPL_IS_LSB: u32 = 1;
pub const _MM_HINT_ET0: u32 = 7;
pub const _MM_HINT_ET1: u32 = 6;
pub const _MM_HINT_T0: u32 = 3;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 1;
pub const _MM_HINT_NTA: u32 = 0;
pub const _MM_EXCEPT_INVALID: u32 = 1;
pub const _MM_EXCEPT_DENORM: u32 = 2;
pub const _MM_EXCEPT_DIV_ZERO: u32 = 4;
pub const _MM_EXCEPT_OVERFLOW: u32 = 8;
pub const _MM_EXCEPT_UNDERFLOW: u32 = 16;
pub const _MM_EXCEPT_INEXACT: u32 = 32;
pub const _MM_EXCEPT_MASK: u32 = 63;
pub const _MM_MASK_INVALID: u32 = 128;
pub const _MM_MASK_DENORM: u32 = 256;
pub const _MM_MASK_DIV_ZERO: u32 = 512;
pub const _MM_MASK_OVERFLOW: u32 = 1024;
pub const _MM_MASK_UNDERFLOW: u32 = 2048;
pub const _MM_MASK_INEXACT: u32 = 4096;
pub const _MM_MASK_MASK: u32 = 8064;
pub const _MM_ROUND_NEAREST: u32 = 0;
pub const _MM_ROUND_DOWN: u32 = 8192;
pub const _MM_ROUND_UP: u32 = 16384;
pub const _MM_ROUND_TOWARD_ZERO: u32 = 24576;
pub const _MM_ROUND_MASK: u32 = 24576;
pub const _MM_FLUSH_ZERO_MASK: u32 = 32768;
pub const _MM_FLUSH_ZERO_ON: u32 = 32768;
pub const _MM_FLUSH_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_ON: u32 = 64;
pub const _MM_DENORMALS_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_MASK: u32 = 64;
pub const _MM_FROUND_TO_NEAREST_INT: u32 = 0;
pub const _MM_FROUND_TO_NEG_INF: u32 = 1;
pub const _MM_FROUND_TO_POS_INF: u32 = 2;
pub const _MM_FROUND_TO_ZERO: u32 = 3;
pub const _MM_FROUND_CUR_DIRECTION: u32 = 4;
pub const _MM_FROUND_RAISE_EXC: u32 = 0;
pub const _MM_FROUND_NO_EXC: u32 = 8;
pub const _MM_FROUND_NINT: u32 = 0;
pub const _MM_FROUND_FLOOR: u32 = 1;
pub const _MM_FROUND_CEIL: u32 = 2;
pub const _MM_FROUND_TRUNC: u32 = 3;
pub const _MM_FROUND_RINT: u32 = 4;
pub const _MM_FROUND_NEARBYINT: u32 = 12;
pub const _SIDD_UBYTE_OPS: u32 = 0;
pub const _SIDD_UWORD_OPS: u32 = 1;
pub const _SIDD_SBYTE_OPS: u32 = 2;
pub const _SIDD_SWORD_OPS: u32 = 3;
pub const _SIDD_CMP_EQUAL_ANY: u32 = 0;
pub const _SIDD_CMP_RANGES: u32 = 4;
pub const _SIDD_CMP_EQUAL_EACH: u32 = 8;
pub const _SIDD_CMP_EQUAL_ORDERED: u32 = 12;
pub const _SIDD_POSITIVE_POLARITY: u32 = 0;
pub const _SIDD_NEGATIVE_POLARITY: u32 = 16;
pub const _SIDD_MASKED_POSITIVE_POLARITY: u32 = 32;
pub const _SIDD_MASKED_NEGATIVE_POLARITY: u32 = 48;
pub const _SIDD_LEAST_SIGNIFICANT: u32 = 0;
pub const _SIDD_MOST_SIGNIFICANT: u32 = 64;
pub const _SIDD_BIT_MASK: u32 = 0;
pub const _SIDD_UNIT_MASK: u32 = 64;
pub const _CMP_EQ_OQ: u32 = 0;
pub const _CMP_LT_OS: u32 = 1;
pub const _CMP_LE_OS: u32 = 2;
pub const _CMP_UNORD_Q: u32 = 3;
pub const _CMP_NEQ_UQ: u32 = 4;
pub const _CMP_NLT_US: u32 = 5;
pub const _CMP_NLE_US: u32 = 6;
pub const _CMP_ORD_Q: u32 = 7;
pub const _CMP_EQ_UQ: u32 = 8;
pub const _CMP_NGE_US: u32 = 9;
pub const _CMP_NGT_US: u32 = 10;
pub const _CMP_FALSE_OQ: u32 = 11;
pub const _CMP_NEQ_OQ: u32 = 12;
pub const _CMP_GE_OS: u32 = 13;
pub const _CMP_GT_OS: u32 = 14;
pub const _CMP_TRUE_UQ: u32 = 15;
pub const _CMP_EQ_OS: u32 = 16;
pub const _CMP_LT_OQ: u32 = 17;
pub const _CMP_LE_OQ: u32 = 18;
pub const _CMP_UNORD_S: u32 = 19;
pub const _CMP_NEQ_US: u32 = 20;
pub const _CMP_NLT_UQ: u32 = 21;
pub const _CMP_NLE_UQ: u32 = 22;
pub const _CMP_ORD_S: u32 = 23;
pub const _CMP_EQ_US: u32 = 24;
pub const _CMP_NGE_UQ: u32 = 25;
pub const _CMP_NGT_UQ: u32 = 26;
pub const _CMP_FALSE_OS: u32 = 27;
pub const _CMP_NEQ_OS: u32 = 28;
pub const _CMP_GE_OQ: u32 = 29;
pub const _CMP_GT_OQ: u32 = 30;
pub const _CMP_TRUE_US: u32 = 31;
pub const _XBEGIN_STARTED: i32 = -1;
pub const _XABORT_EXPLICIT: u32 = 1;
pub const _XABORT_RETRY: u32 = 2;
pub const _XABORT_CONFLICT: u32 = 4;
pub const _XABORT_CAPACITY: u32 = 8;
pub const _XABORT_DEBUG: u32 = 16;
pub const _XABORT_NESTED: u32 = 32;
pub const _MM_PCOMCTRL_LT: u32 = 0;
pub const _MM_PCOMCTRL_LE: u32 = 1;
pub const _MM_PCOMCTRL_GT: u32 = 2;
pub const _MM_PCOMCTRL_GE: u32 = 3;
pub const _MM_PCOMCTRL_EQ: u32 = 4;
pub const _MM_PCOMCTRL_NEQ: u32 = 5;
pub const _MM_PCOMCTRL_FALSE: u32 = 6;
pub const _MM_PCOMCTRL_TRUE: u32 = 7;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _SYS_STAT_H: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _MKNOD_VER: u32 = 0;
pub const VSI_STAT_EXISTS_FLAG: u32 = 1;
pub const VSI_STAT_NATURE_FLAG: u32 = 2;
pub const VSI_STAT_SIZE_FLAG: u32 = 4;
pub const VSI_STAT_SET_ERROR_FLAG: u32 = 8;
pub const CPLE_None: u32 = 0;
pub const CPLE_AppDefined: u32 = 1;
pub const CPLE_OutOfMemory: u32 = 2;
pub const CPLE_FileIO: u32 = 3;
pub const CPLE_OpenFailed: u32 = 4;
pub const CPLE_IllegalArg: u32 = 5;
pub const CPLE_NotSupported: u32 = 6;
pub const CPLE_AssertionFailed: u32 = 7;
pub const CPLE_NoWriteAccess: u32 = 8;
pub const CPLE_UserInterrupt: u32 = 9;
pub const CPLE_ObjectNull: u32 = 10;
pub const CPLE_HttpResponse: u32 = 11;
pub const CPLE_AWSBucketNotFound: u32 = 12;
pub const CPLE_AWSObjectNotFound: u32 = 13;
pub const CPLE_AWSAccessDenied: u32 = 14;
pub const CPLE_AWSInvalidCredentials: u32 = 15;
pub const CPLE_AWSSignatureDoesNotMatch: u32 = 16;
pub const CPLE_AWSError: u32 = 17;
pub const _GLIBCXX_STRING: u32 = 1;
pub const _STRINGFWD_H: u32 = 1;
pub const _MEMORYFWD_H: u32 = 1;
pub const _CHAR_TRAITS_H: u32 = 1;
pub const _STL_ALGOBASE_H: u32 = 1;
pub const _FUNCTEXCEPT_H: u32 = 1;
pub const _EXCEPTION_DEFINES_H: u32 = 1;
pub const _EXT_NUMERIC_TRAITS: u32 = 1;
pub const _STL_PAIR_H: u32 = 1;
pub const _MOVE_H: u32 = 1;
pub const _CONCEPT_CHECK_H: u32 = 1;
pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
pub const _STL_ITERATOR_H: u32 = 1;
pub const _PTR_TRAITS_H: u32 = 1;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const _GLIBCXX_POSTYPES_H: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub const _GLIBCXX_CWCHAR: u32 = 1;
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _ALLOCATOR_H: u32 = 1;
pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
pub const _NEW_ALLOCATOR_H: u32 = 1;
pub const __EXCEPTION_H: u32 = 1;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const _CXXABI_INIT_EXCEPTION_H: u32 = 1;
pub const _GLIBCXX_HAVE_CDTOR_CALLABI: u32 = 0;
pub const _HASH_BYTES_H: u32 = 1;
pub const __GXX_MERGED_TYPEINFO_NAMES: u32 = 0;
pub const __GXX_TYPEINFO_EQUALITY_INLINE: u32 = 1;
pub const _GLIBCXX_NESTED_EXCEPTION_H: u32 = 1;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_allocator_is_always_equal: u32 = 201411;
pub const _LOCALE_FWD_H: u32 = 1;
pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
pub const _GLIBCXX_CLOCALE: u32 = 1;
pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
pub const _GLIBCXX_IOSFWD: u32 = 1;
pub const _GLIBCXX_CCTYPE: u32 = 1;
pub const _OSTREAM_INSERT_H: u32 = 1;
pub const _CXXABI_FORCED_H: u32 = 1;
pub const _STL_FUNCTION_H: u32 = 1;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const _BACKWARD_BINDERS_H: u32 = 1;
pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
pub const _BASIC_STRING_H: u32 = 1;
pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 1;
pub const __GTHREADS: u32 = 1;
pub const __GTHREADS_CXX0X: u32 = 1;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_ISO: u32 = 4;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const CPU_SETSIZE: u32 = 1024;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const __GTHREAD_HAS_COND: u32 = 1;
pub const __GTHREAD_ONCE_INIT: u32 = 0;
pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
pub const _ALLOC_TRAITS_H: u32 = 1;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const _STRING_CONVERSIONS_H: u32 = 1;
pub const _GLIBCXX_CSTDIO: u32 = 1;
pub const _GLIBCXX_CERRNO: u32 = 1;
pub const _FUNCTIONAL_HASH_H: u32 = 1;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const _BASIC_STRING_TCC: u32 = 1;
pub const GDAL_VERSION_MAJOR: u32 = 3;
pub const GDAL_VERSION_MINOR: u32 = 2;
pub const GDAL_VERSION_REV: u32 = 0;
pub const GDAL_VERSION_BUILD: u32 = 0;
pub const GDAL_RELEASE_DATE: u32 = 20200807;
pub const GDAL_RELEASE_NAME: &'static [u8; 17usize] = b"3.2.0dev-d7bbdef\0";
pub const _GLIBCXX_MEMORY: u32 = 1;
pub const _STL_CONSTRUCT_H: u32 = 1;
pub const _STL_UNINITIALIZED_H: u32 = 1;
pub const _STL_TEMPBUF_H: u32 = 1;
pub const _STL_RAW_STORAGE_ITERATOR_H: u32 = 1;
pub const _CONCURRENCE_H: u32 = 1;
pub const _USES_ALLOCATOR_H: u32 = 1;
pub const _UNIQUE_PTR_H: u32 = 1;
pub const _GLIBCXX_UTILITY: u32 = 1;
pub const _STL_RELOPS_H: u32 = 1;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const _GLIBCXX_TUPLE: u32 = 1;
pub const _GLIBCXX_ARRAY: u32 = 1;
pub const _GLIBCXX_STDEXCEPT: u32 = 1;
pub const _GLIBCXX_INVOKE_H: u32 = 1;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const _SHARED_PTR_H: u32 = 1;
pub const _SHARED_PTR_BASE_H: u32 = 1;
pub const _ALLOCATED_PTR_H: u32 = 1;
pub const _GLIBCXX_REFWRAP_H: u32 = 1;
pub const _ALIGNED_BUFFER_H: u32 = 1;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201603;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const _SHARED_PTR_ATOMIC_H: u32 = 1;
pub const _GLIBCXX_ATOMIC_BASE_H: u32 = 1;
pub const _GLIBCXX_ATOMIC_LOCK_FREE_H: u32 = 1;
pub const _BACKWARD_AUTO_PTR_H: u32 = 1;
pub const _GLIBCXX_NUMERIC_LIMITS: u32 = 1;
pub const OGRERR_NONE: u32 = 0;
pub const OGRERR_NOT_ENOUGH_DATA: u32 = 1;
pub const OGRERR_NOT_ENOUGH_MEMORY: u32 = 2;
pub const OGRERR_UNSUPPORTED_GEOMETRY_TYPE: u32 = 3;
pub const OGRERR_UNSUPPORTED_OPERATION: u32 = 4;
pub const OGRERR_CORRUPT_DATA: u32 = 5;
pub const OGRERR_FAILURE: u32 = 6;
pub const OGRERR_UNSUPPORTED_SRS: u32 = 7;
pub const OGRERR_INVALID_HANDLE: u32 = 8;
pub const OGRERR_NON_EXISTING_FEATURE: u32 = 9;
pub const wkb25DBit: u32 = 2147483648;
pub const ogrZMarker: u32 = 554850065;
pub const ALTER_NAME_FLAG: u32 = 1;
pub const ALTER_TYPE_FLAG: u32 = 2;
pub const ALTER_WIDTH_PRECISION_FLAG: u32 = 4;
pub const ALTER_NULLABLE_FLAG: u32 = 8;
pub const ALTER_DEFAULT_FLAG: u32 = 16;
pub const ALTER_UNIQUE_FLAG: u32 = 32;
pub const ALTER_ALL_FLAG: u32 = 63;
pub const OGR_F_VAL_NULL: u32 = 1;
pub const OGR_F_VAL_GEOM_TYPE: u32 = 2;
pub const OGR_F_VAL_WIDTH: u32 = 4;
pub const OGR_F_VAL_ALLOW_NULL_WHEN_DEFAULT: u32 = 8;
pub const OGR_F_VAL_ALLOW_DIFFERENT_GEOM_DIM: u32 = 16;
pub const OGR_F_VAL_ALL: u32 = 2147483631;
pub const OGRNullFID: i32 = -1;
pub const OGRUnsetMarker: i32 = -21121;
pub const OGRNullMarker: i32 = -21122;
pub const OLCRandomRead: &'static [u8; 11usize] = b"RandomRead\0";
pub const OLCSequentialWrite: &'static [u8; 16usize] = b"SequentialWrite\0";
pub const OLCRandomWrite: &'static [u8; 12usize] = b"RandomWrite\0";
pub const OLCFastSpatialFilter: &'static [u8; 18usize] = b"FastSpatialFilter\0";
pub const OLCFastFeatureCount: &'static [u8; 17usize] = b"FastFeatureCount\0";
pub const OLCFastGetExtent: &'static [u8; 14usize] = b"FastGetExtent\0";
pub const OLCCreateField: &'static [u8; 12usize] = b"CreateField\0";
pub const OLCDeleteField: &'static [u8; 12usize] = b"DeleteField\0";
pub const OLCReorderFields: &'static [u8; 14usize] = b"ReorderFields\0";
pub const OLCAlterFieldDefn: &'static [u8; 15usize] = b"AlterFieldDefn\0";
pub const OLCTransactions: &'static [u8; 13usize] = b"Transactions\0";
pub const OLCDeleteFeature: &'static [u8; 14usize] = b"DeleteFeature\0";
pub const OLCFastSetNextByIndex: &'static [u8; 19usize] = b"FastSetNextByIndex\0";
pub const OLCStringsAsUTF8: &'static [u8; 14usize] = b"StringsAsUTF8\0";
pub const OLCIgnoreFields: &'static [u8; 13usize] = b"IgnoreFields\0";
pub const OLCCreateGeomField: &'static [u8; 16usize] = b"CreateGeomField\0";
pub const OLCCurveGeometries: &'static [u8; 16usize] = b"CurveGeometries\0";
pub const OLCMeasuredGeometries: &'static [u8; 19usize] = b"MeasuredGeometries\0";
pub const ODsCCreateLayer: &'static [u8; 12usize] = b"CreateLayer\0";
pub const ODsCDeleteLayer: &'static [u8; 12usize] = b"DeleteLayer\0";
pub const ODsCCreateGeomFieldAfterCreateLayer: &'static [u8; 32usize] =
    b"CreateGeomFieldAfterCreateLayer\0";
pub const ODsCCurveGeometries: &'static [u8; 16usize] = b"CurveGeometries\0";
pub const ODsCTransactions: &'static [u8; 13usize] = b"Transactions\0";
pub const ODsCEmulatedTransactions: &'static [u8; 21usize] = b"EmulatedTransactions\0";
pub const ODsCMeasuredGeometries: &'static [u8; 19usize] = b"MeasuredGeometries\0";
pub const ODsCRandomLayerRead: &'static [u8; 16usize] = b"RandomLayerRead\0";
pub const ODsCRandomLayerWrite: &'static [u8; 18usize] = b"RandomLayerWrite \0";
pub const ODrCCreateDataSource: &'static [u8; 17usize] = b"CreateDataSource\0";
pub const ODrCDeleteDataSource: &'static [u8; 17usize] = b"DeleteDataSource\0";
pub const OLMD_FID64: &'static [u8; 11usize] = b"OLMD_FID64\0";
pub const RASTERIO_EXTRA_ARG_CURRENT_VERSION: u32 = 1;
pub const GDALMD_AREA_OR_POINT: &'static [u8; 14usize] = b"AREA_OR_POINT\0";
pub const GDALMD_AOP_AREA: &'static [u8; 5usize] = b"Area\0";
pub const GDALMD_AOP_POINT: &'static [u8; 6usize] = b"Point\0";
pub const GDAL_DMD_LONGNAME: &'static [u8; 13usize] = b"DMD_LONGNAME\0";
pub const GDAL_DMD_HELPTOPIC: &'static [u8; 14usize] = b"DMD_HELPTOPIC\0";
pub const GDAL_DMD_MIMETYPE: &'static [u8; 13usize] = b"DMD_MIMETYPE\0";
pub const GDAL_DMD_EXTENSION: &'static [u8; 14usize] = b"DMD_EXTENSION\0";
pub const GDAL_DMD_CONNECTION_PREFIX: &'static [u8; 22usize] = b"DMD_CONNECTION_PREFIX\0";
pub const GDAL_DMD_EXTENSIONS: &'static [u8; 15usize] = b"DMD_EXTENSIONS\0";
pub const GDAL_DMD_CREATIONOPTIONLIST: &'static [u8; 23usize] = b"DMD_CREATIONOPTIONLIST\0";
pub const GDAL_DMD_MULTIDIM_DATASET_CREATIONOPTIONLIST: &'static [u8; 40usize] =
    b"DMD_MULTIDIM_DATASET_CREATIONOPTIONLIST\0";
pub const GDAL_DMD_MULTIDIM_GROUP_CREATIONOPTIONLIST: &'static [u8; 38usize] =
    b"DMD_MULTIDIM_GROUP_CREATIONOPTIONLIST\0";
pub const GDAL_DMD_MULTIDIM_DIMENSION_CREATIONOPTIONLIST: &'static [u8; 42usize] =
    b"DMD_MULTIDIM_DIMENSION_CREATIONOPTIONLIST\0";
pub const GDAL_DMD_MULTIDIM_ARRAY_CREATIONOPTIONLIST: &'static [u8; 38usize] =
    b"DMD_MULTIDIM_ARRAY_CREATIONOPTIONLIST\0";
pub const GDAL_DMD_MULTIDIM_ATTRIBUTE_CREATIONOPTIONLIST: &'static [u8; 42usize] =
    b"DMD_MULTIDIM_ATTRIBUTE_CREATIONOPTIONLIST\0";
pub const GDAL_DMD_OPENOPTIONLIST: &'static [u8; 19usize] = b"DMD_OPENOPTIONLIST\0";
pub const GDAL_DMD_CREATIONDATATYPES: &'static [u8; 22usize] = b"DMD_CREATIONDATATYPES\0";
pub const GDAL_DMD_CREATIONFIELDDATATYPES: &'static [u8; 27usize] = b"DMD_CREATIONFIELDDATATYPES\0";
pub const GDAL_DMD_CREATIONFIELDDATASUBTYPES: &'static [u8; 30usize] =
    b"DMD_CREATIONFIELDDATASUBTYPES\0";
pub const GDAL_DMD_SUBDATASETS: &'static [u8; 16usize] = b"DMD_SUBDATASETS\0";
pub const GDAL_DCAP_OPEN: &'static [u8; 10usize] = b"DCAP_OPEN\0";
pub const GDAL_DCAP_CREATE: &'static [u8; 12usize] = b"DCAP_CREATE\0";
pub const GDAL_DCAP_CREATE_MULTIDIMENSIONAL: &'static [u8; 29usize] =
    b"DCAP_CREATE_MULTIDIMENSIONAL\0";
pub const GDAL_DCAP_CREATECOPY: &'static [u8; 16usize] = b"DCAP_CREATECOPY\0";
pub const GDAL_DCAP_CREATECOPY_MULTIDIMENSIONAL: &'static [u8; 33usize] =
    b"DCAP_CREATECOPY_MULTIDIMENSIONAL\0";
pub const GDAL_DCAP_MULTIDIM_RASTER: &'static [u8; 21usize] = b"DCAP_MULTIDIM_RASTER\0";
pub const GDAL_DCAP_SUBCREATECOPY: &'static [u8; 19usize] = b"DCAP_SUBCREATECOPY\0";
pub const GDAL_DCAP_VIRTUALIO: &'static [u8; 15usize] = b"DCAP_VIRTUALIO\0";
pub const GDAL_DCAP_RASTER: &'static [u8; 12usize] = b"DCAP_RASTER\0";
pub const GDAL_DCAP_VECTOR: &'static [u8; 12usize] = b"DCAP_VECTOR\0";
pub const GDAL_DCAP_GNM: &'static [u8; 9usize] = b"DCAP_GNM\0";
pub const GDAL_DCAP_NOTNULL_FIELDS: &'static [u8; 20usize] = b"DCAP_NOTNULL_FIELDS\0";
pub const GDAL_DCAP_UNIQUE_FIELDS: &'static [u8; 19usize] = b"DCAP_UNIQUE_FIELDS\0";
pub const GDAL_DCAP_DEFAULT_FIELDS: &'static [u8; 20usize] = b"DCAP_DEFAULT_FIELDS\0";
pub const GDAL_DCAP_NOTNULL_GEOMFIELDS: &'static [u8; 24usize] = b"DCAP_NOTNULL_GEOMFIELDS\0";
pub const GDAL_DCAP_NONSPATIAL: &'static [u8; 16usize] = b"DCAP_NONSPATIAL\0";
pub const GDAL_DCAP_FEATURE_STYLES: &'static [u8; 20usize] = b"DCAP_FEATURE_STYLES\0";
pub const GDAL_DIM_TYPE_HORIZONTAL_X: &'static [u8; 13usize] = b"HORIZONTAL_X\0";
pub const GDAL_DIM_TYPE_HORIZONTAL_Y: &'static [u8; 13usize] = b"HORIZONTAL_Y\0";
pub const GDAL_DIM_TYPE_VERTICAL: &'static [u8; 9usize] = b"VERTICAL\0";
pub const GDAL_DIM_TYPE_TEMPORAL: &'static [u8; 9usize] = b"TEMPORAL\0";
pub const GDAL_DIM_TYPE_PARAMETRIC: &'static [u8; 11usize] = b"PARAMETRIC\0";
pub const GDAL_OF_READONLY: u32 = 0;
pub const GDAL_OF_UPDATE: u32 = 1;
pub const GDAL_OF_ALL: u32 = 0;
pub const GDAL_OF_RASTER: u32 = 2;
pub const GDAL_OF_VECTOR: u32 = 4;
pub const GDAL_OF_GNM: u32 = 8;
pub const GDAL_OF_MULTIDIM_RASTER: u32 = 16;
pub const GDAL_OF_KIND_MASK: u32 = 30;
pub const GDAL_OF_SHARED: u32 = 32;
pub const GDAL_OF_VERBOSE_ERROR: u32 = 64;
pub const GDAL_OF_INTERNAL: u32 = 128;
pub const GDAL_OF_DEFAULT_BLOCK_ACCESS: u32 = 0;
pub const GDAL_OF_ARRAY_BLOCK_ACCESS: u32 = 256;
pub const GDAL_OF_HASHSET_BLOCK_ACCESS: u32 = 512;
pub const GDAL_OF_RESERVED_1: u32 = 768;
pub const GDAL_OF_BLOCK_ACCESS_MASK: u32 = 768;
pub const GDAL_DS_LAYER_CREATIONOPTIONLIST: &'static [u8; 28usize] =
    b"DS_LAYER_CREATIONOPTIONLIST\0";
pub const GMF_ALL_VALID: u32 = 1;
pub const GMF_PER_DATASET: u32 = 2;
pub const GMF_ALPHA: u32 = 4;
pub const GMF_NODATA: u32 = 8;
pub const GDAL_DATA_COVERAGE_STATUS_UNIMPLEMENTED: u32 = 1;
pub const GDAL_DATA_COVERAGE_STATUS_DATA: u32 = 2;
pub const GDAL_DATA_COVERAGE_STATUS_EMPTY: u32 = 4;
pub const GDAL_GTI2_SIGNATURE: &'static [u8; 5usize] = b"GTI2\0";
pub const CPL_MUTEX_RECURSIVE: u32 = 0;
pub const CPL_MUTEX_ADAPTIVE: u32 = 1;
pub const CPL_MUTEX_REGULAR: u32 = 2;
pub const CTLS_RLBUFFERINFO: u32 = 1;
pub const CTLS_WIN32_COND: u32 = 2;
pub const CTLS_CSVTABLEPTR: u32 = 3;
pub const CTLS_CSVDEFAULTFILENAME: u32 = 4;
pub const CTLS_ERRORCONTEXT: u32 = 5;
pub const CTLS_VSICURL_CACHEDCONNECTION: u32 = 6;
pub const CTLS_PATHBUF: u32 = 7;
pub const CTLS_ABSTRACTARCHIVE_SPLIT: u32 = 8;
pub const CTLS_GDALOPEN_ANTIRECURSION: u32 = 9;
pub const CTLS_CPLSPRINTF: u32 = 10;
pub const CTLS_RESPONSIBLEPID: u32 = 11;
pub const CTLS_VERSIONINFO: u32 = 12;
pub const CTLS_VERSIONINFO_LICENCE: u32 = 13;
pub const CTLS_CONFIGOPTIONS: u32 = 14;
pub const CTLS_FINDFILE: u32 = 15;
pub const CTLS_VSIERRORCONTEXT: u32 = 16;
pub const CTLS_ERRORHANDLERACTIVEDATA: u32 = 17;
pub const CTLS_PROJCONTEXTHOLDER: u32 = 18;
pub const CTLS_GDALDEFAULTOVR_ANTIREC: u32 = 19;
pub const CTLS_MAX: u32 = 32;
pub const WARP_EXTRA_ELTS: u32 = 1;
pub const SRS_WKT_WGS84_LAT_LONG : & 'static [ u8 ; 303usize ] = b"GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]\0" ;
pub const SRS_PT_ALBERS_CONIC_EQUAL_AREA: &'static [u8; 24usize] = b"Albers_Conic_Equal_Area\0";
pub const SRS_PT_AZIMUTHAL_EQUIDISTANT: &'static [u8; 22usize] = b"Azimuthal_Equidistant\0";
pub const SRS_PT_CASSINI_SOLDNER: &'static [u8; 16usize] = b"Cassini_Soldner\0";
pub const SRS_PT_CYLINDRICAL_EQUAL_AREA: &'static [u8; 23usize] = b"Cylindrical_Equal_Area\0";
pub const SRS_PT_BONNE: &'static [u8; 6usize] = b"Bonne\0";
pub const SRS_PT_ECKERT_I: &'static [u8; 9usize] = b"Eckert_I\0";
pub const SRS_PT_ECKERT_II: &'static [u8; 10usize] = b"Eckert_II\0";
pub const SRS_PT_ECKERT_III: &'static [u8; 11usize] = b"Eckert_III\0";
pub const SRS_PT_ECKERT_IV: &'static [u8; 10usize] = b"Eckert_IV\0";
pub const SRS_PT_ECKERT_V: &'static [u8; 9usize] = b"Eckert_V\0";
pub const SRS_PT_ECKERT_VI: &'static [u8; 10usize] = b"Eckert_VI\0";
pub const SRS_PT_EQUIDISTANT_CONIC: &'static [u8; 18usize] = b"Equidistant_Conic\0";
pub const SRS_PT_EQUIRECTANGULAR: &'static [u8; 16usize] = b"Equirectangular\0";
pub const SRS_PT_GALL_STEREOGRAPHIC: &'static [u8; 19usize] = b"Gall_Stereographic\0";
pub const SRS_PT_GAUSSSCHREIBERTMERCATOR: &'static [u8; 36usize] =
    b"Gauss_Schreiber_Transverse_Mercator\0";
pub const SRS_PT_GEOSTATIONARY_SATELLITE: &'static [u8; 24usize] = b"Geostationary_Satellite\0";
pub const SRS_PT_GOODE_HOMOLOSINE: &'static [u8; 17usize] = b"Goode_Homolosine\0";
pub const SRS_PT_IGH: &'static [u8; 29usize] = b"Interrupted_Goode_Homolosine\0";
pub const SRS_PT_GNOMONIC: &'static [u8; 9usize] = b"Gnomonic\0";
pub const SRS_PT_HOTINE_OBLIQUE_MERCATOR_AZIMUTH_CENTER: &'static [u8; 39usize] =
    b"Hotine_Oblique_Mercator_Azimuth_Center\0";
pub const SRS_PT_HOTINE_OBLIQUE_MERCATOR: &'static [u8; 24usize] = b"Hotine_Oblique_Mercator\0";
pub const SRS_PT_HOTINE_OBLIQUE_MERCATOR_TWO_POINT_NATURAL_ORIGIN: &'static [u8; 49usize] =
    b"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\0";
pub const SRS_PT_LABORDE_OBLIQUE_MERCATOR: &'static [u8; 25usize] = b"Laborde_Oblique_Mercator\0";
pub const SRS_PT_LAMBERT_CONFORMAL_CONIC_1SP: &'static [u8; 28usize] =
    b"Lambert_Conformal_Conic_1SP\0";
pub const SRS_PT_LAMBERT_CONFORMAL_CONIC_2SP: &'static [u8; 28usize] =
    b"Lambert_Conformal_Conic_2SP\0";
pub const SRS_PT_LAMBERT_CONFORMAL_CONIC_2SP_BELGIUM: &'static [u8; 36usize] =
    b"Lambert_Conformal_Conic_2SP_Belgium\0";
pub const SRS_PT_LAMBERT_AZIMUTHAL_EQUAL_AREA: &'static [u8; 29usize] =
    b"Lambert_Azimuthal_Equal_Area\0";
pub const SRS_PT_MERCATOR_1SP: &'static [u8; 13usize] = b"Mercator_1SP\0";
pub const SRS_PT_MERCATOR_2SP: &'static [u8; 13usize] = b"Mercator_2SP\0";
pub const SRS_PT_MERCATOR_AUXILIARY_SPHERE: &'static [u8; 26usize] = b"Mercator_Auxiliary_Sphere\0";
pub const SRS_PT_MILLER_CYLINDRICAL: &'static [u8; 19usize] = b"Miller_Cylindrical\0";
pub const SRS_PT_MOLLWEIDE: &'static [u8; 10usize] = b"Mollweide\0";
pub const SRS_PT_NEW_ZEALAND_MAP_GRID: &'static [u8; 21usize] = b"New_Zealand_Map_Grid\0";
pub const SRS_PT_OBLIQUE_STEREOGRAPHIC: &'static [u8; 22usize] = b"Oblique_Stereographic\0";
pub const SRS_PT_ORTHOGRAPHIC: &'static [u8; 13usize] = b"Orthographic\0";
pub const SRS_PT_POLAR_STEREOGRAPHIC: &'static [u8; 20usize] = b"Polar_Stereographic\0";
pub const SRS_PT_POLYCONIC: &'static [u8; 10usize] = b"Polyconic\0";
pub const SRS_PT_ROBINSON: &'static [u8; 9usize] = b"Robinson\0";
pub const SRS_PT_SINUSOIDAL: &'static [u8; 11usize] = b"Sinusoidal\0";
pub const SRS_PT_STEREOGRAPHIC: &'static [u8; 14usize] = b"Stereographic\0";
pub const SRS_PT_SWISS_OBLIQUE_CYLINDRICAL: &'static [u8; 26usize] = b"Swiss_Oblique_Cylindrical\0";
pub const SRS_PT_TRANSVERSE_MERCATOR: &'static [u8; 20usize] = b"Transverse_Mercator\0";
pub const SRS_PT_TRANSVERSE_MERCATOR_SOUTH_ORIENTED: &'static [u8; 37usize] =
    b"Transverse_Mercator_South_Orientated\0";
pub const SRS_PT_TRANSVERSE_MERCATOR_MI_21: &'static [u8; 31usize] =
    b"Transverse_Mercator_MapInfo_21\0";
pub const SRS_PT_TRANSVERSE_MERCATOR_MI_22: &'static [u8; 31usize] =
    b"Transverse_Mercator_MapInfo_22\0";
pub const SRS_PT_TRANSVERSE_MERCATOR_MI_23: &'static [u8; 31usize] =
    b"Transverse_Mercator_MapInfo_23\0";
pub const SRS_PT_TRANSVERSE_MERCATOR_MI_24: &'static [u8; 31usize] =
    b"Transverse_Mercator_MapInfo_24\0";
pub const SRS_PT_TRANSVERSE_MERCATOR_MI_25: &'static [u8; 31usize] =
    b"Transverse_Mercator_MapInfo_25\0";
pub const SRS_PT_TUNISIA_MINING_GRID: &'static [u8; 20usize] = b"Tunisia_Mining_Grid\0";
pub const SRS_PT_TWO_POINT_EQUIDISTANT: &'static [u8; 22usize] = b"Two_Point_Equidistant\0";
pub const SRS_PT_VANDERGRINTEN: &'static [u8; 14usize] = b"VanDerGrinten\0";
pub const SRS_PT_KROVAK: &'static [u8; 7usize] = b"Krovak\0";
pub const SRS_PT_IMW_POLYCONIC: &'static [u8; 41usize] =
    b"International_Map_of_the_World_Polyconic\0";
pub const SRS_PT_WAGNER_I: &'static [u8; 9usize] = b"Wagner_I\0";
pub const SRS_PT_WAGNER_II: &'static [u8; 10usize] = b"Wagner_II\0";
pub const SRS_PT_WAGNER_III: &'static [u8; 11usize] = b"Wagner_III\0";
pub const SRS_PT_WAGNER_IV: &'static [u8; 10usize] = b"Wagner_IV\0";
pub const SRS_PT_WAGNER_V: &'static [u8; 9usize] = b"Wagner_V\0";
pub const SRS_PT_WAGNER_VI: &'static [u8; 10usize] = b"Wagner_VI\0";
pub const SRS_PT_WAGNER_VII: &'static [u8; 11usize] = b"Wagner_VII\0";
pub const SRS_PT_QSC: &'static [u8; 33usize] = b"Quadrilateralized_Spherical_Cube\0";
pub const SRS_PT_AITOFF: &'static [u8; 7usize] = b"Aitoff\0";
pub const SRS_PT_WINKEL_I: &'static [u8; 9usize] = b"Winkel_I\0";
pub const SRS_PT_WINKEL_II: &'static [u8; 10usize] = b"Winkel_II\0";
pub const SRS_PT_WINKEL_TRIPEL: &'static [u8; 14usize] = b"Winkel_Tripel\0";
pub const SRS_PT_CRASTER_PARABOLIC: &'static [u8; 18usize] = b"Craster_Parabolic\0";
pub const SRS_PT_LOXIMUTHAL: &'static [u8; 11usize] = b"Loximuthal\0";
pub const SRS_PT_QUARTIC_AUTHALIC: &'static [u8; 17usize] = b"Quartic_Authalic\0";
pub const SRS_PT_SCH: &'static [u8; 29usize] = b"Spherical_Cross_Track_Height\0";
pub const SRS_PP_CENTRAL_MERIDIAN: &'static [u8; 17usize] = b"central_meridian\0";
pub const SRS_PP_SCALE_FACTOR: &'static [u8; 13usize] = b"scale_factor\0";
pub const SRS_PP_STANDARD_PARALLEL_1: &'static [u8; 20usize] = b"standard_parallel_1\0";
pub const SRS_PP_STANDARD_PARALLEL_2: &'static [u8; 20usize] = b"standard_parallel_2\0";
pub const SRS_PP_PSEUDO_STD_PARALLEL_1: &'static [u8; 27usize] = b"pseudo_standard_parallel_1\0";
pub const SRS_PP_LONGITUDE_OF_CENTER: &'static [u8; 20usize] = b"longitude_of_center\0";
pub const SRS_PP_LATITUDE_OF_CENTER: &'static [u8; 19usize] = b"latitude_of_center\0";
pub const SRS_PP_LONGITUDE_OF_ORIGIN: &'static [u8; 20usize] = b"longitude_of_origin\0";
pub const SRS_PP_LATITUDE_OF_ORIGIN: &'static [u8; 19usize] = b"latitude_of_origin\0";
pub const SRS_PP_FALSE_EASTING: &'static [u8; 14usize] = b"false_easting\0";
pub const SRS_PP_FALSE_NORTHING: &'static [u8; 15usize] = b"false_northing\0";
pub const SRS_PP_AZIMUTH: &'static [u8; 8usize] = b"azimuth\0";
pub const SRS_PP_LONGITUDE_OF_POINT_1: &'static [u8; 21usize] = b"longitude_of_point_1\0";
pub const SRS_PP_LATITUDE_OF_POINT_1: &'static [u8; 20usize] = b"latitude_of_point_1\0";
pub const SRS_PP_LONGITUDE_OF_POINT_2: &'static [u8; 21usize] = b"longitude_of_point_2\0";
pub const SRS_PP_LATITUDE_OF_POINT_2: &'static [u8; 20usize] = b"latitude_of_point_2\0";
pub const SRS_PP_LONGITUDE_OF_POINT_3: &'static [u8; 21usize] = b"longitude_of_point_3\0";
pub const SRS_PP_LATITUDE_OF_POINT_3: &'static [u8; 20usize] = b"latitude_of_point_3\0";
pub const SRS_PP_RECTIFIED_GRID_ANGLE: &'static [u8; 21usize] = b"rectified_grid_angle\0";
pub const SRS_PP_LANDSAT_NUMBER: &'static [u8; 15usize] = b"landsat_number\0";
pub const SRS_PP_PATH_NUMBER: &'static [u8; 12usize] = b"path_number\0";
pub const SRS_PP_PERSPECTIVE_POINT_HEIGHT: &'static [u8; 25usize] = b"perspective_point_height\0";
pub const SRS_PP_SATELLITE_HEIGHT: &'static [u8; 17usize] = b"satellite_height\0";
pub const SRS_PP_FIPSZONE: &'static [u8; 9usize] = b"fipszone\0";
pub const SRS_PP_ZONE: &'static [u8; 5usize] = b"zone\0";
pub const SRS_PP_LATITUDE_OF_1ST_POINT: &'static [u8; 22usize] = b"Latitude_Of_1st_Point\0";
pub const SRS_PP_LONGITUDE_OF_1ST_POINT: &'static [u8; 23usize] = b"Longitude_Of_1st_Point\0";
pub const SRS_PP_LATITUDE_OF_2ND_POINT: &'static [u8; 22usize] = b"Latitude_Of_2nd_Point\0";
pub const SRS_PP_LONGITUDE_OF_2ND_POINT: &'static [u8; 23usize] = b"Longitude_Of_2nd_Point\0";
pub const SRS_PP_PEG_POINT_LATITUDE: &'static [u8; 19usize] = b"peg_point_latitude\0";
pub const SRS_PP_PEG_POINT_LONGITUDE: &'static [u8; 20usize] = b"peg_point_longitude\0";
pub const SRS_PP_PEG_POINT_HEADING: &'static [u8; 18usize] = b"peg_point_heading\0";
pub const SRS_PP_PEG_POINT_HEIGHT: &'static [u8; 17usize] = b"peg_point_height\0";
pub const SRS_UL_METER: &'static [u8; 6usize] = b"Meter\0";
pub const SRS_UL_FOOT: &'static [u8; 21usize] = b"Foot (International)\0";
pub const SRS_UL_FOOT_CONV: &'static [u8; 7usize] = b"0.3048\0";
pub const SRS_UL_US_FOOT: &'static [u8; 8usize] = b"Foot_US\0";
pub const SRS_UL_US_FOOT_CONV: &'static [u8; 19usize] = b"0.3048006096012192\0";
pub const SRS_UL_NAUTICAL_MILE: &'static [u8; 14usize] = b"Nautical Mile\0";
pub const SRS_UL_NAUTICAL_MILE_CONV: &'static [u8; 7usize] = b"1852.0\0";
pub const SRS_UL_LINK: &'static [u8; 5usize] = b"Link\0";
pub const SRS_UL_LINK_CONV: &'static [u8; 20usize] = b"0.20116684023368047\0";
pub const SRS_UL_CHAIN: &'static [u8; 6usize] = b"Chain\0";
pub const SRS_UL_CHAIN_CONV: &'static [u8; 19usize] = b"20.116684023368047\0";
pub const SRS_UL_ROD: &'static [u8; 4usize] = b"Rod\0";
pub const SRS_UL_ROD_CONV: &'static [u8; 17usize] = b"5.02921005842012\0";
pub const SRS_UL_LINK_Clarke: &'static [u8; 12usize] = b"Link_Clarke\0";
pub const SRS_UL_LINK_Clarke_CONV: &'static [u8; 13usize] = b"0.2011661949\0";
pub const SRS_UL_KILOMETER: &'static [u8; 10usize] = b"Kilometer\0";
pub const SRS_UL_KILOMETER_CONV: &'static [u8; 6usize] = b"1000.\0";
pub const SRS_UL_DECIMETER: &'static [u8; 10usize] = b"Decimeter\0";
pub const SRS_UL_DECIMETER_CONV: &'static [u8; 4usize] = b"0.1\0";
pub const SRS_UL_CENTIMETER: &'static [u8; 11usize] = b"Centimeter\0";
pub const SRS_UL_CENTIMETER_CONV: &'static [u8; 5usize] = b"0.01\0";
pub const SRS_UL_MILLIMETER: &'static [u8; 11usize] = b"Millimeter\0";
pub const SRS_UL_MILLIMETER_CONV: &'static [u8; 6usize] = b"0.001\0";
pub const SRS_UL_INTL_NAUT_MILE: &'static [u8; 28usize] = b"Nautical_Mile_International\0";
pub const SRS_UL_INTL_NAUT_MILE_CONV: &'static [u8; 7usize] = b"1852.0\0";
pub const SRS_UL_INTL_INCH: &'static [u8; 19usize] = b"Inch_International\0";
pub const SRS_UL_INTL_INCH_CONV: &'static [u8; 7usize] = b"0.0254\0";
pub const SRS_UL_INTL_FOOT: &'static [u8; 19usize] = b"Foot_International\0";
pub const SRS_UL_INTL_FOOT_CONV: &'static [u8; 7usize] = b"0.3048\0";
pub const SRS_UL_INTL_YARD: &'static [u8; 19usize] = b"Yard_International\0";
pub const SRS_UL_INTL_YARD_CONV: &'static [u8; 7usize] = b"0.9144\0";
pub const SRS_UL_INTL_STAT_MILE: &'static [u8; 27usize] = b"Statute_Mile_International\0";
pub const SRS_UL_INTL_STAT_MILE_CONV: &'static [u8; 9usize] = b"1609.344\0";
pub const SRS_UL_INTL_FATHOM: &'static [u8; 21usize] = b"Fathom_International\0";
pub const SRS_UL_INTL_FATHOM_CONV: &'static [u8; 7usize] = b"1.8288\0";
pub const SRS_UL_INTL_CHAIN: &'static [u8; 20usize] = b"Chain_International\0";
pub const SRS_UL_INTL_CHAIN_CONV: &'static [u8; 8usize] = b"20.1168\0";
pub const SRS_UL_INTL_LINK: &'static [u8; 19usize] = b"Link_International\0";
pub const SRS_UL_INTL_LINK_CONV: &'static [u8; 9usize] = b"0.201168\0";
pub const SRS_UL_US_INCH: &'static [u8; 17usize] = b"Inch_US_Surveyor\0";
pub const SRS_UL_US_INCH_CONV: &'static [u8; 21usize] = b"0.025400050800101603\0";
pub const SRS_UL_US_YARD: &'static [u8; 17usize] = b"Yard_US_Surveyor\0";
pub const SRS_UL_US_YARD_CONV: &'static [u8; 18usize] = b"0.914401828803658\0";
pub const SRS_UL_US_CHAIN: &'static [u8; 18usize] = b"Chain_US_Surveyor\0";
pub const SRS_UL_US_CHAIN_CONV: &'static [u8; 18usize] = b"20.11684023368047\0";
pub const SRS_UL_US_STAT_MILE: &'static [u8; 25usize] = b"Statute_Mile_US_Surveyor\0";
pub const SRS_UL_US_STAT_MILE_CONV: &'static [u8; 18usize] = b"1609.347218694437\0";
pub const SRS_UL_INDIAN_YARD: &'static [u8; 12usize] = b"Yard_Indian\0";
pub const SRS_UL_INDIAN_YARD_CONV: &'static [u8; 11usize] = b"0.91439523\0";
pub const SRS_UL_INDIAN_FOOT: &'static [u8; 12usize] = b"Foot_Indian\0";
pub const SRS_UL_INDIAN_FOOT_CONV: &'static [u8; 11usize] = b"0.30479841\0";
pub const SRS_UL_INDIAN_CHAIN: &'static [u8; 13usize] = b"Chain_Indian\0";
pub const SRS_UL_INDIAN_CHAIN_CONV: &'static [u8; 12usize] = b"20.11669506\0";
pub const SRS_UA_DEGREE: &'static [u8; 7usize] = b"degree\0";
pub const SRS_UA_DEGREE_CONV: &'static [u8; 19usize] = b"0.0174532925199433\0";
pub const SRS_UA_RADIAN: &'static [u8; 7usize] = b"radian\0";
pub const SRS_PM_GREENWICH: &'static [u8; 10usize] = b"Greenwich\0";
pub const SRS_DN_NAD27: &'static [u8; 26usize] = b"North_American_Datum_1927\0";
pub const SRS_DN_NAD83: &'static [u8; 26usize] = b"North_American_Datum_1983\0";
pub const SRS_DN_WGS72: &'static [u8; 9usize] = b"WGS_1972\0";
pub const SRS_DN_WGS84: &'static [u8; 9usize] = b"WGS_1984\0";
pub const SRS_WGS84_SEMIMAJOR: f64 = 6378137.0;
pub const SRS_WGS84_INVFLATTENING: f64 = 298.257223563;
pub const _GLIBCXX_VECTOR: u32 = 1;
pub const _STL_VECTOR_H: u32 = 1;
pub const _STL_BVECTOR_H: u32 = 1;
pub const _VECTOR_TCC: u32 = 1;
pub const CSLT_HONOURSTRINGS: u32 = 1;
pub const CSLT_ALLOWEMPTYTOKENS: u32 = 2;
pub const CSLT_PRESERVEQUOTES: u32 = 4;
pub const CSLT_PRESERVEESCAPES: u32 = 8;
pub const CSLT_STRIPLEADSPACES: u32 = 16;
pub const CSLT_STRIPENDSPACES: u32 = 32;
pub const CPLES_BackslashQuotable: u32 = 0;
pub const CPLES_XML: u32 = 1;
pub const CPLES_URL: u32 = 2;
pub const CPLES_SQL: u32 = 3;
pub const CPLES_CSV: u32 = 4;
pub const CPLES_XML_BUT_QUOTES: u32 = 5;
pub const CPLES_CSV_FORCE_QUOTING: u32 = 6;
pub const CPLES_SQLI: u32 = 7;
pub const CPL_ENC_LOCALE: &'static [u8; 1usize] = b"\0";
pub const CPL_ENC_UTF8: &'static [u8; 6usize] = b"UTF-8\0";
pub const CPL_ENC_UTF16: &'static [u8; 7usize] = b"UTF-16\0";
pub const CPL_ENC_UCS2: &'static [u8; 6usize] = b"UCS-2\0";
pub const CPL_ENC_UCS4: &'static [u8; 6usize] = b"UCS-4\0";
pub const CPL_ENC_ASCII: &'static [u8; 6usize] = b"ASCII\0";
pub const CPL_ENC_ISO8859_1: &'static [u8; 11usize] = b"ISO-8859-1\0";
pub const _GLIBCXX_CSTDDEF: u32 = 1;
pub const _GLIBCXX_MAP: u32 = 1;
pub const _STL_TREE_H: u32 = 1;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const _STL_MAP_H: u32 = 1;
pub const _STL_MULTIMAP_H: u32 = 1;
pub const USGS_ANGLE_DECIMALDEGREES: u32 = 0;
pub const USGS_ANGLE_PACKEDDMS: u32 = 1;
pub const USGS_ANGLE_RADIANS: u32 = 2;
pub type size_t = ::std::os::raw::c_ulong;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type cookie_read_function_t = __io_read_fn;
pub type cookie_write_function_t = __io_write_fn;
pub type cookie_seek_function_t = __io_seek_fn;
pub type cookie_close_function_t = __io_close_fn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: __io_read_fn,
    pub write: __io_write_fn,
    pub seek: __io_seek_fn,
    pub close: __io_close_fn,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_file {
    _unused: [u8; 0],
}
extern "C" {
    pub fn _IO_cookie_init(
        __cfile: *mut _IO_cookie_file,
        __read_write: ::std::os::raw::c_int,
        __cookie: *mut ::std::os::raw::c_void,
        __fns: _IO_cookie_io_functions_t,
    );
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(
        arg1: *mut _IO_FILE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub type fpos64_t = _G_fpos64_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: _IO_cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: size_t,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: size_t,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __s: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type std_size_t = ::std::os::raw::c_ulong;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type std_string = std_basic_string<::std::os::raw::c_char>;
pub type std_wstring = std_basic_string<u32>;
pub type std_u16string = std_basic_string<u16>;
pub type std_u32string = std_basic_string<u32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_stringbuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ostringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_stringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numpunct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numpunct_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_collate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_collate_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_get {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_get_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_get {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_put {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages_byname {
    pub _address: u8,
}
#[repr(C)]
pub struct std_basic_string<_CharT> {
    pub _M_dataplus: std_basic_string__Alloc_hider,
    pub _M_string_length: std_basic_string_size_type,
    pub __bindgen_anon_1: std_basic_string__bindgen_ty_2<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_string__Char_alloc_type = __gnu_cxx___alloc_traits;
pub type std_basic_string__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_basic_string_traits_type<_Traits> = _Traits;
pub type std_basic_string_value_type = [u8; 0usize];
pub type std_basic_string_allocator_type = std_basic_string__Char_alloc_type;
pub type std_basic_string_size_type = std_basic_string__Alloc_traits;
pub type std_basic_string_difference_type = std_basic_string__Alloc_traits;
pub type std_basic_string_reference = std_basic_string__Alloc_traits;
pub type std_basic_string_const_reference = std_basic_string__Alloc_traits;
pub type std_basic_string_pointer = std_basic_string__Alloc_traits;
pub type std_basic_string_const_pointer = std_basic_string__Alloc_traits;
pub type std_basic_string_iterator = __gnu_cxx___normal_iterator<std_basic_string_pointer>;
pub type std_basic_string_const_iterator =
    __gnu_cxx___normal_iterator<std_basic_string_const_pointer>;
pub type std_basic_string_const_reverse_iterator =
    std_reverse_iterator<std_basic_string_const_iterator>;
pub type std_basic_string_reverse_iterator = std_reverse_iterator<std_basic_string_iterator>;
pub type std_basic_string___const_iterator = std_basic_string_const_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string__Alloc_hider {
    pub _M_p: std_basic_string_pointer,
}
pub const std_basic_string__S_local_capacity: i32 = 0;
pub type std_basic_string__bindgen_ty_1 = i32;
#[repr(C)]
pub union std_basic_string__bindgen_ty_2<_CharT> {
    pub _M_local_buf: *mut _CharT,
    pub _M_allocated_capacity: std_basic_string_size_type,
    _bindgen_union_align: u64,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___true_type {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___true_type() {
    assert_eq!(
        ::std::mem::size_of::<std___true_type>(),
        1usize,
        concat!("Size of: ", stringify!(std___true_type))
    );
    assert_eq!(
        ::std::mem::align_of::<std___true_type>(),
        1usize,
        concat!("Alignment of ", stringify!(std___true_type))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___false_type {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___false_type() {
    assert_eq!(
        ::std::mem::size_of::<std___false_type>(),
        1usize,
        concat!("Size of: ", stringify!(std___false_type))
    );
    assert_eq!(
        ::std::mem::align_of::<std___false_type>(),
        1usize,
        concat!("Alignment of ", stringify!(std___false_type))
    );
}
pub type std___truth_type___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___traitor {
    pub _address: u8,
}
pub const std___traitor___value: i32 = 0;
pub type std___traitor__bindgen_ty_1 = i32;
pub type std___traitor___type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___are_same {
    pub _address: u8,
}
pub const std___are_same___value: i32 = 0;
pub type std___are_same__bindgen_ty_1 = i32;
pub type std___are_same___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_void {
    pub _address: u8,
}
pub const std___is_void___value: i32 = 0;
pub type std___is_void__bindgen_ty_1 = i32;
pub type std___is_void___type = std___false_type;
#[test]
fn __bindgen_test_layout_std___is_void_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_void>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_void)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_void>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_void)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integer {
    pub _address: u8,
}
pub const std___is_integer___value: i32 = 0;
pub type std___is_integer__bindgen_ty_1 = i32;
pub type std___is_integer___type = std___false_type;
#[test]
fn __bindgen_test_layout_std___is_integer_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_char16_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_char32_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating {
    pub _address: u8,
}
pub const std___is_floating___value: i32 = 0;
pub type std___is_floating__bindgen_ty_1 = i32;
pub type std___is_floating___type = std___false_type;
#[test]
fn __bindgen_test_layout_std___is_floating_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_floating>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_floating)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_floating>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_floating)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_floating_open0_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_floating>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_floating)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_floating>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_floating)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_floating_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_floating>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_floating)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_floating>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_floating)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer {
    pub _address: u8,
}
pub const std___is_pointer___value: i32 = 0;
pub type std___is_pointer__bindgen_ty_1 = i32;
pub type std___is_pointer___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_char {
    pub _address: u8,
}
pub const std___is_char___value: i32 = 0;
pub type std___is_char__bindgen_ty_1 = i32;
pub type std___is_char___type = std___false_type;
#[test]
fn __bindgen_test_layout_std___is_char_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_char>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_char)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_char>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_char)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_char_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_char>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_char)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_char>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_char)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_byte {
    pub _address: u8,
}
pub const std___is_byte___value: i32 = 0;
pub type std___is_byte__bindgen_ty_1 = i32;
pub type std___is_byte___type = std___false_type;
#[test]
fn __bindgen_test_layout_std___is_byte_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_byte>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_byte)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_byte>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_byte)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_byte_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_byte>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_byte)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_byte>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_byte)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_byte_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_byte>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_byte)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_byte>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_byte)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_move_iterator {
    pub _address: u8,
}
pub const std___is_move_iterator___value: i32 = 0;
pub type std___is_move_iterator__bindgen_ty_1 = i32;
pub type std___is_move_iterator___type = std___false_type;
extern "C" {
    #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
    pub fn std___throw_bad_exception();
}
extern "C" {
    #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
    pub fn std___throw_bad_alloc();
}
extern "C" {
    #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
    pub fn std___throw_bad_cast();
}
extern "C" {
    #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
    pub fn std___throw_bad_typeid();
}
extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
    pub fn std___throw_logic_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
    pub fn std___throw_domain_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
    pub fn std___throw_invalid_argument(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
    pub fn std___throw_length_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
    pub fn std___throw_out_of_range(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
    pub fn std___throw_out_of_range_fmt(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
    pub fn std___throw_runtime_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
    pub fn std___throw_range_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
    pub fn std___throw_overflow_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
    pub fn std___throw_underflow_error(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
    pub fn std___throw_ios_failure(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_system_errori"]
    pub fn std___throw_system_error(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_future_errori"]
    pub fn std___throw_future_error(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
    pub fn std___throw_bad_function_call();
}
pub type std_uint_least16_t = ::std::os::raw::c_ushort;
pub type std_uint_least32_t = ::std::os::raw::c_uint;
pub type std_integral_constant_value_type<_Tp> = _Tp;
pub type std_integral_constant_type = u8;
extern "C" {
    #[link_name = "\u{1}value"]
    pub static std_value: _Tp;
}
pub type std_true_type = u8;
pub type std_false_type = u8;
pub type std___bool_constant = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___or_ {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std___or__open0_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___or_>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std___or_))
    );
    assert_eq!(
        ::std::mem::align_of::<std___or_>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___or_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___and_ {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std___and__open0_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___and_>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std___and_))
    );
    assert_eq!(
        ::std::mem::align_of::<std___and_>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___and_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___not_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___success_type {
    pub _address: u8,
}
pub type std___success_type_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___failure_type {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___failure_type() {
    assert_eq!(
        ::std::mem::size_of::<std___failure_type>(),
        1usize,
        concat!("Size of: ", stringify!(std___failure_type))
    );
    assert_eq!(
        ::std::mem::align_of::<std___failure_type>(),
        1usize,
        concat!("Alignment of ", stringify!(std___failure_type))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_void_helper {
    pub _base: std_false_type,
}
#[test]
fn __bindgen_test_layout_std___is_void_helper_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_void_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_void_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_void_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_void_helper)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_void {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integral_helper {
    pub _base: std_false_type,
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_char16_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_char32_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_unsigned_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integral_helper_open0_unsigned___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integral_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integral_helper)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_integral {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating_point_helper {
    pub _base: std_false_type,
}
#[test]
fn __bindgen_test_layout_std___is_floating_point_helper_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_floating_point_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_floating_point_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_floating_point_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_floating_point_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_floating_point_helper_open0_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_floating_point_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_floating_point_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_floating_point_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_floating_point_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_floating_point_helper_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_floating_point_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_floating_point_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_floating_point_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_floating_point_helper)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_floating_point_helper_open0___float128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_floating_point_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_floating_point_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_floating_point_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_floating_point_helper)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_floating_point {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_array {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_lvalue_reference {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_rvalue_reference {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_object_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_object_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_function_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_function_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_enum {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_union {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_function {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_null_pointer_helper {
    pub _base: std_false_type,
}
#[test]
fn __bindgen_test_layout_std___is_null_pointer_helper_open0_nullptr_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_null_pointer_helper>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_null_pointer_helper)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_null_pointer_helper>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_null_pointer_helper)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_null_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nullptr_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_fundamental {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_object {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_compound {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_referenceable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_const {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_volatile {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivial {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copyable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_standard_layout {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_literal_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_empty {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_polymorphic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_final {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_abstract {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_signed {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_unsigned {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_known_bounds {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_unknown_bounds {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_destructible_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___do_is_destructible_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___do_is_destructible_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std___do_is_destructible_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std___do_is_destructible_impl>(),
        1usize,
        concat!("Alignment of ", stringify!(std___do_is_destructible_impl))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_destructible_impl {
    pub _address: u8,
}
pub type std___is_destructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_nt_destructible_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___do_is_nt_destructible_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___do_is_nt_destructible_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std___do_is_nt_destructible_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std___do_is_nt_destructible_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___do_is_nt_destructible_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_destructible_impl {
    pub _address: u8,
}
pub type std___is_nt_destructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_default_constructible_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___do_is_default_constructible_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___do_is_default_constructible_impl>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(std___do_is_default_constructible_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___do_is_default_constructible_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___do_is_default_constructible_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_default_constructible_impl {
    pub _address: u8,
}
pub type std___is_default_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_default_constructible_atom {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_static_castable_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___do_is_static_castable_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___do_is_static_castable_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std___do_is_static_castable_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std___do_is_static_castable_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___do_is_static_castable_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_static_castable_impl {
    pub _address: u8,
}
pub type std___is_static_castable_impl_type<_From> = _From;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_static_castable_safe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_static_castable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_direct_constructible_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___do_is_direct_constructible_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___do_is_direct_constructible_impl>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(std___do_is_direct_constructible_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___do_is_direct_constructible_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___do_is_direct_constructible_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_direct_constructible_impl {
    pub _address: u8,
}
pub type std___is_direct_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_direct_constructible_new_safe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_direct_constructible_ref_cast {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_direct_constructible_new {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_direct_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_nary_constructible_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___do_is_nary_constructible_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___do_is_nary_constructible_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std___do_is_nary_constructible_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std___do_is_nary_constructible_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___do_is_nary_constructible_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nary_constructible_impl {
    pub _address: u8,
}
pub type std___is_nary_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nary_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_constructible_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_default_constructible_atom {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_constructible_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_assignable_helper {
    pub _address: u8,
}
pub type std___is_assignable_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_assignable_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_implicitly_default_constructible_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___do_is_implicitly_default_constructible_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___do_is_implicitly_default_constructible_impl>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(std___do_is_implicitly_default_constructible_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___do_is_implicitly_default_constructible_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___do_is_implicitly_default_constructible_impl)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
    pub fn std___do_is_implicitly_default_constructible_impl___test() -> std_false_type;
}
impl std___do_is_implicitly_default_constructible_impl {
    #[inline]
    pub unsafe fn __test() -> std_false_type {
        std___do_is_implicitly_default_constructible_impl___test()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible_impl {
    pub _address: u8,
}
pub type std___is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible_safe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_virtual_destructor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_alignment_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_rank {
    pub _base: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_same {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_base_of {
    pub _address: u8,
}
pub type std___is_convertible_helper_type = std_is_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_convertible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_const {
    pub _address: u8,
}
pub type std_remove_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_volatile {
    pub _address: u8,
}
pub type std_remove_volatile_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_cv {
    pub _address: u8,
}
pub type std_remove_cv_type = std_remove_const;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_const {
    pub _address: u8,
}
pub type std_add_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_volatile {
    pub _address: u8,
}
pub type std_add_volatile_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_cv {
    pub _address: u8,
}
pub type std_add_cv_type = std_add_const;
pub type std_remove_const_t = std_remove_const;
pub type std_remove_volatile_t = std_remove_volatile;
pub type std_remove_cv_t = std_remove_cv;
pub type std_add_const_t = std_add_const;
pub type std_add_volatile_t = std_add_volatile;
pub type std_add_cv_t = std_add_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_reference {
    pub _address: u8,
}
pub type std_remove_reference_type<_Tp> = _Tp;
pub type std___add_lvalue_reference_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_lvalue_reference {
    pub _address: u8,
}
pub type std___add_rvalue_reference_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_rvalue_reference {
    pub _address: u8,
}
pub type std_remove_reference_t = std_remove_reference;
pub type std_add_lvalue_reference_t = std_add_lvalue_reference;
pub type std_add_rvalue_reference_t = std_add_rvalue_reference;
pub type std___match_cv_qualifiers___match = u8;
pub type std___match_cv_qualifiers___type = std___match_cv_qualifiers___match;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned {
    pub _address: u8,
}
pub type std___make_unsigned___type<_Tp> = _Tp;
#[test]
fn __bindgen_test_layout_std___make_unsigned_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_unsigned_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_unsigned_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_unsigned_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_unsigned_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_unsigned_open0_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_unsigned_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_unsigned_open0___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_unsigned)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_unsigned {
    pub _address: u8,
}
pub type std_make_unsigned_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_signed {
    pub _address: u8,
}
pub type std___make_signed___type<_Tp> = _Tp;
#[test]
fn __bindgen_test_layout_std___make_signed_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_signed>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_signed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_signed>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_signed)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_signed_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_signed>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_signed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_signed>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_signed)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_signed_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_signed>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_signed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_signed>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_signed)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_signed_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_signed>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_signed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_signed>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_signed)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_signed_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_signed>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_signed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_signed>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_signed)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_signed_open0_unsigned_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_signed>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_signed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_signed>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_signed)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_signed_open0_char16_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_signed>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_signed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_signed>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_signed)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_signed_open0_char32_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_signed>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_signed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_signed>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_signed)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___make_signed_open0_unsigned___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_signed>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_signed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_signed>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_signed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_signed {
    pub _address: u8,
}
pub type std_make_signed_type = u8;
pub type std_make_signed_t = std_make_signed;
pub type std_make_unsigned_t = std_make_unsigned;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_extent {
    pub _address: u8,
}
pub type std_remove_extent_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_all_extents {
    pub _address: u8,
}
pub type std_remove_all_extents_type<_Tp> = _Tp;
pub type std_remove_extent_t = std_remove_extent;
pub type std_remove_all_extents_t = std_remove_all_extents;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___remove_pointer_helper {
    pub _address: u8,
}
pub type std___remove_pointer_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_pointer {
    pub _address: u8,
}
pub type std___add_pointer_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_pointer {
    pub _address: u8,
}
pub type std_remove_pointer_t = std_remove_pointer;
pub type std_add_pointer_t = std_add_pointer;
#[repr(C)]
#[derive(Copy, Clone)]
pub union std___aligned_storage_msa___type {
    pub __data: *mut ::std::os::raw::c_uchar,
    pub __align: std___aligned_storage_msa___type__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___aligned_storage_msa___type__bindgen_ty_1 {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___aligned_storage_msa___type() {
    assert_eq!(
        ::std::mem::size_of::<std___aligned_storage_msa___type>(),
        8usize,
        concat!("Size of: ", stringify!(std___aligned_storage_msa___type))
    );
    assert_eq!(
        ::std::mem::align_of::<std___aligned_storage_msa___type>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(std___aligned_storage_msa___type)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union std_aligned_storage_type {
    pub __data: *mut ::std::os::raw::c_uchar,
    pub __align: std_aligned_storage_type__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_aligned_storage_type__bindgen_ty_1 {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_aligned_storage_type() {
    assert_eq!(
        ::std::mem::size_of::<std_aligned_storage_type>(),
        8usize,
        concat!("Size of: ", stringify!(std_aligned_storage_type))
    );
    assert_eq!(
        ::std::mem::align_of::<std_aligned_storage_type>(),
        8usize,
        concat!("Alignment of ", stringify!(std_aligned_storage_type))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___strictest_alignment {
    pub _address: u8,
}
pub type std_aligned_union___strictest = std___strictest_alignment;
pub type std_aligned_union_type = u8;
extern "C" {
    #[link_name = "\u{1}alignment_value"]
    pub static std_alignment_value: std_size_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_decay {
    pub _address: u8,
}
pub type std_decay___remove_type = std_remove_reference;
pub type std_decay_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___strip_reference_wrapper {
    pub _address: u8,
}
pub type std___strip_reference_wrapper___type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___decay_and_strip {
    pub _address: u8,
}
pub type std___decay_and_strip___type = std___strip_reference_wrapper;
pub type std__Require = u8;
pub type std_conditional_type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_common_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_common_type_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___do_common_type_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___do_common_type_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std___do_common_type_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std___do_common_type_impl>(),
        1usize,
        concat!("Alignment of ", stringify!(std___do_common_type_impl))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_impl {
    pub _address: u8,
}
pub type std___common_type_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_member_type_wrapper {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___do_member_type_wrapper() {
    assert_eq!(
        ::std::mem::size_of::<std___do_member_type_wrapper>(),
        1usize,
        concat!("Size of: ", stringify!(std___do_member_type_wrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<std___do_member_type_wrapper>(),
        1usize,
        concat!("Alignment of ", stringify!(std___do_member_type_wrapper))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___member_type_wrapper {
    pub _address: u8,
}
pub type std___member_type_wrapper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___expanded_common_type_wrapper {
    pub _address: u8,
}
pub type std___expanded_common_type_wrapper_type = std_common_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_underlying_type {
    pub _address: u8,
}
pub type std_underlying_type_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___declval_protector {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_result_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memfun_ref {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___invoke_memfun_ref() {
    assert_eq!(
        ::std::mem::size_of::<std___invoke_memfun_ref>(),
        1usize,
        concat!("Size of: ", stringify!(std___invoke_memfun_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<std___invoke_memfun_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(std___invoke_memfun_ref))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memfun_deref {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___invoke_memfun_deref() {
    assert_eq!(
        ::std::mem::size_of::<std___invoke_memfun_deref>(),
        1usize,
        concat!("Size of: ", stringify!(std___invoke_memfun_deref))
    );
    assert_eq!(
        ::std::mem::align_of::<std___invoke_memfun_deref>(),
        1usize,
        concat!("Alignment of ", stringify!(std___invoke_memfun_deref))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memobj_ref {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___invoke_memobj_ref() {
    assert_eq!(
        ::std::mem::size_of::<std___invoke_memobj_ref>(),
        1usize,
        concat!("Size of: ", stringify!(std___invoke_memobj_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<std___invoke_memobj_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(std___invoke_memobj_ref))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memobj_deref {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___invoke_memobj_deref() {
    assert_eq!(
        ::std::mem::size_of::<std___invoke_memobj_deref>(),
        1usize,
        concat!("Size of: ", stringify!(std___invoke_memobj_deref))
    );
    assert_eq!(
        ::std::mem::align_of::<std___invoke_memobj_deref>(),
        1usize,
        concat!("Alignment of ", stringify!(std___invoke_memobj_deref))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_other {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___invoke_other() {
    assert_eq!(
        ::std::mem::size_of::<std___invoke_other>(),
        1usize,
        concat!("Size of: ", stringify!(std___invoke_other))
    );
    assert_eq!(
        ::std::mem::align_of::<std___invoke_other>(),
        1usize,
        concat!("Alignment of ", stringify!(std___invoke_other))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_success {
    pub _address: u8,
}
pub type std___result_of_success___invoke_type<_Tag> = _Tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_ref_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___result_of_memfun_ref_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___result_of_memfun_ref_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std___result_of_memfun_ref_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std___result_of_memfun_ref_impl>(),
        1usize,
        concat!("Alignment of ", stringify!(std___result_of_memfun_ref_impl))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_ref {
    pub _address: u8,
}
pub type std___result_of_memfun_ref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_deref_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___result_of_memfun_deref_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___result_of_memfun_deref_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std___result_of_memfun_deref_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std___result_of_memfun_deref_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___result_of_memfun_deref_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_deref {
    pub _address: u8,
}
pub type std___result_of_memfun_deref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_ref_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___result_of_memobj_ref_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___result_of_memobj_ref_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std___result_of_memobj_ref_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std___result_of_memobj_ref_impl>(),
        1usize,
        concat!("Alignment of ", stringify!(std___result_of_memobj_ref_impl))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_ref {
    pub _address: u8,
}
pub type std___result_of_memobj_ref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_deref_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___result_of_memobj_deref_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___result_of_memobj_deref_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std___result_of_memobj_deref_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std___result_of_memobj_deref_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___result_of_memobj_deref_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_deref {
    pub _address: u8,
}
pub type std___result_of_memobj_deref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___inv_unwrap {
    pub _address: u8,
}
pub type std___inv_unwrap_type<_Tp> = _Tp;
pub type std___result_of_impl_type = std___failure_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_other_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___result_of_other_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___result_of_other_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std___result_of_other_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std___result_of_other_impl>(),
        1usize,
        concat!("Alignment of ", stringify!(std___result_of_other_impl))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_result {
    pub _address: u8,
}
pub type std_aligned_storage_t = u8;
pub type std_aligned_union_t = u8;
pub type std_decay_t = std_decay;
pub type std_enable_if_t = u8;
pub type std_conditional_t = u8;
pub type std_common_type_t = std_common_type;
pub type std_underlying_type_t = std_underlying_type;
pub type std_result_of_t = std_result_of;
pub type std___enable_if_t = u8;
pub type std___void_t = ::std::os::raw::c_void;
pub type std_void_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detector {
    pub _address: u8,
}
pub type std___detector_value_t = std_false_type;
pub type std___detector_type<_Default> = _Default;
pub type std___detected_or = std___detector;
pub type std___detected_or_t = std___detected_or;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_tuple_like_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_tuple_like {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_details___do_is_swappable_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___swappable_details___do_is_swappable_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___swappable_details___do_is_swappable_impl>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(std___swappable_details___do_is_swappable_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___swappable_details___do_is_swappable_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___swappable_details___do_is_swappable_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_details___do_is_nothrow_swappable_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___swappable_details___do_is_nothrow_swappable_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___swappable_details___do_is_nothrow_swappable_impl>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(std___swappable_details___do_is_nothrow_swappable_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___swappable_details___do_is_nothrow_swappable_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___swappable_details___do_is_nothrow_swappable_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable_impl {
    pub _address: u8,
}
pub type std___is_swappable_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable_impl {
    pub _address: u8,
}
pub type std___is_nothrow_swappable_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_with_details___do_is_swappable_with_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___swappable_with_details___do_is_swappable_with_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___swappable_with_details___do_is_swappable_with_impl>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(std___swappable_with_details___do_is_swappable_with_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___swappable_with_details___do_is_swappable_with_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___swappable_with_details___do_is_swappable_with_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_with_details___do_is_nothrow_swappable_with_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___swappable_with_details___do_is_nothrow_swappable_with_impl() {
    assert_eq!(
        ::std::mem::size_of::<std___swappable_with_details___do_is_nothrow_swappable_with_impl>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(std___swappable_with_details___do_is_nothrow_swappable_with_impl)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___swappable_with_details___do_is_nothrow_swappable_with_impl>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(std___swappable_with_details___do_is_nothrow_swappable_with_impl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable_with_impl {
    pub _address: u8,
}
pub type std___is_swappable_with_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable_with_impl {
    pub _address: u8,
}
pub type std___is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_swappable_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_swappable_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_invocable_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___call_is_nothrow {
    pub _address: u8,
}
pub type std___call_is_nothrow_ = std___call_is_nothrow;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std___nonesuch {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___nonesuch() {
    assert_eq!(
        ::std::mem::size_of::<std___nonesuch>(),
        1usize,
        concat!("Size of: ", stringify!(std___nonesuch))
    );
    assert_eq!(
        ::std::mem::align_of::<std___nonesuch>(),
        1usize,
        concat!("Alignment of ", stringify!(std___nonesuch))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___move_if_noexcept_cond {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_piecewise_construct_t {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_piecewise_construct_t() {
    assert_eq!(
        ::std::mem::size_of::<std_piecewise_construct_t>(),
        1usize,
        concat!("Size of: ", stringify!(std_piecewise_construct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<std_piecewise_construct_t>(),
        1usize,
        concat!("Alignment of ", stringify!(std_piecewise_construct_t))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZStL19piecewise_construct"]
    pub static std_piecewise_construct: std_piecewise_construct_t;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___nonesuch_no_braces {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___nonesuch_no_braces() {
    assert_eq!(
        ::std::mem::size_of::<std___nonesuch_no_braces>(),
        1usize,
        concat!("Size of: ", stringify!(std___nonesuch_no_braces))
    );
    assert_eq!(
        ::std::mem::align_of::<std___nonesuch_no_braces>(),
        1usize,
        concat!("Alignment of ", stringify!(std___nonesuch_no_braces))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std___pair_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_pair<_T1, _T2> {
    pub first: _T1,
    pub second: _T2,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
}
pub type std_pair_first_type<_T1> = _T1;
pub type std_pair_second_type<_T2> = _T2;
pub type std_pair__PCCP = u8;
pub type std_pair__PCCFP = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_input_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_input_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_input_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_input_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_input_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_input_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_output_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_output_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_output_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_output_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_output_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_output_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_forward_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_forward_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_forward_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_forward_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_forward_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_forward_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bidirectional_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_bidirectional_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_bidirectional_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_bidirectional_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bidirectional_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_bidirectional_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_random_access_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_random_access_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_random_access_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_random_access_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_random_access_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_random_access_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
    pub _address: u8,
}
pub type std_iterator_iterator_category<_Category> = _Category;
pub type std_iterator_value_type<_Tp> = _Tp;
pub type std_iterator_difference_type<_Distance> = _Distance;
pub type std_iterator_pointer<_Pointer> = _Pointer;
pub type std_iterator_reference<_Reference> = _Reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iterator_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
    pub _address: u8,
}
pub type std__RequireInputIter = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_const_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___undefined {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___get_first_arg {
    pub _address: u8,
}
pub type std___get_first_arg_type = std___undefined;
pub type std___get_first_arg_t = std___get_first_arg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___replace_first_arg {
    pub _address: u8,
}
pub type std___replace_first_arg_t = std___replace_first_arg;
pub type std___make_not_void = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits {
    pub _address: u8,
}
pub type std_pointer_traits___element_type = [u8; 0usize];
pub type std_pointer_traits___difference_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits___rebind {
    pub _address: u8,
}
pub type std_pointer_traits_pointer<_Ptr> = _Ptr;
pub type std_pointer_traits_element_type = std___detected_or_t;
pub type std_pointer_traits_difference_type = std___detected_or_t;
pub type std_pointer_traits_rebind = std_pointer_traits___rebind;
pub type std___ptr_rebind = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reverse_iterator<_Iterator> {
    pub current: _Iterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type std_reverse_iterator___traits_type = std_iterator_traits;
pub type std_reverse_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_reverse_iterator_difference_type = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_pointer = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_reference = std_reverse_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_back_insert_iterator<_Container> {
    pub container: *mut _Container,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
}
pub type std_back_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_front_insert_iterator<_Container> {
    pub container: *mut _Container,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
}
pub type std_front_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
pub struct std_insert_iterator<_Container> {
    pub container: *mut _Container,
    pub iter: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
}
pub type std_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_move_iterator<_Iterator> {
    pub _M_current: _Iterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type std_move_iterator___traits_type = std_iterator_traits;
pub type std_move_iterator___base_ref = std_move_iterator___traits_type;
pub type std_move_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_move_iterator_iterator_category = std_move_iterator___traits_type;
pub type std_move_iterator_value_type = std_move_iterator___traits_type;
pub type std_move_iterator_difference_type = std_move_iterator___traits_type;
pub type std_move_iterator_pointer<_Iterator> = _Iterator;
pub type std_move_iterator_reference = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_istreambuf_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ostreambuf_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___lc_rai {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std___lc_rai_open0_std_random_access_iterator_tag_std_random_access_iterator_tag_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std___lc_rai>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___lc_rai)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___lc_rai>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___lc_rai)
        )
    );
}
pub type std_streamoff = ::std::os::raw::c_long;
pub type std_streamsize = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_fpos<_StateT> {
    pub _M_off: std_streamoff,
    pub _M_state: _StateT,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
}
pub type std_streampos = std_fpos<mbstate_t>;
pub type std_wstreampos = std_fpos<mbstate_t>;
pub type std_u16streampos = std_fpos<mbstate_t>;
pub type std_u32streampos = std_fpos<mbstate_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char16_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char32_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_std_exception() {
    assert_eq!(
        ::std::mem::size_of::<std_exception>(),
        8usize,
        concat!("Size of: ", stringify!(std_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<std_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(std_exception))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
    pub fn std_exception_exception_destructor(this: *mut std_exception);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
    pub fn std_exception_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_exception {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout_std_bad_exception() {
    assert_eq!(
        ::std::mem::size_of::<std_bad_exception>(),
        8usize,
        concat!("Size of: ", stringify!(std_bad_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bad_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(std_bad_exception))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt13bad_exceptionD1Ev"]
    pub fn std_bad_exception_bad_exception_destructor(this: *mut std_bad_exception);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt13bad_exception4whatEv"]
    pub fn std_bad_exception_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
pub type std_terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type std_unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_ZSt13set_terminatePFvvE"]
    pub fn std_set_terminate(arg1: std_terminate_handler) -> std_terminate_handler;
}
extern "C" {
    #[link_name = "\u{1}_ZSt13get_terminatev"]
    pub fn std_get_terminate() -> std_terminate_handler;
}
extern "C" {
    #[link_name = "\u{1}_ZSt9terminatev"]
    pub fn std_terminate();
}
extern "C" {
    #[link_name = "\u{1}_ZSt14set_unexpectedPFvvE"]
    pub fn std_set_unexpected(arg1: std_unexpected_handler) -> std_unexpected_handler;
}
extern "C" {
    #[link_name = "\u{1}_ZSt14get_unexpectedv"]
    pub fn std_get_unexpected() -> std_unexpected_handler;
}
extern "C" {
    #[link_name = "\u{1}_ZSt10unexpectedv"]
    pub fn std_unexpected();
}
extern "C" {
    #[link_name = "\u{1}_ZSt18uncaught_exceptionv"]
    pub fn std_uncaught_exception() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZSt19uncaught_exceptionsv"]
    pub fn std_uncaught_exceptions() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZSt11_Hash_bytesPKvmm"]
    pub fn std__Hash_bytes(
        __ptr: *const ::std::os::raw::c_void,
        __len: std_size_t,
        __seed: std_size_t,
    ) -> std_size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZSt15_Fnv_hash_bytesPKvmm"]
    pub fn std__Fnv_hash_bytes(
        __ptr: *const ::std::os::raw::c_void,
        __len: std_size_t,
        __seed: std_size_t,
    ) -> std_size_t;
}
#[repr(C)]
pub struct std_type_info__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_type_info {
    pub vtable_: *const std_type_info__bindgen_vtable,
    pub __name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_std_type_info() {
    assert_eq!(
        ::std::mem::size_of::<std_type_info>(),
        16usize,
        concat!("Size of: ", stringify!(std_type_info))
    );
    assert_eq!(
        ::std::mem::align_of::<std_type_info>(),
        8usize,
        concat!("Alignment of ", stringify!(std_type_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_type_info>())).__name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_type_info),
            "::",
            stringify!(__name)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt9type_infoD1Ev"]
    pub fn std_type_info_type_info_destructor(this: *mut std_type_info);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info14__is_pointer_pEv"]
    pub fn std_type_info___is_pointer_p(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info15__is_function_pEv"]
    pub fn std_type_info___is_function_p(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info10__do_catchEPKS_PPvj"]
    pub fn std_type_info___do_catch(
        this: *mut ::std::os::raw::c_void,
        __thr_type: *const std_type_info,
        __thr_obj: *mut *mut ::std::os::raw::c_void,
        __outer: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv"]
    pub fn std_type_info___do_upcast(
        this: *mut ::std::os::raw::c_void,
        __target: *const __cxxabiv1___class_type_info,
        __obj_ptr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_cast {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout_std_bad_cast() {
    assert_eq!(
        ::std::mem::size_of::<std_bad_cast>(),
        8usize,
        concat!("Size of: ", stringify!(std_bad_cast))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bad_cast>(),
        8usize,
        concat!("Alignment of ", stringify!(std_bad_cast))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt8bad_castD1Ev"]
    pub fn std_bad_cast_bad_cast_destructor(this: *mut std_bad_cast);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt8bad_cast4whatEv"]
    pub fn std_bad_cast_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_typeid {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout_std_bad_typeid() {
    assert_eq!(
        ::std::mem::size_of::<std_bad_typeid>(),
        8usize,
        concat!("Size of: ", stringify!(std_bad_typeid))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bad_typeid>(),
        8usize,
        concat!("Alignment of ", stringify!(std_bad_typeid))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt10bad_typeidD1Ev"]
    pub fn std_bad_typeid_bad_typeid_destructor(this: *mut std_bad_typeid);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt10bad_typeid4whatEv"]
    pub fn std_bad_typeid_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___exception_ptr_exception_ptr {
    pub _M_exception_object: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_std___exception_ptr_exception_ptr() {
    assert_eq!(
        ::std::mem::size_of::<std___exception_ptr_exception_ptr>(),
        8usize,
        concat!("Size of: ", stringify!(std___exception_ptr_exception_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<std___exception_ptr_exception_ptr>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(std___exception_ptr_exception_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<std___exception_ptr_exception_ptr>()))._M_exception_object
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std___exception_ptr_exception_ptr),
            "::",
            stringify!(_M_exception_object)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptr4swapERS0_"]
    pub fn std___exception_ptr_exception_ptr_swap(
        this: *mut std___exception_ptr_exception_ptr,
        arg1: *mut std___exception_ptr_exception_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv"]
    pub fn std___exception_ptr_exception_ptr___cxa_exception_type(
        this: *const std___exception_ptr_exception_ptr,
    ) -> *const std_type_info;
}
extern "C" {
    #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrC1Ev"]
    pub fn std___exception_ptr_exception_ptr_exception_ptr(
        this: *mut std___exception_ptr_exception_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrC1ERKS0_"]
    pub fn std___exception_ptr_exception_ptr_exception_ptr1(
        this: *mut std___exception_ptr_exception_ptr,
        arg1: *const std___exception_ptr_exception_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt15__exception_ptr13exception_ptrD1Ev"]
    pub fn std___exception_ptr_exception_ptr_exception_ptr_destructor(
        this: *mut std___exception_ptr_exception_ptr,
    );
}
impl std___exception_ptr_exception_ptr {
    #[inline]
    pub unsafe fn swap(&mut self, arg1: *mut std___exception_ptr_exception_ptr) {
        std___exception_ptr_exception_ptr_swap(self, arg1)
    }
    #[inline]
    pub unsafe fn __cxa_exception_type(&self) -> *const std_type_info {
        std___exception_ptr_exception_ptr___cxa_exception_type(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___exception_ptr_exception_ptr_exception_ptr(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std___exception_ptr_exception_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___exception_ptr_exception_ptr_exception_ptr1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std___exception_ptr_exception_ptr_exception_ptr_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZSt17current_exceptionv"]
    pub fn std_current_exception() -> std___exception_ptr_exception_ptr;
}
extern "C" {
    #[link_name = "\u{1}_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE"]
    pub fn std_rethrow_exception(arg1: std___exception_ptr_exception_ptr);
}
#[repr(C)]
pub struct std_nested_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_nested_exception {
    pub vtable_: *const std_nested_exception__bindgen_vtable,
    pub _M_ptr: std___exception_ptr_exception_ptr,
}
#[test]
fn bindgen_test_layout_std_nested_exception() {
    assert_eq!(
        ::std::mem::size_of::<std_nested_exception>(),
        16usize,
        concat!("Size of: ", stringify!(std_nested_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<std_nested_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(std_nested_exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_nested_exception>()))._M_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_nested_exception),
            "::",
            stringify!(_M_ptr)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt16nested_exceptionD1Ev"]
    pub fn std_nested_exception_nested_exception_destructor(this: *mut std_nested_exception);
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Nested_exception<_Except> {
    pub _base: _Except,
    pub _base_1: std_nested_exception,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Except>>,
}
pub type std___rethrow_if_nested_cond = u8;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_alloc {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout_std_bad_alloc() {
    assert_eq!(
        ::std::mem::size_of::<std_bad_alloc>(),
        8usize,
        concat!("Size of: ", stringify!(std_bad_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bad_alloc>(),
        8usize,
        concat!("Alignment of ", stringify!(std_bad_alloc))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
    pub fn std_bad_alloc_bad_alloc_destructor(this: *mut std_bad_alloc);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
    pub fn std_bad_alloc_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_array_new_length {
    pub _base: std_bad_alloc,
}
#[test]
fn bindgen_test_layout_std_bad_array_new_length() {
    assert_eq!(
        ::std::mem::size_of::<std_bad_array_new_length>(),
        8usize,
        concat!("Size of: ", stringify!(std_bad_array_new_length))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bad_array_new_length>(),
        8usize,
        concat!("Alignment of ", stringify!(std_bad_array_new_length))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt20bad_array_new_lengthD1Ev"]
    pub fn std_bad_array_new_length_bad_array_new_length_destructor(
        this: *mut std_bad_array_new_length,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt20bad_array_new_length4whatEv"]
    pub fn std_bad_array_new_length_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nothrow_t {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_nothrow_t() {
    assert_eq!(
        ::std::mem::size_of::<std_nothrow_t>(),
        1usize,
        concat!("Size of: ", stringify!(std_nothrow_t))
    );
    assert_eq!(
        ::std::mem::align_of::<std_nothrow_t>(),
        1usize,
        concat!("Alignment of ", stringify!(std_nothrow_t))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZSt7nothrow"]
    pub static std_nothrow: std_nothrow_t;
}
pub type std_new_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
    pub fn std_set_new_handler(arg1: std_new_handler) -> std_new_handler;
}
extern "C" {
    #[link_name = "\u{1}_ZSt15get_new_handlerv"]
    pub fn std_get_new_handler() -> std_new_handler;
}
pub type std___allocator_base = __gnu_cxx_new_allocator;
#[test]
fn __bindgen_test_layout_std_allocator_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_size_type = std_size_t;
pub type std_allocator_difference_type = isize;
pub type std_allocator_pointer<_Tp> = *mut _Tp;
pub type std_allocator_const_pointer<_Tp> = *const _Tp;
pub type std_allocator_reference<_Tp> = *mut _Tp;
pub type std_allocator_const_reference<_Tp> = *const _Tp;
pub type std_allocator_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = std_allocator;
pub type std_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std_allocator_is_always_equal = std_true_type;
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
pub type std___c_locale = __locale_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ios_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ios {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_streambuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ostream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_iostream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_filebuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ifstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ofstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_fstream {
    pub _address: u8,
}
pub type std_ios = std_basic_ios;
pub type std_streambuf = std_basic_streambuf;
pub type std_istream = std_basic_istream;
pub type std_ostream = std_basic_ostream;
pub type std_iostream = std_basic_iostream;
pub type std_stringbuf = std_basic_stringbuf;
pub type std_istringstream = std_basic_istringstream;
pub type std_ostringstream = std_basic_ostringstream;
pub type std_stringstream = std_basic_stringstream;
pub type std_filebuf = std_basic_filebuf;
pub type std_ifstream = std_basic_ifstream;
pub type std_ofstream = std_basic_ofstream;
pub type std_fstream = std_basic_fstream;
pub type std_wios = std_basic_ios;
pub type std_wstreambuf = std_basic_streambuf;
pub type std_wistream = std_basic_istream;
pub type std_wostream = std_basic_ostream;
pub type std_wiostream = std_basic_iostream;
pub type std_wstringbuf = std_basic_stringbuf;
pub type std_wistringstream = std_basic_istringstream;
pub type std_wostringstream = std_basic_ostringstream;
pub type std_wstringstream = std_basic_stringstream;
pub type std_wfilebuf = std_basic_filebuf;
pub type std_wifstream = std_basic_ifstream;
pub type std_wofstream = std_basic_ofstream;
pub type std_wfstream = std_basic_fstream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_num_get {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_num_put {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_put {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_put_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_function {
    pub _address: u8,
}
pub type std_unary_function_argument_type<_Arg> = _Arg;
pub type std_unary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_function {
    pub _address: u8,
}
pub type std_binary_function_first_argument_type<_Arg1> = _Arg1;
pub type std_binary_function_second_argument_type<_Arg2> = _Arg2;
pub type std_binary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_transparent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_plus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_minus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multiplies {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_divides {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_modulus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_negate {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_plus_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_plus>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_plus))
    );
    assert_eq!(
        ::std::mem::align_of::<std_plus>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_plus)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_minus_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_minus>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_minus))
    );
    assert_eq!(
        ::std::mem::align_of::<std_minus>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_minus)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_multiplies_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_multiplies>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_multiplies)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_multiplies>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_multiplies)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_divides_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_divides>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_divides))
    );
    assert_eq!(
        ::std::mem::align_of::<std_divides>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_divides)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_modulus_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_modulus>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_modulus))
    );
    assert_eq!(
        ::std::mem::align_of::<std_modulus>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_modulus)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_negate_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_negate>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_negate))
    );
    assert_eq!(
        ::std::mem::align_of::<std_negate>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_negate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_not_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less_equal {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_equal_to_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_equal_to>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_equal_to)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_equal_to>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_equal_to)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_not_equal_to_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_not_equal_to>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_not_equal_to)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_not_equal_to>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_not_equal_to)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_greater_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_greater>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_greater))
    );
    assert_eq!(
        ::std::mem::align_of::<std_greater>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_greater)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_less>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_less))
    );
    assert_eq!(
        ::std::mem::align_of::<std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_greater_equal_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_greater_equal>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_greater_equal)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_greater_equal>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_greater_equal)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_less_equal_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_less_equal>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_less_equal)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_less_equal>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_less_equal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_not {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_logical_and_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_logical_and>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_logical_and)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_logical_and>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_logical_and)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_logical_or_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_logical_or>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_logical_or)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_logical_or>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_logical_or)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_logical_not_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_logical_not>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_logical_not)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_logical_not>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_logical_not)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_xor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_not {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_bit_and_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_bit_and>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_bit_and))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bit_and>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_bit_and)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_bit_or_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_bit_or>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_bit_or))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bit_or>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_bit_or)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_bit_xor_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_bit_xor>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_bit_xor))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bit_xor>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_bit_xor)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_bit_not_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_bit_not>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_bit_not))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bit_not>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_bit_not)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_negate<_Predicate> {
    pub _M_pred: _Predicate,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_negate<_Predicate> {
    pub _M_pred: _Predicate,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_unary_function<_Arg, _Result> {
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_binary_function<_Arg1, _Arg2, _Result> {
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Identity {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Select1st {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Select2nd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_t<_Ret> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_t<_Ret> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_ref_t<_Ret> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_ref_t<_Ret> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_t<_Ret, _Arg> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_t<_Ret, _Arg> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_ref_t<_Ret, _Arg> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_ref_t<_Ret, _Arg> {
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
#[repr(C)]
pub struct std_binder1st<_Operation> {
    pub op: _Operation,
    pub value: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
}
#[repr(C)]
pub struct std_binder2nd<_Operation> {
    pub op: _Operation,
    pub value: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_initializer_list<_E> {
    pub _M_array: std_initializer_list_iterator<_E>,
    pub _M_len: std_initializer_list_size_type,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
}
pub type std_initializer_list_value_type<_E> = _E;
pub type std_initializer_list_reference<_E> = *const _E;
pub type std_initializer_list_const_reference<_E> = *const _E;
pub type std_initializer_list_size_type = std_size_t;
pub type std_initializer_list_iterator<_E> = *const _E;
pub type std_initializer_list_const_iterator<_E> = *const _E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_valarray {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base___rebind {
    pub _address: u8,
}
pub type std___allocator_traits_base___pointer = [u8; 0usize];
pub type std___allocator_traits_base___c_pointer = [u8; 0usize];
pub type std___allocator_traits_base___v_pointer = [u8; 0usize];
pub type std___allocator_traits_base___cv_pointer = [u8; 0usize];
pub type std___allocator_traits_base___pocca = [u8; 0usize];
pub type std___allocator_traits_base___pocma = [u8; 0usize];
pub type std___allocator_traits_base___pocs = [u8; 0usize];
pub type std___allocator_traits_base___equal = [u8; 0usize];
#[test]
fn bindgen_test_layout_std___allocator_traits_base() {
    assert_eq!(
        ::std::mem::size_of::<std___allocator_traits_base>(),
        1usize,
        concat!("Size of: ", stringify!(std___allocator_traits_base))
    );
    assert_eq!(
        ::std::mem::align_of::<std___allocator_traits_base>(),
        1usize,
        concat!("Alignment of ", stringify!(std___allocator_traits_base))
    );
}
pub type std___alloc_rebind = std___allocator_traits_base;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits {
    pub _address: u8,
}
pub type std_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std_allocator_traits_value_type = [u8; 0usize];
pub type std_allocator_traits_pointer = std___detected_or_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Ptr {
    pub _address: u8,
}
pub type std_allocator_traits__Ptr_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Diff {
    pub _address: u8,
}
pub type std_allocator_traits__Diff_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Size {
    pub _address: u8,
}
pub type std_allocator_traits_const_pointer = [u8; 0usize];
pub type std_allocator_traits_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_const_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_difference_type = [u8; 0usize];
pub type std_allocator_traits_size_type = [u8; 0usize];
pub type std_allocator_traits_propagate_on_container_copy_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_move_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_swap = std___detected_or_t;
pub type std_allocator_traits_is_always_equal = std___detected_or_t;
pub type std_allocator_traits_rebind_alloc = std___alloc_rebind;
pub type std_allocator_traits_rebind_traits = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits___construct_helper {
    pub _address: u8,
}
pub type std_allocator_traits___construct_helper_type<_Alloc> = _Alloc;
pub type std_allocator_traits___has_construct = std_allocator_traits___construct_helper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_copy_insertable_impl {
    pub _address: u8,
}
pub type std___is_copy_insertable_impl__Traits = std_allocator_traits;
pub type std___is_copy_insertable_impl_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_copy_insertable {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
    pub fn std_getline(
        __in: *mut std_basic_istream,
        __str: *mut std_basic_string<::std::os::raw::c_char>,
        __delim: ::std::os::raw::c_char,
    ) -> *mut std_basic_istream;
}
extern "C" {
    #[link_name = "\u{1}_ZSt7getlineIwSt11char_traitsIwESaIwEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
    pub fn std_getline1(
        __in: *mut std_basic_istream,
        __str: *mut std_basic_string<u32>,
        __delim: u32,
    ) -> *mut std_basic_istream;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_base {
    pub _address: u8,
}
pub type std___hash_base_result_type<_Result> = _Result;
pub type std___hash_base_argument_type<_Arg> = _Arg;
#[repr(C)]
#[derive(Debug)]
pub struct std___poison_hash {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_hash {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_hash_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_char16_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_char32_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_unsigned_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_unsigned___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Hash_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std__Hash_impl() {
    assert_eq!(
        ::std::mem::size_of::<std__Hash_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std__Hash_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Hash_impl>(),
        1usize,
        concat!("Alignment of ", stringify!(std__Hash_impl))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fnv_hash_impl {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std__Fnv_hash_impl() {
    assert_eq!(
        ::std::mem::size_of::<std__Fnv_hash_impl>(),
        1usize,
        concat!("Size of: ", stringify!(std__Fnv_hash_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Fnv_hash_impl>(),
        1usize,
        concat!("Alignment of ", stringify!(std__Fnv_hash_impl))
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_fast_hash {
    pub _base: std_true_type,
}
#[test]
fn __bindgen_test_layout_std___is_fast_hash_open0_std_hash_open1_long_double_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std___is_fast_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_fast_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_fast_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_fast_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std___is_fast_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_fast_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_fast_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_fast_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_allocator_open2_wchar_t_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_wchar_t_std_char_traits_open3_wchar_t_close3_std_allocator_open3_wchar_t_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std___is_fast_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_fast_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_fast_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_fast_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_allocator_open2_char16_t_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char16_t_std_char_traits_open3_char16_t_close3_std_allocator_open3_char16_t_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std___is_fast_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_fast_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_fast_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_fast_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_allocator_open2_char32_t_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char32_t_std_char_traits_open3_char32_t_close3_std_allocator_open3_char32_t_close3_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std___is_fast_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_fast_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_fast_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_fast_hash)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}npos"]
    pub static std_npos: std_basic_string_size_type;
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u32>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
}
pub type std_size_type = size_type;
#[repr(C)]
#[derive(Debug)]
pub struct std__Temporary_buffer<_Tp> {
    pub _M_original_len: std__Temporary_buffer_size_type,
    pub _M_len: std__Temporary_buffer_size_type,
    pub _M_buffer: std__Temporary_buffer_pointer<_Tp>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
pub type std__Temporary_buffer_value_type<_Tp> = _Tp;
pub type std__Temporary_buffer_pointer<_Tp> = *mut std__Temporary_buffer_value_type<_Tp>;
pub type std__Temporary_buffer_iterator<_Tp> = std__Temporary_buffer_pointer<_Tp>;
pub type std__Temporary_buffer_size_type = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_raw_storage_iterator<_OutputIterator> {
    pub _M_iter: _OutputIterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutputIterator>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___erased_type {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___erased_type() {
    assert_eq!(
        ::std::mem::size_of::<std___erased_type>(),
        1usize,
        concat!("Size of: ", stringify!(std___erased_type))
    );
    assert_eq!(
        ::std::mem::align_of::<std___erased_type>(),
        1usize,
        concat!("Alignment of ", stringify!(std___erased_type))
    );
}
pub type std___is_erased_or_convertible = std___or_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_arg_t {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_allocator_arg_t() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator_arg_t>(),
        1usize,
        concat!("Size of: ", stringify!(std_allocator_arg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator_arg_t>(),
        1usize,
        concat!("Alignment of ", stringify!(std_allocator_arg_t))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZStL13allocator_arg"]
    pub static std_allocator_arg: std_allocator_arg_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_allocator_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uses_allocator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc_base {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___uses_alloc_base() {
    assert_eq!(
        ::std::mem::size_of::<std___uses_alloc_base>(),
        1usize,
        concat!("Size of: ", stringify!(std___uses_alloc_base))
    );
    assert_eq!(
        ::std::mem::align_of::<std___uses_alloc_base>(),
        1usize,
        concat!("Alignment of ", stringify!(std___uses_alloc_base))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc0 {
    pub _M_a: std___uses_alloc0__Sink,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc0__Sink {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___uses_alloc0__Sink() {
    assert_eq!(
        ::std::mem::size_of::<std___uses_alloc0__Sink>(),
        1usize,
        concat!("Size of: ", stringify!(std___uses_alloc0__Sink))
    );
    assert_eq!(
        ::std::mem::align_of::<std___uses_alloc0__Sink>(),
        1usize,
        concat!("Alignment of ", stringify!(std___uses_alloc0__Sink))
    );
}
#[test]
fn bindgen_test_layout_std___uses_alloc0() {
    assert_eq!(
        ::std::mem::size_of::<std___uses_alloc0>(),
        1usize,
        concat!("Size of: ", stringify!(std___uses_alloc0))
    );
    assert_eq!(
        ::std::mem::align_of::<std___uses_alloc0>(),
        1usize,
        concat!("Alignment of ", stringify!(std___uses_alloc0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std___uses_alloc0>()))._M_a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std___uses_alloc0),
            "::",
            stringify!(_M_a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc1<_Alloc> {
    pub _M_a: *const _Alloc,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc2<_Alloc> {
    pub _M_a: *const _Alloc,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
pub type std___uses_alloc_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_uses_allocator_predicate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_uses_allocator_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_uses_allocator_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple_size {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_size_cv_impl {
    pub _address: u8,
}
pub type std___tuple_element_t = u8;
pub type std_tuple_element_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Itup_cat {
    pub _address: u8,
}
pub type std_integer_sequence_value_type<_Tp> = _Tp;
pub type std_make_integer_sequence = u8;
pub type std_index_sequence = u8;
pub type std_make_index_sequence = std_make_integer_sequence;
pub type std_index_sequence_for = std_make_index_sequence;
#[repr(C)]
pub struct std___cow_string {
    pub __bindgen_anon_1: std___cow_string__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union std___cow_string__bindgen_ty_1 {
    pub _M_p: *const ::std::os::raw::c_char,
    pub _M_bytes: [::std::os::raw::c_char; 8usize],
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_std___cow_string__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<std___cow_string__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(std___cow_string__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<std___cow_string__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(std___cow_string__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<std___cow_string__bindgen_ty_1>()))._M_p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std___cow_string__bindgen_ty_1),
            "::",
            stringify!(_M_p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<std___cow_string__bindgen_ty_1>()))._M_bytes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std___cow_string__bindgen_ty_1),
            "::",
            stringify!(_M_bytes)
        )
    );
}
#[test]
fn bindgen_test_layout_std___cow_string() {
    assert_eq!(
        ::std::mem::size_of::<std___cow_string>(),
        8usize,
        concat!("Size of: ", stringify!(std___cow_string))
    );
    assert_eq!(
        ::std::mem::align_of::<std___cow_string>(),
        8usize,
        concat!("Alignment of ", stringify!(std___cow_string))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1Ev"]
    pub fn std___cow_string___cow_string(this: *mut std___cow_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std___cow_string___cow_string1(this: *mut std___cow_string, arg1: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1EPKcm"]
    pub fn std___cow_string___cow_string2(
        this: *mut std___cow_string,
        arg1: *const ::std::os::raw::c_char,
        arg2: std_size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKS_"]
    pub fn std___cow_string___cow_string3(
        this: *mut std___cow_string,
        arg1: *const std___cow_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1EOS_"]
    pub fn std___cow_string___cow_string4(this: *mut std___cow_string, arg1: *mut std___cow_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringD1Ev"]
    pub fn std___cow_string___cow_string_destructor(this: *mut std___cow_string);
}
impl std___cow_string {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *const ::std::os::raw::c_char, arg2: std_size_t) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string2(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(arg1: *const std___cow_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string3(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(arg1: *mut std___cow_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string4(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std___cow_string___cow_string_destructor(self)
    }
}
pub type std___sso_string = std_basic_string<::std::os::raw::c_char>;
#[repr(C)]
pub struct std_logic_error {
    pub _base: std_exception,
    pub _M_msg: std___cow_string,
}
#[test]
fn bindgen_test_layout_std_logic_error() {
    assert_eq!(
        ::std::mem::size_of::<std_logic_error>(),
        16usize,
        concat!("Size of: ", stringify!(std_logic_error))
    );
    assert_eq!(
        ::std::mem::align_of::<std_logic_error>(),
        8usize,
        concat!("Alignment of ", stringify!(std_logic_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_logic_error>()))._M_msg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_logic_error),
            "::",
            stringify!(_M_msg)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_logic_error_logic_error(this: *mut std_logic_error, __arg: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1EPKc"]
    pub fn std_logic_error_logic_error1(
        this: *mut std_logic_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1ERKS_"]
    pub fn std_logic_error_logic_error2(this: *mut std_logic_error, arg1: *const std_logic_error);
}
impl std_logic_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *const std_logic_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorD1Ev"]
    pub fn std_logic_error_logic_error_destructor(this: *mut std_logic_error);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt11logic_error4whatEv"]
    pub fn std_logic_error_what(this: *mut ::std::os::raw::c_void)
        -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct std_domain_error {
    pub _base: std_logic_error,
}
#[test]
fn bindgen_test_layout_std_domain_error() {
    assert_eq!(
        ::std::mem::size_of::<std_domain_error>(),
        16usize,
        concat!("Size of: ", stringify!(std_domain_error))
    );
    assert_eq!(
        ::std::mem::align_of::<std_domain_error>(),
        8usize,
        concat!("Alignment of ", stringify!(std_domain_error))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_domain_error_domain_error(this: *mut std_domain_error, __arg: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorC1EPKc"]
    pub fn std_domain_error_domain_error1(
        this: *mut std_domain_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_domain_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_domain_error_domain_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_domain_error_domain_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorD1Ev"]
    pub fn std_domain_error_domain_error_destructor(this: *mut std_domain_error);
}
#[repr(C)]
pub struct std_invalid_argument {
    pub _base: std_logic_error,
}
#[test]
fn bindgen_test_layout_std_invalid_argument() {
    assert_eq!(
        ::std::mem::size_of::<std_invalid_argument>(),
        16usize,
        concat!("Size of: ", stringify!(std_invalid_argument))
    );
    assert_eq!(
        ::std::mem::align_of::<std_invalid_argument>(),
        8usize,
        concat!("Alignment of ", stringify!(std_invalid_argument))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_invalid_argument_invalid_argument(
        this: *mut std_invalid_argument,
        __arg: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentC1EPKc"]
    pub fn std_invalid_argument_invalid_argument1(
        this: *mut std_invalid_argument,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_invalid_argument {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_invalid_argument_invalid_argument(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_invalid_argument_invalid_argument1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentD1Ev"]
    pub fn std_invalid_argument_invalid_argument_destructor(this: *mut std_invalid_argument);
}
#[repr(C)]
pub struct std_length_error {
    pub _base: std_logic_error,
}
#[test]
fn bindgen_test_layout_std_length_error() {
    assert_eq!(
        ::std::mem::size_of::<std_length_error>(),
        16usize,
        concat!("Size of: ", stringify!(std_length_error))
    );
    assert_eq!(
        ::std::mem::align_of::<std_length_error>(),
        8usize,
        concat!("Alignment of ", stringify!(std_length_error))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12length_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_length_error_length_error(this: *mut std_length_error, __arg: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12length_errorC1EPKc"]
    pub fn std_length_error_length_error1(
        this: *mut std_length_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_length_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_length_error_length_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_length_error_length_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12length_errorD1Ev"]
    pub fn std_length_error_length_error_destructor(this: *mut std_length_error);
}
#[repr(C)]
pub struct std_out_of_range {
    pub _base: std_logic_error,
}
#[test]
fn bindgen_test_layout_std_out_of_range() {
    assert_eq!(
        ::std::mem::size_of::<std_out_of_range>(),
        16usize,
        concat!("Size of: ", stringify!(std_out_of_range))
    );
    assert_eq!(
        ::std::mem::align_of::<std_out_of_range>(),
        8usize,
        concat!("Alignment of ", stringify!(std_out_of_range))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12out_of_rangeC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_out_of_range_out_of_range(this: *mut std_out_of_range, __arg: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12out_of_rangeC1EPKc"]
    pub fn std_out_of_range_out_of_range1(
        this: *mut std_out_of_range,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_out_of_range {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_out_of_range_out_of_range(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_out_of_range_out_of_range1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12out_of_rangeD1Ev"]
    pub fn std_out_of_range_out_of_range_destructor(this: *mut std_out_of_range);
}
#[repr(C)]
pub struct std_runtime_error {
    pub _base: std_exception,
    pub _M_msg: std___cow_string,
}
#[test]
fn bindgen_test_layout_std_runtime_error() {
    assert_eq!(
        ::std::mem::size_of::<std_runtime_error>(),
        16usize,
        concat!("Size of: ", stringify!(std_runtime_error))
    );
    assert_eq!(
        ::std::mem::align_of::<std_runtime_error>(),
        8usize,
        concat!("Alignment of ", stringify!(std_runtime_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std_runtime_error>()))._M_msg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std_runtime_error),
            "::",
            stringify!(_M_msg)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_runtime_error_runtime_error(this: *mut std_runtime_error, __arg: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1EPKc"]
    pub fn std_runtime_error_runtime_error1(
        this: *mut std_runtime_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKS_"]
    pub fn std_runtime_error_runtime_error2(
        this: *mut std_runtime_error,
        arg1: *const std_runtime_error,
    );
}
impl std_runtime_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *const std_runtime_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorD1Ev"]
    pub fn std_runtime_error_runtime_error_destructor(this: *mut std_runtime_error);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt13runtime_error4whatEv"]
    pub fn std_runtime_error_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct std_range_error {
    pub _base: std_runtime_error,
}
#[test]
fn bindgen_test_layout_std_range_error() {
    assert_eq!(
        ::std::mem::size_of::<std_range_error>(),
        16usize,
        concat!("Size of: ", stringify!(std_range_error))
    );
    assert_eq!(
        ::std::mem::align_of::<std_range_error>(),
        8usize,
        concat!("Alignment of ", stringify!(std_range_error))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt11range_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_range_error_range_error(this: *mut std_range_error, __arg: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNSt11range_errorC1EPKc"]
    pub fn std_range_error_range_error1(
        this: *mut std_range_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_range_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_range_error_range_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_range_error_range_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt11range_errorD1Ev"]
    pub fn std_range_error_range_error_destructor(this: *mut std_range_error);
}
#[repr(C)]
pub struct std_overflow_error {
    pub _base: std_runtime_error,
}
#[test]
fn bindgen_test_layout_std_overflow_error() {
    assert_eq!(
        ::std::mem::size_of::<std_overflow_error>(),
        16usize,
        concat!("Size of: ", stringify!(std_overflow_error))
    );
    assert_eq!(
        ::std::mem::align_of::<std_overflow_error>(),
        8usize,
        concat!("Alignment of ", stringify!(std_overflow_error))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt14overflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_overflow_error_overflow_error(
        this: *mut std_overflow_error,
        __arg: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt14overflow_errorC1EPKc"]
    pub fn std_overflow_error_overflow_error1(
        this: *mut std_overflow_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_overflow_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_overflow_error_overflow_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_overflow_error_overflow_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt14overflow_errorD1Ev"]
    pub fn std_overflow_error_overflow_error_destructor(this: *mut std_overflow_error);
}
#[repr(C)]
pub struct std_underflow_error {
    pub _base: std_runtime_error,
}
#[test]
fn bindgen_test_layout_std_underflow_error() {
    assert_eq!(
        ::std::mem::size_of::<std_underflow_error>(),
        16usize,
        concat!("Size of: ", stringify!(std_underflow_error))
    );
    assert_eq!(
        ::std::mem::align_of::<std_underflow_error>(),
        8usize,
        concat!("Alignment of ", stringify!(std_underflow_error))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt15underflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_underflow_error_underflow_error(
        this: *mut std_underflow_error,
        __arg: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt15underflow_errorC1EPKc"]
    pub fn std_underflow_error_underflow_error1(
        this: *mut std_underflow_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_underflow_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_underflow_error_underflow_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_underflow_error_underflow_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt15underflow_errorD1Ev"]
    pub fn std_underflow_error_underflow_error_destructor(this: *mut std_underflow_error);
}
pub type std___array_traits__Type<_Tp> = *mut _Tp;
pub type std___array_traits__Is_swappable = std___is_swappable;
pub type std___array_traits__Is_nothrow_swappable = std___is_nothrow_swappable;
pub type std_array_value_type<_Tp> = _Tp;
pub type std_array_pointer<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_pointer<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_reference<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_reference<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_iterator<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_iterator<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_size_type = std_size_t;
pub type std_array_difference_type = isize;
pub type std_array_reverse_iterator<_Tp> = std_reverse_iterator<std_array_iterator<_Tp>>;
pub type std_array_const_reverse_iterator<_Tp> =
    std_reverse_iterator<std_array_const_iterator<_Tp>>;
pub type std_array__AT_Type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_empty_non_tuple {
    pub _address: u8,
}
pub type std___empty_not_final = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple {
    pub _address: u8,
}
pub type std_tuple__Inherited = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__TC2 {
    pub _address: u8,
}
pub type std_tuple__TCC = u8;
pub type std_tuple__TMC = u8;
pub type std_tuple__TMCT = u8;
pub type std_tuple__TNTC = u8;
#[test]
fn __bindgen_test_layout_std_tuple_open0_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_tuple>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_tuple))
    );
    assert_eq!(
        ::std::mem::align_of::<std_tuple>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_tuple)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_make_tuple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_tuple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___combine_tuples {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std___combine_tuples_open0_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___combine_tuples>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___combine_tuples)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___combine_tuples>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___combine_tuples)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_cat_result {
    pub _address: u8,
}
pub type std___tuple_cat_result___type = std___combine_tuples;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_1st_indices {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std___make_1st_indices_open0_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___make_1st_indices>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___make_1st_indices)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___make_1st_indices>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___make_1st_indices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_concater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Swallow_assign {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std__Swallow_assign() {
    assert_eq!(
        ::std::mem::size_of::<std__Swallow_assign>(),
        1usize,
        concat!("Size of: ", stringify!(std__Swallow_assign))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Swallow_assign>(),
        1usize,
        concat!("Alignment of ", stringify!(std__Swallow_assign))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZStL6ignore"]
    pub static std_ignore: std__Swallow_assign;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_delete {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uniq_ptr_impl {
    pub _M_t: std_tuple,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uniq_ptr_impl__Ptr {
    pub _address: u8,
}
pub type std___uniq_ptr_impl__Ptr_type<_Up> = *mut _Up;
pub type std___uniq_ptr_impl__DeleterConstraint = u8;
pub type std___uniq_ptr_impl_pointer = std___uniq_ptr_impl__Ptr;
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_ptr {
    pub _M_t: std___uniq_ptr_impl,
}
pub type std_unique_ptr__DeleterConstraint = std___uniq_ptr_impl;
pub type std_unique_ptr_pointer = std___uniq_ptr_impl;
pub type std_unique_ptr_element_type<_Tp> = _Tp;
pub type std_unique_ptr_deleter_type<_Dp> = _Dp;
pub type std_unique_ptr___safe_conversion_up = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__MakeUniq {
    pub _address: u8,
}
pub type std__MakeUniq___single_object = std_unique_ptr;
#[repr(C)]
#[derive(Debug)]
pub struct std___allocated_ptr<_Alloc> {
    pub _M_alloc: *mut _Alloc,
    pub _M_ptr: std___allocated_ptr_pointer,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
pub type std___allocated_ptr_pointer = std_allocator_traits;
pub type std___allocated_ptr_value_type = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Maybe_get_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_result_type_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Refwrap_base_arg1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Refwrap_base_arg2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Reference_wrapper_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reference_wrapper<_Tp> {
    pub _M_data: *mut _Tp,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
pub type std_reference_wrapper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_weak_ptr {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout_std_bad_weak_ptr() {
    assert_eq!(
        ::std::mem::size_of::<std_bad_weak_ptr>(),
        8usize,
        concat!("Size of: ", stringify!(std_bad_weak_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bad_weak_ptr>(),
        8usize,
        concat!("Alignment of ", stringify!(std_bad_weak_ptr))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt12bad_weak_ptr4whatEv"]
    pub fn std_bad_weak_ptr_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12bad_weak_ptrD1Ev"]
    pub fn std_bad_weak_ptr_bad_weak_ptr_destructor(this: *mut std_bad_weak_ptr);
}
pub const std__Mutex_base__S_need_barriers: i32 = 0;
pub type std__Mutex_base__bindgen_ty_1 = i32;
extern "C" {
    #[link_name = "\u{1}_M_add_ref_lock"]
    pub fn std__Sp_counted_base__M_add_ref_lock(this: *mut u8);
}
extern "C" {
    #[link_name = "\u{1}_M_add_ref_lock_nothrow"]
    pub fn std__Sp_counted_base__M_add_ref_lock_nothrow(this: *mut u8) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_owner_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_counted_deleter__Impl<_Ptr> {
    pub _M_ptr: _Ptr,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ptr>>,
}
pub type std__Sp_counted_deleter__Impl__Del_base = u8;
pub type std__Sp_counted_deleter__Impl__Alloc_base = u8;
pub type std__Sp_counted_deleter___allocator_type = std___alloc_rebind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_make_shared_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std__Sp_make_shared_tag() {
    assert_eq!(
        ::std::mem::size_of::<std__Sp_make_shared_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std__Sp_make_shared_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Sp_make_shared_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std__Sp_make_shared_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_counted_ptr_inplace__Impl {
    pub _M_storage: __gnu_cxx___aligned_buffer,
}
pub type std__Sp_counted_ptr_inplace__Impl__A_base = u8;
pub type std__Sp_counted_ptr_inplace___allocator_type = std___alloc_rebind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_array_delete {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___sp_array_delete() {
    assert_eq!(
        ::std::mem::size_of::<std___sp_array_delete>(),
        1usize,
        concat!("Size of: ", stringify!(std___sp_array_delete))
    );
    assert_eq!(
        ::std::mem::align_of::<std___sp_array_delete>(),
        1usize,
        concat!("Alignment of ", stringify!(std___sp_array_delete))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_compatible_with {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_is_constructible_arr {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_is_constructible {
    pub _address: u8,
}
pub type std___shared_ptr_access_element_type<_Tp> = _Tp;
pub type std___shared_ptr_element_type = std_remove_extent;
pub type std___shared_ptr__SafeConv = u8;
pub type std___shared_ptr__Compatible = u8;
pub type std___shared_ptr__Assignable = std___shared_ptr__Compatible;
pub type std___shared_ptr__UniqCompatible = u8;
pub type std___shared_ptr__UniqAssignable = std___shared_ptr__UniqCompatible;
pub type std___shared_ptr___esft_base_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shared_ptr___has_esft_base {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_less {
    pub _address: u8,
}
pub type std___weak_ptr__Compatible = u8;
pub type std___weak_ptr__Assignable = std___weak_ptr__Compatible;
pub type std___weak_ptr_element_type = std_remove_extent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_owner_less {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std__Sp_owner_less_open0_void_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std__Sp_owner_less>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std__Sp_owner_less)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std__Sp_owner_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std__Sp_owner_less)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std_shared_ptr {
    pub _address: u8,
}
pub type std_shared_ptr__Constructible = u8;
pub type std_shared_ptr__Assignable = u8;
pub type std_shared_ptr_element_type = u8;
#[repr(C)]
#[derive(Debug)]
pub struct std_weak_ptr {
    pub _address: u8,
}
pub type std_weak_ptr__Constructible = u8;
pub type std_weak_ptr__Assignable = u8;
#[test]
fn __bindgen_test_layout_std_owner_less_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_owner_less>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_owner_less)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_owner_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_owner_less)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std_enable_shared_from_this {
    pub _M_weak_this: std_weak_ptr,
}
pub const std_memory_order_memory_order_relaxed: std_memory_order = 0;
pub const std_memory_order_memory_order_consume: std_memory_order = 1;
pub const std_memory_order_memory_order_acquire: std_memory_order = 2;
pub const std_memory_order_memory_order_release: std_memory_order = 3;
pub const std_memory_order_memory_order_acq_rel: std_memory_order = 4;
pub const std_memory_order_memory_order_seq_cst: std_memory_order = 5;
pub type std_memory_order = ::std::os::raw::c_uint;
pub const std___memory_order_modifier___memory_order_mask: std___memory_order_modifier = 65535;
pub const std___memory_order_modifier___memory_order_modifier_mask: std___memory_order_modifier =
    4294901760;
pub const std___memory_order_modifier___memory_order_hle_acquire: std___memory_order_modifier =
    65536;
pub const std___memory_order_modifier___memory_order_hle_release: std___memory_order_modifier =
    131072;
pub type std___memory_order_modifier = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_atomic {
    pub _address: u8,
}
pub type std___atomic_flag_data_type = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___atomic_flag_base {
    pub _M_i: std___atomic_flag_data_type,
}
#[test]
fn bindgen_test_layout_std___atomic_flag_base() {
    assert_eq!(
        ::std::mem::size_of::<std___atomic_flag_base>(),
        1usize,
        concat!("Size of: ", stringify!(std___atomic_flag_base))
    );
    assert_eq!(
        ::std::mem::align_of::<std___atomic_flag_base>(),
        1usize,
        concat!("Alignment of ", stringify!(std___atomic_flag_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std___atomic_flag_base>()))._M_i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std___atomic_flag_base),
            "::",
            stringify!(_M_i)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std_atomic_flag {
    pub _base: std___atomic_flag_base,
}
#[test]
fn bindgen_test_layout_std_atomic_flag() {
    assert_eq!(
        ::std::mem::size_of::<std_atomic_flag>(),
        1usize,
        concat!("Size of: ", stringify!(std_atomic_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_atomic_flag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_atomic_flag))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std___atomic_base<_ITp> {
    pub _M_i: std___atomic_base___int_type<_ITp>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_ITp>>,
}
pub type std___atomic_base___int_type<_ITp> = _ITp;
#[repr(C)]
#[derive(Debug)]
pub struct std__Sp_locker {
    pub _M_key1: ::std::os::raw::c_uchar,
    pub _M_key2: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_std__Sp_locker() {
    assert_eq!(
        ::std::mem::size_of::<std__Sp_locker>(),
        2usize,
        concat!("Size of: ", stringify!(std__Sp_locker))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Sp_locker>(),
        1usize,
        concat!("Alignment of ", stringify!(std__Sp_locker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std__Sp_locker>()))._M_key1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Sp_locker),
            "::",
            stringify!(_M_key1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std__Sp_locker>()))._M_key2 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Sp_locker),
            "::",
            stringify!(_M_key2)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt10_Sp_lockerC1EPKv"]
    pub fn std__Sp_locker__Sp_locker(
        this: *mut std__Sp_locker,
        arg1: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt10_Sp_lockerC1EPKvS1_"]
    pub fn std__Sp_locker__Sp_locker1(
        this: *mut std__Sp_locker,
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt10_Sp_lockerD1Ev"]
    pub fn std__Sp_locker__Sp_locker_destructor(this: *mut std__Sp_locker);
}
impl std__Sp_locker {
    #[inline]
    pub unsafe fn new(arg1: *const ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std__Sp_locker__Sp_locker(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std__Sp_locker__Sp_locker1(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std__Sp_locker__Sp_locker_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_auto_ptr_ref<_Tp1> {
    pub _M_ptr: *mut _Tp1,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp1>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_auto_ptr<_Tp> {
    pub _M_ptr: *mut _Tp,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
pub type std_auto_ptr_element_type<_Tp> = _Tp;
#[test]
fn __bindgen_test_layout_std_auto_ptr_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_auto_ptr<::std::os::raw::c_void>>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_auto_ptr<::std::os::raw::c_void>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_auto_ptr<::std::os::raw::c_void>>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_auto_ptr<::std::os::raw::c_void>)
        )
    );
}
pub const std_pointer_safety_relaxed: std_pointer_safety = 0;
pub const std_pointer_safety_preferred: std_pointer_safety = 1;
pub const std_pointer_safety_strict: std_pointer_safety = 2;
pub type std_pointer_safety = ::std::os::raw::c_int;
pub const std_float_round_style_round_indeterminate: std_float_round_style = -1;
pub const std_float_round_style_round_toward_zero: std_float_round_style = 0;
pub const std_float_round_style_round_to_nearest: std_float_round_style = 1;
pub const std_float_round_style_round_toward_infinity: std_float_round_style = 2;
pub const std_float_round_style_round_toward_neg_infinity: std_float_round_style = 3;
pub type std_float_round_style = ::std::os::raw::c_int;
pub const std_float_denorm_style_denorm_indeterminate: std_float_denorm_style = -1;
pub const std_float_denorm_style_denorm_absent: std_float_denorm_style = 0;
pub const std_float_denorm_style_denorm_present: std_float_denorm_style = 1;
pub type std_float_denorm_style = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___numeric_limits_base {
    pub _address: u8,
}
pub const std___numeric_limits_base_is_specialized: bool = false;
pub const std___numeric_limits_base_digits: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_digits10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_max_digits10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_is_signed: bool = false;
pub const std___numeric_limits_base_is_integer: bool = false;
pub const std___numeric_limits_base_is_exact: bool = false;
pub const std___numeric_limits_base_radix: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_min_exponent: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_min_exponent10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_max_exponent: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_max_exponent10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_has_infinity: bool = false;
pub const std___numeric_limits_base_has_quiet_NaN: bool = false;
pub const std___numeric_limits_base_has_signaling_NaN: bool = false;
extern "C" {
    #[link_name = "\u{1}_ZNSt21__numeric_limits_base10has_denormE"]
    pub static std___numeric_limits_base_has_denorm: std_float_denorm_style;
}
pub const std___numeric_limits_base_has_denorm_loss: bool = false;
pub const std___numeric_limits_base_is_iec559: bool = false;
pub const std___numeric_limits_base_is_bounded: bool = false;
pub const std___numeric_limits_base_is_modulo: bool = false;
pub const std___numeric_limits_base_traps: bool = false;
pub const std___numeric_limits_base_tinyness_before: bool = false;
extern "C" {
    #[link_name = "\u{1}_ZNSt21__numeric_limits_base11round_styleE"]
    pub static std___numeric_limits_base_round_style: std_float_round_style;
}
#[test]
fn bindgen_test_layout_std___numeric_limits_base() {
    assert_eq!(
        ::std::mem::size_of::<std___numeric_limits_base>(),
        1usize,
        concat!("Size of: ", stringify!(std___numeric_limits_base))
    );
    assert_eq!(
        ::std::mem::align_of::<std___numeric_limits_base>(),
        1usize,
        concat!("Alignment of ", stringify!(std___numeric_limits_base))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numeric_limits {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_char16_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_char32_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_unsigned_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_unsigned___int128_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_numeric_limits_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_numeric_limits)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Vector_base {
    pub _M_impl: std__Vector_base__Vector_impl,
}
pub type std__Vector_base__Tp_alloc_type = __gnu_cxx___alloc_traits;
pub type std__Vector_base_pointer = __gnu_cxx___alloc_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Vector_base__Vector_impl {
    pub _M_start: std__Vector_base_pointer,
    pub _M_finish: std__Vector_base_pointer,
    pub _M_end_of_storage: std__Vector_base_pointer,
}
pub type std__Vector_base_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug)]
pub struct std_vector {
    pub _base: std__Vector_base,
}
pub type std_vector__Base = std__Vector_base;
pub type std_vector__Tp_alloc_type = std_vector__Base;
pub type std_vector__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_vector_value_type<_Tp> = _Tp;
pub type std_vector_pointer = std_vector__Base;
pub type std_vector_const_pointer = std_vector__Alloc_traits;
pub type std_vector_reference = std_vector__Alloc_traits;
pub type std_vector_const_reference = std_vector__Alloc_traits;
pub type std_vector_iterator = __gnu_cxx___normal_iterator<std_vector_pointer>;
pub type std_vector_const_iterator = __gnu_cxx___normal_iterator<std_vector_const_pointer>;
pub type std_vector_const_reverse_iterator = std_reverse_iterator<std_vector_const_iterator>;
pub type std_vector_reverse_iterator = std_reverse_iterator<std_vector_iterator>;
pub type std_vector_size_type = std_size_t;
pub type std_vector_difference_type = isize;
pub type std_vector_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug)]
pub struct std_vector__Temporary_value {
    pub _M_this: *mut std_vector,
    pub __buf: u8,
}
pub type std__Bit_type = ::std::os::raw::c_ulong;
pub const _S_word_bit: ::std::os::raw::c_uint = 64;
pub type std__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_reference {
    pub _M_p: *mut std__Bit_type,
    pub _M_mask: std__Bit_type,
}
#[test]
fn bindgen_test_layout_std__Bit_reference() {
    assert_eq!(
        ::std::mem::size_of::<std__Bit_reference>(),
        16usize,
        concat!("Size of: ", stringify!(std__Bit_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Bit_reference>(),
        8usize,
        concat!("Alignment of ", stringify!(std__Bit_reference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std__Bit_reference>()))._M_p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Bit_reference),
            "::",
            stringify!(_M_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std__Bit_reference>()))._M_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Bit_reference),
            "::",
            stringify!(_M_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_iterator_base {
    pub _M_p: *mut std__Bit_type,
    pub _M_offset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_std__Bit_iterator_base() {
    assert_eq!(
        ::std::mem::size_of::<std__Bit_iterator_base>(),
        16usize,
        concat!("Size of: ", stringify!(std__Bit_iterator_base))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Bit_iterator_base>(),
        8usize,
        concat!("Alignment of ", stringify!(std__Bit_iterator_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std__Bit_iterator_base>()))._M_p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Bit_iterator_base),
            "::",
            stringify!(_M_p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<std__Bit_iterator_base>()))._M_offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Bit_iterator_base),
            "::",
            stringify!(_M_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_iterator {
    pub _base: std__Bit_iterator_base,
}
pub type std__Bit_iterator_reference = std__Bit_reference;
pub type std__Bit_iterator_pointer = *mut std__Bit_reference;
pub type std__Bit_iterator_iterator = std__Bit_iterator;
#[test]
fn bindgen_test_layout_std__Bit_iterator() {
    assert_eq!(
        ::std::mem::size_of::<std__Bit_iterator>(),
        16usize,
        concat!("Size of: ", stringify!(std__Bit_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Bit_iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(std__Bit_iterator))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_const_iterator {
    pub _base: std__Bit_iterator_base,
}
pub type std__Bit_const_iterator_reference = bool;
pub type std__Bit_const_iterator_const_reference = bool;
pub type std__Bit_const_iterator_pointer = *const bool;
pub type std__Bit_const_iterator_const_iterator = std__Bit_const_iterator;
#[test]
fn bindgen_test_layout_std__Bit_const_iterator() {
    assert_eq!(
        ::std::mem::size_of::<std__Bit_const_iterator>(),
        16usize,
        concat!("Size of: ", stringify!(std__Bit_const_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Bit_const_iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(std__Bit_const_iterator))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Bvector_base {
    pub _M_impl: std__Bvector_base__Bvector_impl,
}
pub type std__Bvector_base__Bit_alloc_type = __gnu_cxx___alloc_traits;
pub type std__Bvector_base__Bit_alloc_traits = __gnu_cxx___alloc_traits;
pub type std__Bvector_base__Bit_pointer = std__Bvector_base__Bit_alloc_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bvector_base__Bvector_impl {
    pub _M_start: std__Bit_iterator,
    pub _M_finish: std__Bit_iterator,
    pub _M_end_of_storage: std__Bvector_base__Bit_pointer,
}
pub type std__Bvector_base_allocator_type<_Alloc> = _Alloc;
pub const std__Rb_tree_color__S_red: std__Rb_tree_color = 0;
pub const std__Rb_tree_color__S_black: std__Rb_tree_color = 1;
pub type std__Rb_tree_color = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_node_base {
    pub _M_color: std__Rb_tree_color,
    pub _M_parent: std__Rb_tree_node_base__Base_ptr,
    pub _M_left: std__Rb_tree_node_base__Base_ptr,
    pub _M_right: std__Rb_tree_node_base__Base_ptr,
}
pub type std__Rb_tree_node_base__Base_ptr = *mut std__Rb_tree_node_base;
pub type std__Rb_tree_node_base__Const_Base_ptr = *const std__Rb_tree_node_base;
#[test]
fn bindgen_test_layout_std__Rb_tree_node_base() {
    assert_eq!(
        ::std::mem::size_of::<std__Rb_tree_node_base>(),
        32usize,
        concat!("Size of: ", stringify!(std__Rb_tree_node_base))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Rb_tree_node_base>(),
        8usize,
        concat!("Alignment of ", stringify!(std__Rb_tree_node_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std__Rb_tree_node_base>()))._M_color as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Rb_tree_node_base),
            "::",
            stringify!(_M_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<std__Rb_tree_node_base>()))._M_parent as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Rb_tree_node_base),
            "::",
            stringify!(_M_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std__Rb_tree_node_base>()))._M_left as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Rb_tree_node_base),
            "::",
            stringify!(_M_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std__Rb_tree_node_base>()))._M_right as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Rb_tree_node_base),
            "::",
            stringify!(_M_right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_key_compare<_Key_compare> {
    pub _M_key_compare: _Key_compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Key_compare>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_header {
    pub _M_header: std__Rb_tree_node_base,
    pub _M_node_count: std_size_t,
}
#[test]
fn bindgen_test_layout_std__Rb_tree_header() {
    assert_eq!(
        ::std::mem::size_of::<std__Rb_tree_header>(),
        40usize,
        concat!("Size of: ", stringify!(std__Rb_tree_header))
    );
    assert_eq!(
        ::std::mem::align_of::<std__Rb_tree_header>(),
        8usize,
        concat!("Alignment of ", stringify!(std__Rb_tree_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<std__Rb_tree_header>()))._M_header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Rb_tree_header),
            "::",
            stringify!(_M_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<std__Rb_tree_header>()))._M_node_count as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(std__Rb_tree_header),
            "::",
            stringify!(_M_node_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_node {
    pub _base: std__Rb_tree_node_base,
    pub _M_storage: __gnu_cxx___aligned_membuf,
}
pub type std__Rb_tree_node__Link_type = *mut std__Rb_tree_node;
extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_increment(__x: *mut std__Rb_tree_node_base) -> *mut std__Rb_tree_node_base;
}
extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_increment1(
        __x: *const std__Rb_tree_node_base,
    ) -> *const std__Rb_tree_node_base;
}
extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_decrement(__x: *mut std__Rb_tree_node_base) -> *mut std__Rb_tree_node_base;
}
extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_decrement1(
        __x: *const std__Rb_tree_node_base,
    ) -> *const std__Rb_tree_node_base;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_iterator {
    pub _M_node: std__Rb_tree_iterator__Base_ptr,
}
pub type std__Rb_tree_iterator_value_type<_Tp> = _Tp;
pub type std__Rb_tree_iterator_reference<_Tp> = *mut _Tp;
pub type std__Rb_tree_iterator_pointer<_Tp> = *mut _Tp;
pub type std__Rb_tree_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__Rb_tree_iterator_difference_type = isize;
pub type std__Rb_tree_iterator__Self = std__Rb_tree_iterator;
pub type std__Rb_tree_iterator__Base_ptr = std__Rb_tree_node_base__Base_ptr;
pub type std__Rb_tree_iterator__Link_type = *mut std__Rb_tree_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_const_iterator {
    pub _M_node: std__Rb_tree_const_iterator__Base_ptr,
}
pub type std__Rb_tree_const_iterator_value_type<_Tp> = _Tp;
pub type std__Rb_tree_const_iterator_reference<_Tp> = *const _Tp;
pub type std__Rb_tree_const_iterator_pointer<_Tp> = *const _Tp;
pub type std__Rb_tree_const_iterator_iterator = std__Rb_tree_iterator;
pub type std__Rb_tree_const_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__Rb_tree_const_iterator_difference_type = isize;
pub type std__Rb_tree_const_iterator__Self = std__Rb_tree_const_iterator;
pub type std__Rb_tree_const_iterator__Base_ptr = std__Rb_tree_node_base__Const_Base_ptr;
pub type std__Rb_tree_const_iterator__Link_type = *const std__Rb_tree_node;
extern "C" {
    #[link_name = "\u{1}_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_"]
    pub fn std__Rb_tree_insert_and_rebalance(
        __insert_left: bool,
        __x: *mut std__Rb_tree_node_base,
        __p: *mut std__Rb_tree_node_base,
        __header: *mut std__Rb_tree_node_base,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_"]
    pub fn std__Rb_tree_rebalance_for_erase(
        __z: *mut std__Rb_tree_node_base,
        __header: *mut std__Rb_tree_node_base,
    ) -> *mut std__Rb_tree_node_base;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_is_transparent {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Rb_tree {
    pub _M_impl: u8,
}
pub type std__Rb_tree__Node_allocator = __gnu_cxx___alloc_traits;
pub type std__Rb_tree__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std__Rb_tree__Base_ptr = *mut std__Rb_tree_node_base;
pub type std__Rb_tree__Const_Base_ptr = *const std__Rb_tree_node_base;
pub type std__Rb_tree__Link_type = *mut std__Rb_tree_node;
pub type std__Rb_tree__Const_Link_type = *const std__Rb_tree_node;
#[repr(C)]
#[derive(Debug)]
pub struct std__Rb_tree__Reuse_or_alloc_node {
    pub _M_root: std__Rb_tree__Base_ptr,
    pub _M_nodes: std__Rb_tree__Base_ptr,
    pub _M_t: *mut std__Rb_tree,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree__Alloc_node {
    pub _M_t: *mut std__Rb_tree,
}
pub type std__Rb_tree_key_type<_Key> = _Key;
pub type std__Rb_tree_value_type<_Val> = _Val;
pub type std__Rb_tree_pointer<_Val> = *mut std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_const_pointer<_Val> = *const std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_reference<_Val> = *mut std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_const_reference<_Val> = *const std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_size_type = std_size_t;
pub type std__Rb_tree_difference_type = isize;
pub type std__Rb_tree_allocator_type<_Alloc> = _Alloc;
pub type std__Rb_tree_reverse_iterator = std_reverse_iterator<std__Rb_tree_iterator>;
pub type std__Rb_tree_const_reverse_iterator = std_reverse_iterator<std__Rb_tree_const_iterator>;
pub type std__Rb_tree__Rb_tree_impl__Base_key_compare<_Key_compare> =
    std__Rb_tree_key_compare<_Key_compare>;
extern "C" {
    #[link_name = "\u{1}_ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_"]
    pub fn std__Rb_tree_black_count(
        __node: *const std__Rb_tree_node_base,
        __root: *const std__Rb_tree_node_base,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_map {
    pub _M_t: std_map__Rep_type,
}
pub type std_map_key_type<_Key> = _Key;
pub type std_map_mapped_type<_Tp> = _Tp;
pub type std_map_value_type<_Key, _Tp> = std_pair<_Key, _Tp>;
pub type std_map_key_compare<_Compare> = _Compare;
pub type std_map_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_map_value_compare<_Compare> {
    pub comp: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
pub type std_map__Pair_alloc_type = __gnu_cxx___alloc_traits;
pub type std_map__Rep_type = std__Rb_tree;
pub type std_map__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_map_pointer = std_map__Alloc_traits;
pub type std_map_const_pointer = std_map__Alloc_traits;
pub type std_map_reference = std_map__Alloc_traits;
pub type std_map_const_reference = std_map__Alloc_traits;
pub type std_map_iterator = std_map__Rep_type;
pub type std_map_const_iterator = std_map__Rep_type;
pub type std_map_size_type = std_map__Rep_type;
pub type std_map_difference_type = std_map__Rep_type;
pub type std_map_reverse_iterator = std_map__Rep_type;
pub type std_map_const_reverse_iterator = std_map__Rep_type;
#[repr(C)]
#[derive(Debug)]
pub struct std_multimap {
    pub _M_t: std_multimap__Rep_type,
}
pub type std_multimap_key_type<_Key> = _Key;
pub type std_multimap_mapped_type<_Tp> = _Tp;
pub type std_multimap_value_type<_Key, _Tp> = std_pair<_Key, _Tp>;
pub type std_multimap_key_compare<_Compare> = _Compare;
pub type std_multimap_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multimap_value_compare<_Compare> {
    pub comp: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
pub type std_multimap__Pair_alloc_type = __gnu_cxx___alloc_traits;
pub type std_multimap__Rep_type = std__Rb_tree;
pub type std_multimap__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_multimap_pointer = std_multimap__Alloc_traits;
pub type std_multimap_const_pointer = std_multimap__Alloc_traits;
pub type std_multimap_reference = std_multimap__Alloc_traits;
pub type std_multimap_const_reference = std_multimap__Alloc_traits;
pub type std_multimap_iterator = std_multimap__Rep_type;
pub type std_multimap_const_iterator = std_multimap__Rep_type;
pub type std_multimap_size_type = std_multimap__Rep_type;
pub type std_multimap_difference_type = std_multimap__Rep_type;
pub type std_multimap_reverse_iterator = std_multimap__Rep_type;
pub type std_multimap_const_reverse_iterator = std_multimap__Rep_type;
#[test]
fn __bindgen_test_layout_std_allocator_open0_void_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char16_t_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char32_t_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
pub type __gnu_cxx___conditional_type___type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___add_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___add_unsigned___if_type = u8;
pub type __gnu_cxx___add_unsigned___type = __gnu_cxx___add_unsigned___if_type;
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___remove_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___remove_unsigned___if_type = u8;
pub type __gnu_cxx___remove_unsigned___type = __gnu_cxx___remove_unsigned___if_type;
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_unsigned_long_long_close0_instantiation()
{
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
pub type __gnu_cxx___promote___type = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_2 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_2___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_3 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_3___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_4 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_4___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits_integer {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}__min"]
    pub static __gnu_cxx___min: _Value;
}
extern "C" {
    #[link_name = "\u{1}__max"]
    pub static __gnu_cxx___max: _Value;
}
extern "C" {
    #[link_name = "\u{1}__is_signed"]
    pub static __gnu_cxx___is_signed: bool;
}
extern "C" {
    #[link_name = "\u{1}__digits"]
    pub static __gnu_cxx___digits: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits_floating {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}__max_digits10"]
    pub static __gnu_cxx___max_digits10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__digits10"]
    pub static __gnu_cxx___digits10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__max_exponent10"]
    pub static __gnu_cxx___max_exponent10: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___normal_iterator<_Iterator> {
    pub _M_current: _Iterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type __gnu_cxx___normal_iterator___traits_type = std_iterator_traits;
pub type __gnu_cxx___normal_iterator_iterator_type<_Iterator> = _Iterator;
pub type __gnu_cxx___normal_iterator_iterator_category = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_value_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_difference_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_reference = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_pointer = __gnu_cxx___normal_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_less_iter {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout___gnu_cxx___ops__Iter_less_iter() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___ops__Iter_less_iter>(),
        1usize,
        concat!("Size of: ", stringify!(__gnu_cxx___ops__Iter_less_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___ops__Iter_less_iter>(),
        1usize,
        concat!("Alignment of ", stringify!(__gnu_cxx___ops__Iter_less_iter))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_less_val {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout___gnu_cxx___ops__Iter_less_val() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___ops__Iter_less_val>(),
        1usize,
        concat!("Size of: ", stringify!(__gnu_cxx___ops__Iter_less_val))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___ops__Iter_less_val>(),
        1usize,
        concat!("Alignment of ", stringify!(__gnu_cxx___ops__Iter_less_val))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Val_less_iter {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout___gnu_cxx___ops__Val_less_iter() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___ops__Val_less_iter>(),
        1usize,
        concat!("Size of: ", stringify!(__gnu_cxx___ops__Val_less_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___ops__Val_less_iter>(),
        1usize,
        concat!("Alignment of ", stringify!(__gnu_cxx___ops__Val_less_iter))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equal_to_iter {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout___gnu_cxx___ops__Iter_equal_to_iter() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___ops__Iter_equal_to_iter>(),
        1usize,
        concat!("Size of: ", stringify!(__gnu_cxx___ops__Iter_equal_to_iter))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___ops__Iter_equal_to_iter>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(__gnu_cxx___ops__Iter_equal_to_iter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equal_to_val {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout___gnu_cxx___ops__Iter_equal_to_val() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___ops__Iter_equal_to_val>(),
        1usize,
        concat!("Size of: ", stringify!(__gnu_cxx___ops__Iter_equal_to_val))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___ops__Iter_equal_to_val>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(__gnu_cxx___ops__Iter_equal_to_val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_iter<_Compare> {
    pub _M_comp: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_val<_Compare> {
    pub _M_comp: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Val_comp_iter<_Compare> {
    pub _M_comp: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equals_val<_Value> {
    pub _M_value: *mut _Value,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equals_iter<_Iterator1> {
    pub _M_it1: _Iterator1,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_pred<_Predicate> {
    pub _M_pred: _Predicate,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_to_val<_Compare, _Value> {
    pub _M_comp: _Compare,
    pub _M_value: *mut _Value,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_to_iter<_Compare, _Iterator1> {
    pub _M_comp: _Compare,
    pub _M_it1: _Iterator1,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_negate<_Predicate> {
    pub _M_pred: _Predicate,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx__Char_types {
    pub _address: u8,
}
pub type __gnu_cxx__Char_types_int_type = ::std::os::raw::c_ulong;
pub type __gnu_cxx__Char_types_pos_type = std_streampos;
pub type __gnu_cxx__Char_types_off_type = std_streamoff;
pub type __gnu_cxx__Char_types_state_type = mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_char_traits {
    pub _address: u8,
}
pub type __gnu_cxx_char_traits_char_type<_CharT> = _CharT;
pub type __gnu_cxx_char_traits_int_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_pos_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_off_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_state_type = __gnu_cxx__Char_types;
extern "C" {
    #[link_name = "\u{1}_ZN9__gnu_cxx27__verbose_terminate_handlerEv"]
    pub fn __gnu_cxx___verbose_terminate_handler();
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx_new_allocator {
    pub _address: u8,
}
pub type __gnu_cxx_new_allocator_size_type = std_size_t;
pub type __gnu_cxx_new_allocator_difference_type = isize;
pub type __gnu_cxx_new_allocator_pointer<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_const_pointer<_Tp> = *const _Tp;
pub type __gnu_cxx_new_allocator_reference<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_const_reference<_Tp> = *const _Tp;
pub type __gnu_cxx_new_allocator_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_new_allocator_rebind {
    pub _address: u8,
}
pub type __gnu_cxx_new_allocator_rebind_other = __gnu_cxx_new_allocator;
pub type __gnu_cxx_new_allocator_propagate_on_container_move_assignment = std_true_type;
extern "C" {
    #[link_name = "\u{1}__uselocale"]
    pub fn __gnu_cxx___uselocale(arg1: locale_t) -> locale_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_allocator_type<_Alloc> = _Alloc;
pub type __gnu_cxx___alloc_traits__Base_type = std_allocator_traits;
pub type __gnu_cxx___alloc_traits_value_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_const_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_size_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_difference_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_reference = *mut __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits_const_reference = *const __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits___is_custom_pointer = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits_rebind {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_rebind_other = __gnu_cxx___alloc_traits__Base_type;
pub const __gnu_cxx__Lock_policy__S_single: __gnu_cxx__Lock_policy = 0;
pub const __gnu_cxx__Lock_policy__S_mutex: __gnu_cxx__Lock_policy = 1;
pub const __gnu_cxx__Lock_policy__S_atomic: __gnu_cxx__Lock_policy = 2;
pub type __gnu_cxx__Lock_policy = ::std::os::raw::c_uint;
extern "C" {
    #[link_name = "\u{1}_ZN9__gnu_cxxL21__default_lock_policyE"]
    pub static __gnu_cxx___default_lock_policy: __gnu_cxx__Lock_policy;
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_lock_error {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout___gnu_cxx___concurrence_lock_error() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___concurrence_lock_error>(),
        8usize,
        concat!("Size of: ", stringify!(__gnu_cxx___concurrence_lock_error))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___concurrence_lock_error>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__gnu_cxx___concurrence_lock_error)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_unlock_error {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout___gnu_cxx___concurrence_unlock_error() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___concurrence_unlock_error>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__gnu_cxx___concurrence_unlock_error)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___concurrence_unlock_error>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__gnu_cxx___concurrence_unlock_error)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_broadcast_error {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout___gnu_cxx___concurrence_broadcast_error() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___concurrence_broadcast_error>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__gnu_cxx___concurrence_broadcast_error)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___concurrence_broadcast_error>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__gnu_cxx___concurrence_broadcast_error)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_wait_error {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout___gnu_cxx___concurrence_wait_error() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___concurrence_wait_error>(),
        8usize,
        concat!("Size of: ", stringify!(__gnu_cxx___concurrence_wait_error))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___concurrence_wait_error>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__gnu_cxx___concurrence_wait_error)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gnu_cxx___mutex {
    pub _M_mutex: __gthread_mutex_t,
}
#[test]
fn bindgen_test_layout___gnu_cxx___mutex() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___mutex>(),
        40usize,
        concat!("Size of: ", stringify!(__gnu_cxx___mutex))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___mutex>(),
        8usize,
        concat!("Alignment of ", stringify!(__gnu_cxx___mutex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__gnu_cxx___mutex>()))._M_mutex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gnu_cxx___mutex),
            "::",
            stringify!(_M_mutex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gnu_cxx___recursive_mutex {
    pub _M_mutex: __gthread_recursive_mutex_t,
}
#[test]
fn bindgen_test_layout___gnu_cxx___recursive_mutex() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___recursive_mutex>(),
        40usize,
        concat!("Size of: ", stringify!(__gnu_cxx___recursive_mutex))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___recursive_mutex>(),
        8usize,
        concat!("Alignment of ", stringify!(__gnu_cxx___recursive_mutex))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__gnu_cxx___recursive_mutex>()))._M_mutex as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gnu_cxx___recursive_mutex),
            "::",
            stringify!(_M_mutex)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___scoped_lock {
    pub _M_device: *mut __gnu_cxx___scoped_lock___mutex_type,
}
pub type __gnu_cxx___scoped_lock___mutex_type = __gnu_cxx___mutex;
#[test]
fn bindgen_test_layout___gnu_cxx___scoped_lock() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___scoped_lock>(),
        8usize,
        concat!("Size of: ", stringify!(__gnu_cxx___scoped_lock))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___scoped_lock>(),
        8usize,
        concat!("Alignment of ", stringify!(__gnu_cxx___scoped_lock))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__gnu_cxx___scoped_lock>()))._M_device as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gnu_cxx___scoped_lock),
            "::",
            stringify!(_M_device)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gnu_cxx___cond {
    pub _M_cond: __gthread_cond_t,
}
#[test]
fn bindgen_test_layout___gnu_cxx___cond() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___cond>(),
        48usize,
        concat!("Size of: ", stringify!(__gnu_cxx___cond))
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___cond>(),
        8usize,
        concat!("Alignment of ", stringify!(__gnu_cxx___cond))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__gnu_cxx___cond>()))._M_cond as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gnu_cxx___cond),
            "::",
            stringify!(_M_cond)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_membuf {
    pub _M_storage: *mut ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_membuf__Tp2<_Tp> {
    pub _M_t: _Tp,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_buffer {
    pub _M_storage: u8,
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: size_t,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: size_t) -> size_t;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: size_t) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(__key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
pub const FP_INT_UPWARD: ::std::os::raw::c_uint = 0;
pub const FP_INT_DOWNWARD: ::std::os::raw::c_uint = 1;
pub const FP_INT_TOWARDZERO: ::std::os::raw::c_uint = 2;
pub const FP_INT_TONEARESTFROMZERO: ::std::os::raw::c_uint = 3;
pub const FP_INT_TONEAREST: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn __sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn exp10(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp10(__x: f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn nextdown(__x: f64) -> f64;
}
extern "C" {
    pub fn __nextdown(__x: f64) -> f64;
}
extern "C" {
    pub fn nextup(__x: f64) -> f64;
}
extern "C" {
    pub fn __nextup(__x: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogb(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogb(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn roundeven(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundeven(__x: f64) -> f64;
}
extern "C" {
    pub fn fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn totalorder(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermag(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize(__cx: *mut f64, __x: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayload(__x: *const f64) -> f64;
}
extern "C" {
    pub fn __getpayload(__x: *const f64) -> f64;
}
extern "C" {
    pub fn setpayload(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsig(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
extern "C" {
    pub fn __sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn exp10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp10f(__x: f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn nextdownf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nextdownf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextupf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nextupf(__x: f32) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn roundevenf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundevenf(__x: f32) -> f32;
}
extern "C" {
    pub fn fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn totalorderf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizef(__cx: *mut f32, __x: *const f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf(__x: *const f32) -> f32;
}
extern "C" {
    pub fn __getpayloadf(__x: *const f32) -> f32;
}
extern "C" {
    pub fn setpayloadf(__x: *mut f32, __payload: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf(__x: *mut f32, __payload: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
}
extern "C" {
    pub fn __sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn exp10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp10l(__x: u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nextdownl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nextdownl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextupl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nextupl(__x: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn roundevenl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundevenl(__x: u128) -> u128;
}
extern "C" {
    pub fn fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn totalorderl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizel(__cx: *mut u128, __x: *const u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadl(__x: *const u128) -> u128;
}
extern "C" {
    pub fn __getpayloadl(__x: *const u128) -> u128;
}
extern "C" {
    pub fn setpayloadl(__x: *mut u128, __payload: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigl(__x: *mut u128, __payload: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn acosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __acosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn asinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __asinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atan2f32(__y: _Float32, __x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atan2f32(__y: _Float32, __x: _Float32) -> _Float32;
}
extern "C" {
    pub fn cosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __cosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn tanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn coshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __coshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn tanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sincosf32(__x: _Float32, __sinx: *mut _Float32, __cosx: *mut _Float32);
}
extern "C" {
    pub fn __sincosf32(__x: _Float32, __sinx: *mut _Float32, __cosx: *mut _Float32);
}
extern "C" {
    pub fn acoshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __acoshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn asinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __asinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn expf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __expf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn frexpf32(__x: _Float32, __exponent: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __frexpf32(__x: _Float32, __exponent: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn ldexpf32(__x: _Float32, __exponent: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __ldexpf32(__x: _Float32, __exponent: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn logf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __logf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn modff32(__x: _Float32, __iptr: *mut _Float32) -> _Float32;
}
extern "C" {
    pub fn __modff32(__x: _Float32, __iptr: *mut _Float32) -> _Float32;
}
extern "C" {
    pub fn exp10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __exp10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn expm1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __expm1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log1pf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log1pf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn logbf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __logbf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn exp2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __exp2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn powf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __powf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn sqrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sqrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn hypotf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __hypotf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn cbrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __cbrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn ceilf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __ceilf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fabsf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fabsf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn floorf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __floorf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmodf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmodf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn copysignf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __copysignf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn nanf32(__tagb: *const ::std::os::raw::c_char) -> _Float32;
}
extern "C" {
    pub fn __nanf32(__tagb: *const ::std::os::raw::c_char) -> _Float32;
}
extern "C" {
    pub fn j0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __j0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn j1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __j1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn jnf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn __jnf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn y0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __y0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn y1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __y1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn ynf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn __ynf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn erff32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __erff32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn erfcf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __erfcf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn lgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __lgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn tgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn lgammaf32_r(arg1: _Float32, __signgamp: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __lgammaf32_r(arg1: _Float32, __signgamp: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn rintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __rintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextafterf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextafterf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextdownf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextdownf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextupf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextupf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn remainderf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __remainderf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn scalbnf32(__x: _Float32, __n: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __scalbnf32(__x: _Float32, __n: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn ilogbf32(__x: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf32(__x: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf32(__x: _Float32, __n: ::std::os::raw::c_long) -> _Float32;
}
extern "C" {
    pub fn __scalblnf32(__x: _Float32, __n: ::std::os::raw::c_long) -> _Float32;
}
extern "C" {
    pub fn nearbyintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nearbyintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn roundf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __roundf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn truncf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __truncf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn remquof32(__x: _Float32, __y: _Float32, __quo: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __remquof32(__x: _Float32, __y: _Float32, __quo: *mut ::std::os::raw::c_int)
        -> _Float32;
}
extern "C" {
    pub fn lrintf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fdimf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaxf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaxf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaf32(__x: _Float32, __y: _Float32, __z: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaf32(__x: _Float32, __y: _Float32, __z: _Float32) -> _Float32;
}
extern "C" {
    pub fn roundevenf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __roundevenf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaxmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn totalorderf32(__x: _Float32, __y: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf32(__x: _Float32, __y: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizef32(__cx: *mut _Float32, __x: *const _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf32(__x: *const _Float32) -> _Float32;
}
extern "C" {
    pub fn __getpayloadf32(__x: *const _Float32) -> _Float32;
}
extern "C" {
    pub fn setpayloadf32(__x: *mut _Float32, __payload: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf32(__x: *mut _Float32, __payload: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __acosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn asinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __asinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atan2f64(__y: _Float64, __x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atan2f64(__y: _Float64, __x: _Float64) -> _Float64;
}
extern "C" {
    pub fn cosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __cosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn tanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn coshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __coshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn tanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sincosf64(__x: _Float64, __sinx: *mut _Float64, __cosx: *mut _Float64);
}
extern "C" {
    pub fn __sincosf64(__x: _Float64, __sinx: *mut _Float64, __cosx: *mut _Float64);
}
extern "C" {
    pub fn acoshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __acoshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn asinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __asinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn expf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __expf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn frexpf64(__x: _Float64, __exponent: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __frexpf64(__x: _Float64, __exponent: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn ldexpf64(__x: _Float64, __exponent: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __ldexpf64(__x: _Float64, __exponent: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn logf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __logf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn modff64(__x: _Float64, __iptr: *mut _Float64) -> _Float64;
}
extern "C" {
    pub fn __modff64(__x: _Float64, __iptr: *mut _Float64) -> _Float64;
}
extern "C" {
    pub fn exp10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __exp10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn expm1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __expm1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log1pf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log1pf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn logbf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __logbf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn exp2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __exp2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn powf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __powf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn sqrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sqrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn hypotf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __hypotf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn cbrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __cbrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn ceilf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __ceilf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fabsf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fabsf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn floorf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __floorf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmodf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmodf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn copysignf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __copysignf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn nanf64(__tagb: *const ::std::os::raw::c_char) -> _Float64;
}
extern "C" {
    pub fn __nanf64(__tagb: *const ::std::os::raw::c_char) -> _Float64;
}
extern "C" {
    pub fn j0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __j0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn j1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __j1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn jnf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn __jnf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn y0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __y0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn y1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __y1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn ynf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn __ynf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn erff64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __erff64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn erfcf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __erfcf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn lgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __lgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn tgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn lgammaf64_r(arg1: _Float64, __signgamp: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __lgammaf64_r(arg1: _Float64, __signgamp: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn rintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __rintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextafterf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextafterf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextdownf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextdownf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextupf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextupf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn remainderf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __remainderf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn scalbnf64(__x: _Float64, __n: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __scalbnf64(__x: _Float64, __n: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn ilogbf64(__x: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf64(__x: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf64(__x: _Float64, __n: ::std::os::raw::c_long) -> _Float64;
}
extern "C" {
    pub fn __scalblnf64(__x: _Float64, __n: ::std::os::raw::c_long) -> _Float64;
}
extern "C" {
    pub fn nearbyintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nearbyintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn roundf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __roundf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn truncf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __truncf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn remquof64(__x: _Float64, __y: _Float64, __quo: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __remquof64(__x: _Float64, __y: _Float64, __quo: *mut ::std::os::raw::c_int)
        -> _Float64;
}
extern "C" {
    pub fn lrintf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fdimf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaxf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaxf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float64;
}
extern "C" {
    pub fn roundevenf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __roundevenf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaxmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn totalorderf64(__x: _Float64, __y: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf64(__x: _Float64, __y: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizef64(__cx: *mut _Float64, __x: *const _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf64(__x: *const _Float64) -> _Float64;
}
extern "C" {
    pub fn __getpayloadf64(__x: *const _Float64) -> _Float64;
}
extern "C" {
    pub fn setpayloadf64(__x: *mut _Float64, __payload: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf64(__x: *mut _Float64, __payload: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __acosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn asinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __asinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atan2f32x(__y: _Float32x, __x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atan2f32x(__y: _Float32x, __x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn cosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __cosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn coshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __coshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sincosf32x(__x: _Float32x, __sinx: *mut _Float32x, __cosx: *mut _Float32x);
}
extern "C" {
    pub fn __sincosf32x(__x: _Float32x, __sinx: *mut _Float32x, __cosx: *mut _Float32x);
}
extern "C" {
    pub fn acoshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __acoshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn asinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __asinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn expf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __expf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn frexpf32x(__x: _Float32x, __exponent: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __frexpf32x(__x: _Float32x, __exponent: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn ldexpf32x(__x: _Float32x, __exponent: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __ldexpf32x(__x: _Float32x, __exponent: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn logf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __logf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn modff32x(__x: _Float32x, __iptr: *mut _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __modff32x(__x: _Float32x, __iptr: *mut _Float32x) -> _Float32x;
}
extern "C" {
    pub fn exp10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __exp10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn expm1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __expm1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log1pf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log1pf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn logbf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __logbf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn exp2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __exp2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn powf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __powf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sqrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sqrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn hypotf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __hypotf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn cbrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __cbrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn ceilf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __ceilf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fabsf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fabsf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn floorf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __floorf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmodf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmodf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn copysignf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __copysignf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nanf32x(__tagb: *const ::std::os::raw::c_char) -> _Float32x;
}
extern "C" {
    pub fn __nanf32x(__tagb: *const ::std::os::raw::c_char) -> _Float32x;
}
extern "C" {
    pub fn j0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __j0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn j1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __j1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn jnf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __jnf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn y0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __y0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn y1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __y1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn ynf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __ynf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn erff32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __erff32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn erfcf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __erfcf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn lgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __lgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn lgammaf32x_r(arg1: _Float32x, __signgamp: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __lgammaf32x_r(arg1: _Float32x, __signgamp: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn rintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __rintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextafterf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextafterf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextdownf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextdownf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextupf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextupf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn remainderf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __remainderf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn scalbnf32x(__x: _Float32x, __n: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __scalbnf32x(__x: _Float32x, __n: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn ilogbf32x(__x: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf32x(__x: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf32x(__x: _Float32x, __n: ::std::os::raw::c_long) -> _Float32x;
}
extern "C" {
    pub fn __scalblnf32x(__x: _Float32x, __n: ::std::os::raw::c_long) -> _Float32x;
}
extern "C" {
    pub fn nearbyintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nearbyintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn roundf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __roundf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn truncf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __truncf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn remquof32x(
        __x: _Float32x,
        __y: _Float32x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn __remquof32x(
        __x: _Float32x,
        __y: _Float32x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn lrintf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fdimf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaxf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaxf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn roundevenf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __roundevenf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaxmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn totalorderf32x(__x: _Float32x, __y: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf32x(__x: _Float32x, __y: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizef32x(__cx: *mut _Float32x, __x: *const _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf32x(__x: *const _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __getpayloadf32x(__x: *const _Float32x) -> _Float32x;
}
extern "C" {
    pub fn setpayloadf32x(__x: *mut _Float32x, __payload: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf32x(__x: *mut _Float32x, __payload: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __acosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn asinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __asinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atan2f64x(__y: _Float64x, __x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atan2f64x(__y: _Float64x, __x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn cosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __cosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn coshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __coshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sincosf64x(__x: _Float64x, __sinx: *mut _Float64x, __cosx: *mut _Float64x);
}
extern "C" {
    pub fn __sincosf64x(__x: _Float64x, __sinx: *mut _Float64x, __cosx: *mut _Float64x);
}
extern "C" {
    pub fn acoshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __acoshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn asinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __asinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn expf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __expf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn frexpf64x(__x: _Float64x, __exponent: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __frexpf64x(__x: _Float64x, __exponent: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn ldexpf64x(__x: _Float64x, __exponent: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __ldexpf64x(__x: _Float64x, __exponent: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn logf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __logf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn modff64x(__x: _Float64x, __iptr: *mut _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __modff64x(__x: _Float64x, __iptr: *mut _Float64x) -> _Float64x;
}
extern "C" {
    pub fn exp10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __exp10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn expm1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __expm1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log1pf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log1pf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn logbf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __logbf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn exp2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __exp2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn powf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __powf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sqrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sqrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn hypotf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __hypotf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn cbrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __cbrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn ceilf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __ceilf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fabsf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fabsf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn floorf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __floorf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmodf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmodf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn copysignf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __copysignf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nanf64x(__tagb: *const ::std::os::raw::c_char) -> _Float64x;
}
extern "C" {
    pub fn __nanf64x(__tagb: *const ::std::os::raw::c_char) -> _Float64x;
}
extern "C" {
    pub fn j0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __j0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn j1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __j1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn jnf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __jnf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn y0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __y0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn y1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __y1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn ynf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __ynf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn erff64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __erff64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn erfcf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __erfcf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn lgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __lgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn lgammaf64x_r(arg1: _Float64x, __signgamp: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __lgammaf64x_r(arg1: _Float64x, __signgamp: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn rintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __rintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextafterf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextafterf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextdownf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextdownf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextupf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextupf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn remainderf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __remainderf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn scalbnf64x(__x: _Float64x, __n: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __scalbnf64x(__x: _Float64x, __n: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn ilogbf64x(__x: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf64x(__x: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf64x(__x: _Float64x, __n: ::std::os::raw::c_long) -> _Float64x;
}
extern "C" {
    pub fn __scalblnf64x(__x: _Float64x, __n: ::std::os::raw::c_long) -> _Float64x;
}
extern "C" {
    pub fn nearbyintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nearbyintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn roundf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __roundf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn truncf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __truncf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn remquof64x(
        __x: _Float64x,
        __y: _Float64x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn __remquof64x(
        __x: _Float64x,
        __y: _Float64x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn lrintf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fdimf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaxf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaxf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn roundevenf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __roundevenf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaxmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn totalorderf64x(__x: _Float64x, __y: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf64x(__x: _Float64x, __y: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizef64x(__cx: *mut _Float64x, __x: *const _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf64x(__x: *const _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __getpayloadf64x(__x: *const _Float64x) -> _Float64x;
}
extern "C" {
    pub fn setpayloadf64x(__x: *mut _Float64x, __payload: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf64x(__x: *mut _Float64x, __payload: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: ::std::os::raw::c_uint = 0;
pub const FP_INFINITE: ::std::os::raw::c_uint = 1;
pub const FP_ZERO: ::std::os::raw::c_uint = 2;
pub const FP_SUBNORMAL: ::std::os::raw::c_uint = 3;
pub const FP_NORMAL: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __iscanonicall(__x: u128) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __iseqsig_type {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout___iseqsig_type_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
}
#[test]
fn __bindgen_test_layout___iseqsig_type_open0_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
}
#[test]
fn __bindgen_test_layout___iseqsig_type_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rawmemchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memrchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: size_t,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strverscmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn basename(__filename: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub const _ISupper: ::std::os::raw::c_uint = 256;
pub const _ISlower: ::std::os::raw::c_uint = 512;
pub const _ISalpha: ::std::os::raw::c_uint = 1024;
pub const _ISdigit: ::std::os::raw::c_uint = 2048;
pub const _ISxdigit: ::std::os::raw::c_uint = 4096;
pub const _ISspace: ::std::os::raw::c_uint = 8192;
pub const _ISprint: ::std::os::raw::c_uint = 16384;
pub const _ISgraph: ::std::os::raw::c_uint = 32768;
pub const _ISblank: ::std::os::raw::c_uint = 1;
pub const _IScntrl: ::std::os::raw::c_uint = 2;
pub const _ISpunct: ::std::os::raw::c_uint = 4;
pub const _ISalnum: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isctype(
        __c: ::std::os::raw::c_int,
        __mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize], u8>,
}
#[test]
fn bindgen_test_layout_timex() {
    assert_eq!(
        ::std::mem::size_of::<timex>(),
        208usize,
        concat!("Size of: ", stringify!(timex))
    );
    assert_eq!(
        ::std::mem::align_of::<timex>(),
        8usize,
        concat!("Alignment of ", stringify!(timex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).modes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(modes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).freq as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).maxerror as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(maxerror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).esterror as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(esterror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).status as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).constant as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).precision as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tolerance as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tolerance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).time as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tick as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).ppsfreq as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(ppsfreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).jitter as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).shift as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).stabil as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(stabil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).jitcnt as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(jitcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).calcnt as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(calcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).errcnt as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(errcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).stbcnt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(stbcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tai as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tai)
        )
    );
}
extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
}
pub type error_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    assert_eq!(
        ::std::mem::size_of::<lconv>(),
        96usize,
        concat!("Size of: ", stringify!(lconv))
    );
    assert_eq!(
        ::std::mem::align_of::<lconv>(),
        8usize,
        concat!("Alignment of ", stringify!(lconv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).decimal_point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).thousands_sep as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).grouping as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_curr_symbol as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_curr_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).currency_symbol as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_decimal_point as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_thousands_sep as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_grouping as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).positive_sign as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(positive_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).negative_sign as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(negative_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_frac_digits as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).frac_digits as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_cs_precedes as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sep_by_space as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_cs_precedes as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sep_by_space as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sign_posn as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sign_posn as *const _ as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_cs_precedes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sep_by_space as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_cs_precedes as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sep_by_space as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sign_posn as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sign_posn as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sign_posn)
        )
    );
}
extern "C" {
    pub fn setlocale(
        __category: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        __category_mask: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
        __base: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn duplocale(__dataset: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(__dataset: locale_t);
}
extern "C" {
    pub fn uselocale(__dataset: locale_t) -> locale_t;
}
pub type GInt32 = ::std::os::raw::c_int;
pub type GUInt32 = ::std::os::raw::c_uint;
pub type GInt16 = ::std::os::raw::c_short;
pub type GUInt16 = ::std::os::raw::c_ushort;
pub type GByte = ::std::os::raw::c_uchar;
pub type GBool = ::std::os::raw::c_int;
pub type GIntBig = ::std::os::raw::c_longlong;
pub type GUIntBig = ::std::os::raw::c_ulonglong;
pub type GInt64 = GIntBig;
pub type GUInt64 = GUIntBig;
pub type GPtrDiff_t = GIntBig;
pub type __m64 = [::std::os::raw::c_longlong; 1usize];
pub type __v1di = [::std::os::raw::c_longlong; 1usize];
pub type __v2si = [::std::os::raw::c_int; 2usize];
pub type __v4hi = [::std::os::raw::c_short; 4usize];
pub type __v8qi = [::std::os::raw::c_char; 8usize];
pub type __v4si = [::std::os::raw::c_int; 4usize];
pub type __v4sf = [f32; 4usize];
pub type __m128 = [f32; 4usize];
pub type __v4su = [::std::os::raw::c_uint; 4usize];
extern "C" {
    pub fn _mm_sfence();
}
extern "C" {
    pub fn _mm_getcsr() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_setcsr(__i: ::std::os::raw::c_uint);
}
pub type __m128d = [f64; 2usize];
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
pub type __v2df = [f64; 2usize];
pub type __v2di = [::std::os::raw::c_longlong; 2usize];
pub type __v8hi = [::std::os::raw::c_short; 8usize];
pub type __v16qi = [::std::os::raw::c_char; 16usize];
pub type __v2du = [::std::os::raw::c_ulonglong; 2usize];
pub type __v8hu = [::std::os::raw::c_ushort; 8usize];
pub type __v16qu = [::std::os::raw::c_uchar; 16usize];
pub type __v16qs = [::std::os::raw::c_schar; 16usize];
extern "C" {
    pub fn _mm_clflush(__p: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_lfence();
}
extern "C" {
    pub fn _mm_mfence();
}
extern "C" {
    pub fn _mm_pause();
}
pub type __v4df = [f64; 4usize];
pub type __v8sf = [f32; 8usize];
pub type __v4di = [::std::os::raw::c_longlong; 4usize];
pub type __v8si = [::std::os::raw::c_int; 8usize];
pub type __v16hi = [::std::os::raw::c_short; 16usize];
pub type __v32qi = [::std::os::raw::c_char; 32usize];
pub type __v4du = [::std::os::raw::c_ulonglong; 4usize];
pub type __v8su = [::std::os::raw::c_uint; 8usize];
pub type __v16hu = [::std::os::raw::c_ushort; 16usize];
pub type __v32qu = [::std::os::raw::c_uchar; 32usize];
pub type __v32qs = [::std::os::raw::c_schar; 32usize];
pub type __m256 = [f32; 8usize];
pub type __m256d = [f64; 4usize];
pub type __m256i = [::std::os::raw::c_longlong; 4usize];
pub type __v64qi = [::std::os::raw::c_char; 64usize];
pub type __v32hi = [::std::os::raw::c_short; 32usize];
pub type __v8df = [f64; 8usize];
pub type __v16sf = [f32; 16usize];
pub type __v8di = [::std::os::raw::c_longlong; 8usize];
pub type __v16si = [::std::os::raw::c_int; 16usize];
pub type __v64qu = [::std::os::raw::c_uchar; 64usize];
pub type __v32hu = [::std::os::raw::c_ushort; 32usize];
pub type __v8du = [::std::os::raw::c_ulonglong; 8usize];
pub type __v16su = [::std::os::raw::c_uint; 16usize];
pub type __m512 = [f32; 16usize];
pub type __m512d = [f64; 8usize];
pub type __m512i = [::std::os::raw::c_longlong; 8usize];
pub type __mmask8 = ::std::os::raw::c_uchar;
pub type __mmask16 = ::std::os::raw::c_ushort;
pub const _MM_CMPINT_ENUM__MM_CMPINT_EQ: _MM_CMPINT_ENUM = 0;
pub const _MM_CMPINT_ENUM__MM_CMPINT_LT: _MM_CMPINT_ENUM = 1;
pub const _MM_CMPINT_ENUM__MM_CMPINT_LE: _MM_CMPINT_ENUM = 2;
pub const _MM_CMPINT_ENUM__MM_CMPINT_UNUSED: _MM_CMPINT_ENUM = 3;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NE: _MM_CMPINT_ENUM = 4;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NLT: _MM_CMPINT_ENUM = 5;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NLE: _MM_CMPINT_ENUM = 6;
pub type _MM_CMPINT_ENUM = ::std::os::raw::c_uint;
pub const _MM_PERM_ENUM__MM_PERM_AAAA: _MM_PERM_ENUM = 0;
pub const _MM_PERM_ENUM__MM_PERM_AAAB: _MM_PERM_ENUM = 1;
pub const _MM_PERM_ENUM__MM_PERM_AAAC: _MM_PERM_ENUM = 2;
pub const _MM_PERM_ENUM__MM_PERM_AAAD: _MM_PERM_ENUM = 3;
pub const _MM_PERM_ENUM__MM_PERM_AABA: _MM_PERM_ENUM = 4;
pub const _MM_PERM_ENUM__MM_PERM_AABB: _MM_PERM_ENUM = 5;
pub const _MM_PERM_ENUM__MM_PERM_AABC: _MM_PERM_ENUM = 6;
pub const _MM_PERM_ENUM__MM_PERM_AABD: _MM_PERM_ENUM = 7;
pub const _MM_PERM_ENUM__MM_PERM_AACA: _MM_PERM_ENUM = 8;
pub const _MM_PERM_ENUM__MM_PERM_AACB: _MM_PERM_ENUM = 9;
pub const _MM_PERM_ENUM__MM_PERM_AACC: _MM_PERM_ENUM = 10;
pub const _MM_PERM_ENUM__MM_PERM_AACD: _MM_PERM_ENUM = 11;
pub const _MM_PERM_ENUM__MM_PERM_AADA: _MM_PERM_ENUM = 12;
pub const _MM_PERM_ENUM__MM_PERM_AADB: _MM_PERM_ENUM = 13;
pub const _MM_PERM_ENUM__MM_PERM_AADC: _MM_PERM_ENUM = 14;
pub const _MM_PERM_ENUM__MM_PERM_AADD: _MM_PERM_ENUM = 15;
pub const _MM_PERM_ENUM__MM_PERM_ABAA: _MM_PERM_ENUM = 16;
pub const _MM_PERM_ENUM__MM_PERM_ABAB: _MM_PERM_ENUM = 17;
pub const _MM_PERM_ENUM__MM_PERM_ABAC: _MM_PERM_ENUM = 18;
pub const _MM_PERM_ENUM__MM_PERM_ABAD: _MM_PERM_ENUM = 19;
pub const _MM_PERM_ENUM__MM_PERM_ABBA: _MM_PERM_ENUM = 20;
pub const _MM_PERM_ENUM__MM_PERM_ABBB: _MM_PERM_ENUM = 21;
pub const _MM_PERM_ENUM__MM_PERM_ABBC: _MM_PERM_ENUM = 22;
pub const _MM_PERM_ENUM__MM_PERM_ABBD: _MM_PERM_ENUM = 23;
pub const _MM_PERM_ENUM__MM_PERM_ABCA: _MM_PERM_ENUM = 24;
pub const _MM_PERM_ENUM__MM_PERM_ABCB: _MM_PERM_ENUM = 25;
pub const _MM_PERM_ENUM__MM_PERM_ABCC: _MM_PERM_ENUM = 26;
pub const _MM_PERM_ENUM__MM_PERM_ABCD: _MM_PERM_ENUM = 27;
pub const _MM_PERM_ENUM__MM_PERM_ABDA: _MM_PERM_ENUM = 28;
pub const _MM_PERM_ENUM__MM_PERM_ABDB: _MM_PERM_ENUM = 29;
pub const _MM_PERM_ENUM__MM_PERM_ABDC: _MM_PERM_ENUM = 30;
pub const _MM_PERM_ENUM__MM_PERM_ABDD: _MM_PERM_ENUM = 31;
pub const _MM_PERM_ENUM__MM_PERM_ACAA: _MM_PERM_ENUM = 32;
pub const _MM_PERM_ENUM__MM_PERM_ACAB: _MM_PERM_ENUM = 33;
pub const _MM_PERM_ENUM__MM_PERM_ACAC: _MM_PERM_ENUM = 34;
pub const _MM_PERM_ENUM__MM_PERM_ACAD: _MM_PERM_ENUM = 35;
pub const _MM_PERM_ENUM__MM_PERM_ACBA: _MM_PERM_ENUM = 36;
pub const _MM_PERM_ENUM__MM_PERM_ACBB: _MM_PERM_ENUM = 37;
pub const _MM_PERM_ENUM__MM_PERM_ACBC: _MM_PERM_ENUM = 38;
pub const _MM_PERM_ENUM__MM_PERM_ACBD: _MM_PERM_ENUM = 39;
pub const _MM_PERM_ENUM__MM_PERM_ACCA: _MM_PERM_ENUM = 40;
pub const _MM_PERM_ENUM__MM_PERM_ACCB: _MM_PERM_ENUM = 41;
pub const _MM_PERM_ENUM__MM_PERM_ACCC: _MM_PERM_ENUM = 42;
pub const _MM_PERM_ENUM__MM_PERM_ACCD: _MM_PERM_ENUM = 43;
pub const _MM_PERM_ENUM__MM_PERM_ACDA: _MM_PERM_ENUM = 44;
pub const _MM_PERM_ENUM__MM_PERM_ACDB: _MM_PERM_ENUM = 45;
pub const _MM_PERM_ENUM__MM_PERM_ACDC: _MM_PERM_ENUM = 46;
pub const _MM_PERM_ENUM__MM_PERM_ACDD: _MM_PERM_ENUM = 47;
pub const _MM_PERM_ENUM__MM_PERM_ADAA: _MM_PERM_ENUM = 48;
pub const _MM_PERM_ENUM__MM_PERM_ADAB: _MM_PERM_ENUM = 49;
pub const _MM_PERM_ENUM__MM_PERM_ADAC: _MM_PERM_ENUM = 50;
pub const _MM_PERM_ENUM__MM_PERM_ADAD: _MM_PERM_ENUM = 51;
pub const _MM_PERM_ENUM__MM_PERM_ADBA: _MM_PERM_ENUM = 52;
pub const _MM_PERM_ENUM__MM_PERM_ADBB: _MM_PERM_ENUM = 53;
pub const _MM_PERM_ENUM__MM_PERM_ADBC: _MM_PERM_ENUM = 54;
pub const _MM_PERM_ENUM__MM_PERM_ADBD: _MM_PERM_ENUM = 55;
pub const _MM_PERM_ENUM__MM_PERM_ADCA: _MM_PERM_ENUM = 56;
pub const _MM_PERM_ENUM__MM_PERM_ADCB: _MM_PERM_ENUM = 57;
pub const _MM_PERM_ENUM__MM_PERM_ADCC: _MM_PERM_ENUM = 58;
pub const _MM_PERM_ENUM__MM_PERM_ADCD: _MM_PERM_ENUM = 59;
pub const _MM_PERM_ENUM__MM_PERM_ADDA: _MM_PERM_ENUM = 60;
pub const _MM_PERM_ENUM__MM_PERM_ADDB: _MM_PERM_ENUM = 61;
pub const _MM_PERM_ENUM__MM_PERM_ADDC: _MM_PERM_ENUM = 62;
pub const _MM_PERM_ENUM__MM_PERM_ADDD: _MM_PERM_ENUM = 63;
pub const _MM_PERM_ENUM__MM_PERM_BAAA: _MM_PERM_ENUM = 64;
pub const _MM_PERM_ENUM__MM_PERM_BAAB: _MM_PERM_ENUM = 65;
pub const _MM_PERM_ENUM__MM_PERM_BAAC: _MM_PERM_ENUM = 66;
pub const _MM_PERM_ENUM__MM_PERM_BAAD: _MM_PERM_ENUM = 67;
pub const _MM_PERM_ENUM__MM_PERM_BABA: _MM_PERM_ENUM = 68;
pub const _MM_PERM_ENUM__MM_PERM_BABB: _MM_PERM_ENUM = 69;
pub const _MM_PERM_ENUM__MM_PERM_BABC: _MM_PERM_ENUM = 70;
pub const _MM_PERM_ENUM__MM_PERM_BABD: _MM_PERM_ENUM = 71;
pub const _MM_PERM_ENUM__MM_PERM_BACA: _MM_PERM_ENUM = 72;
pub const _MM_PERM_ENUM__MM_PERM_BACB: _MM_PERM_ENUM = 73;
pub const _MM_PERM_ENUM__MM_PERM_BACC: _MM_PERM_ENUM = 74;
pub const _MM_PERM_ENUM__MM_PERM_BACD: _MM_PERM_ENUM = 75;
pub const _MM_PERM_ENUM__MM_PERM_BADA: _MM_PERM_ENUM = 76;
pub const _MM_PERM_ENUM__MM_PERM_BADB: _MM_PERM_ENUM = 77;
pub const _MM_PERM_ENUM__MM_PERM_BADC: _MM_PERM_ENUM = 78;
pub const _MM_PERM_ENUM__MM_PERM_BADD: _MM_PERM_ENUM = 79;
pub const _MM_PERM_ENUM__MM_PERM_BBAA: _MM_PERM_ENUM = 80;
pub const _MM_PERM_ENUM__MM_PERM_BBAB: _MM_PERM_ENUM = 81;
pub const _MM_PERM_ENUM__MM_PERM_BBAC: _MM_PERM_ENUM = 82;
pub const _MM_PERM_ENUM__MM_PERM_BBAD: _MM_PERM_ENUM = 83;
pub const _MM_PERM_ENUM__MM_PERM_BBBA: _MM_PERM_ENUM = 84;
pub const _MM_PERM_ENUM__MM_PERM_BBBB: _MM_PERM_ENUM = 85;
pub const _MM_PERM_ENUM__MM_PERM_BBBC: _MM_PERM_ENUM = 86;
pub const _MM_PERM_ENUM__MM_PERM_BBBD: _MM_PERM_ENUM = 87;
pub const _MM_PERM_ENUM__MM_PERM_BBCA: _MM_PERM_ENUM = 88;
pub const _MM_PERM_ENUM__MM_PERM_BBCB: _MM_PERM_ENUM = 89;
pub const _MM_PERM_ENUM__MM_PERM_BBCC: _MM_PERM_ENUM = 90;
pub const _MM_PERM_ENUM__MM_PERM_BBCD: _MM_PERM_ENUM = 91;
pub const _MM_PERM_ENUM__MM_PERM_BBDA: _MM_PERM_ENUM = 92;
pub const _MM_PERM_ENUM__MM_PERM_BBDB: _MM_PERM_ENUM = 93;
pub const _MM_PERM_ENUM__MM_PERM_BBDC: _MM_PERM_ENUM = 94;
pub const _MM_PERM_ENUM__MM_PERM_BBDD: _MM_PERM_ENUM = 95;
pub const _MM_PERM_ENUM__MM_PERM_BCAA: _MM_PERM_ENUM = 96;
pub const _MM_PERM_ENUM__MM_PERM_BCAB: _MM_PERM_ENUM = 97;
pub const _MM_PERM_ENUM__MM_PERM_BCAC: _MM_PERM_ENUM = 98;
pub const _MM_PERM_ENUM__MM_PERM_BCAD: _MM_PERM_ENUM = 99;
pub const _MM_PERM_ENUM__MM_PERM_BCBA: _MM_PERM_ENUM = 100;
pub const _MM_PERM_ENUM__MM_PERM_BCBB: _MM_PERM_ENUM = 101;
pub const _MM_PERM_ENUM__MM_PERM_BCBC: _MM_PERM_ENUM = 102;
pub const _MM_PERM_ENUM__MM_PERM_BCBD: _MM_PERM_ENUM = 103;
pub const _MM_PERM_ENUM__MM_PERM_BCCA: _MM_PERM_ENUM = 104;
pub const _MM_PERM_ENUM__MM_PERM_BCCB: _MM_PERM_ENUM = 105;
pub const _MM_PERM_ENUM__MM_PERM_BCCC: _MM_PERM_ENUM = 106;
pub const _MM_PERM_ENUM__MM_PERM_BCCD: _MM_PERM_ENUM = 107;
pub const _MM_PERM_ENUM__MM_PERM_BCDA: _MM_PERM_ENUM = 108;
pub const _MM_PERM_ENUM__MM_PERM_BCDB: _MM_PERM_ENUM = 109;
pub const _MM_PERM_ENUM__MM_PERM_BCDC: _MM_PERM_ENUM = 110;
pub const _MM_PERM_ENUM__MM_PERM_BCDD: _MM_PERM_ENUM = 111;
pub const _MM_PERM_ENUM__MM_PERM_BDAA: _MM_PERM_ENUM = 112;
pub const _MM_PERM_ENUM__MM_PERM_BDAB: _MM_PERM_ENUM = 113;
pub const _MM_PERM_ENUM__MM_PERM_BDAC: _MM_PERM_ENUM = 114;
pub const _MM_PERM_ENUM__MM_PERM_BDAD: _MM_PERM_ENUM = 115;
pub const _MM_PERM_ENUM__MM_PERM_BDBA: _MM_PERM_ENUM = 116;
pub const _MM_PERM_ENUM__MM_PERM_BDBB: _MM_PERM_ENUM = 117;
pub const _MM_PERM_ENUM__MM_PERM_BDBC: _MM_PERM_ENUM = 118;
pub const _MM_PERM_ENUM__MM_PERM_BDBD: _MM_PERM_ENUM = 119;
pub const _MM_PERM_ENUM__MM_PERM_BDCA: _MM_PERM_ENUM = 120;
pub const _MM_PERM_ENUM__MM_PERM_BDCB: _MM_PERM_ENUM = 121;
pub const _MM_PERM_ENUM__MM_PERM_BDCC: _MM_PERM_ENUM = 122;
pub const _MM_PERM_ENUM__MM_PERM_BDCD: _MM_PERM_ENUM = 123;
pub const _MM_PERM_ENUM__MM_PERM_BDDA: _MM_PERM_ENUM = 124;
pub const _MM_PERM_ENUM__MM_PERM_BDDB: _MM_PERM_ENUM = 125;
pub const _MM_PERM_ENUM__MM_PERM_BDDC: _MM_PERM_ENUM = 126;
pub const _MM_PERM_ENUM__MM_PERM_BDDD: _MM_PERM_ENUM = 127;
pub const _MM_PERM_ENUM__MM_PERM_CAAA: _MM_PERM_ENUM = 128;
pub const _MM_PERM_ENUM__MM_PERM_CAAB: _MM_PERM_ENUM = 129;
pub const _MM_PERM_ENUM__MM_PERM_CAAC: _MM_PERM_ENUM = 130;
pub const _MM_PERM_ENUM__MM_PERM_CAAD: _MM_PERM_ENUM = 131;
pub const _MM_PERM_ENUM__MM_PERM_CABA: _MM_PERM_ENUM = 132;
pub const _MM_PERM_ENUM__MM_PERM_CABB: _MM_PERM_ENUM = 133;
pub const _MM_PERM_ENUM__MM_PERM_CABC: _MM_PERM_ENUM = 134;
pub const _MM_PERM_ENUM__MM_PERM_CABD: _MM_PERM_ENUM = 135;
pub const _MM_PERM_ENUM__MM_PERM_CACA: _MM_PERM_ENUM = 136;
pub const _MM_PERM_ENUM__MM_PERM_CACB: _MM_PERM_ENUM = 137;
pub const _MM_PERM_ENUM__MM_PERM_CACC: _MM_PERM_ENUM = 138;
pub const _MM_PERM_ENUM__MM_PERM_CACD: _MM_PERM_ENUM = 139;
pub const _MM_PERM_ENUM__MM_PERM_CADA: _MM_PERM_ENUM = 140;
pub const _MM_PERM_ENUM__MM_PERM_CADB: _MM_PERM_ENUM = 141;
pub const _MM_PERM_ENUM__MM_PERM_CADC: _MM_PERM_ENUM = 142;
pub const _MM_PERM_ENUM__MM_PERM_CADD: _MM_PERM_ENUM = 143;
pub const _MM_PERM_ENUM__MM_PERM_CBAA: _MM_PERM_ENUM = 144;
pub const _MM_PERM_ENUM__MM_PERM_CBAB: _MM_PERM_ENUM = 145;
pub const _MM_PERM_ENUM__MM_PERM_CBAC: _MM_PERM_ENUM = 146;
pub const _MM_PERM_ENUM__MM_PERM_CBAD: _MM_PERM_ENUM = 147;
pub const _MM_PERM_ENUM__MM_PERM_CBBA: _MM_PERM_ENUM = 148;
pub const _MM_PERM_ENUM__MM_PERM_CBBB: _MM_PERM_ENUM = 149;
pub const _MM_PERM_ENUM__MM_PERM_CBBC: _MM_PERM_ENUM = 150;
pub const _MM_PERM_ENUM__MM_PERM_CBBD: _MM_PERM_ENUM = 151;
pub const _MM_PERM_ENUM__MM_PERM_CBCA: _MM_PERM_ENUM = 152;
pub const _MM_PERM_ENUM__MM_PERM_CBCB: _MM_PERM_ENUM = 153;
pub const _MM_PERM_ENUM__MM_PERM_CBCC: _MM_PERM_ENUM = 154;
pub const _MM_PERM_ENUM__MM_PERM_CBCD: _MM_PERM_ENUM = 155;
pub const _MM_PERM_ENUM__MM_PERM_CBDA: _MM_PERM_ENUM = 156;
pub const _MM_PERM_ENUM__MM_PERM_CBDB: _MM_PERM_ENUM = 157;
pub const _MM_PERM_ENUM__MM_PERM_CBDC: _MM_PERM_ENUM = 158;
pub const _MM_PERM_ENUM__MM_PERM_CBDD: _MM_PERM_ENUM = 159;
pub const _MM_PERM_ENUM__MM_PERM_CCAA: _MM_PERM_ENUM = 160;
pub const _MM_PERM_ENUM__MM_PERM_CCAB: _MM_PERM_ENUM = 161;
pub const _MM_PERM_ENUM__MM_PERM_CCAC: _MM_PERM_ENUM = 162;
pub const _MM_PERM_ENUM__MM_PERM_CCAD: _MM_PERM_ENUM = 163;
pub const _MM_PERM_ENUM__MM_PERM_CCBA: _MM_PERM_ENUM = 164;
pub const _MM_PERM_ENUM__MM_PERM_CCBB: _MM_PERM_ENUM = 165;
pub const _MM_PERM_ENUM__MM_PERM_CCBC: _MM_PERM_ENUM = 166;
pub const _MM_PERM_ENUM__MM_PERM_CCBD: _MM_PERM_ENUM = 167;
pub const _MM_PERM_ENUM__MM_PERM_CCCA: _MM_PERM_ENUM = 168;
pub const _MM_PERM_ENUM__MM_PERM_CCCB: _MM_PERM_ENUM = 169;
pub const _MM_PERM_ENUM__MM_PERM_CCCC: _MM_PERM_ENUM = 170;
pub const _MM_PERM_ENUM__MM_PERM_CCCD: _MM_PERM_ENUM = 171;
pub const _MM_PERM_ENUM__MM_PERM_CCDA: _MM_PERM_ENUM = 172;
pub const _MM_PERM_ENUM__MM_PERM_CCDB: _MM_PERM_ENUM = 173;
pub const _MM_PERM_ENUM__MM_PERM_CCDC: _MM_PERM_ENUM = 174;
pub const _MM_PERM_ENUM__MM_PERM_CCDD: _MM_PERM_ENUM = 175;
pub const _MM_PERM_ENUM__MM_PERM_CDAA: _MM_PERM_ENUM = 176;
pub const _MM_PERM_ENUM__MM_PERM_CDAB: _MM_PERM_ENUM = 177;
pub const _MM_PERM_ENUM__MM_PERM_CDAC: _MM_PERM_ENUM = 178;
pub const _MM_PERM_ENUM__MM_PERM_CDAD: _MM_PERM_ENUM = 179;
pub const _MM_PERM_ENUM__MM_PERM_CDBA: _MM_PERM_ENUM = 180;
pub const _MM_PERM_ENUM__MM_PERM_CDBB: _MM_PERM_ENUM = 181;
pub const _MM_PERM_ENUM__MM_PERM_CDBC: _MM_PERM_ENUM = 182;
pub const _MM_PERM_ENUM__MM_PERM_CDBD: _MM_PERM_ENUM = 183;
pub const _MM_PERM_ENUM__MM_PERM_CDCA: _MM_PERM_ENUM = 184;
pub const _MM_PERM_ENUM__MM_PERM_CDCB: _MM_PERM_ENUM = 185;
pub const _MM_PERM_ENUM__MM_PERM_CDCC: _MM_PERM_ENUM = 186;
pub const _MM_PERM_ENUM__MM_PERM_CDCD: _MM_PERM_ENUM = 187;
pub const _MM_PERM_ENUM__MM_PERM_CDDA: _MM_PERM_ENUM = 188;
pub const _MM_PERM_ENUM__MM_PERM_CDDB: _MM_PERM_ENUM = 189;
pub const _MM_PERM_ENUM__MM_PERM_CDDC: _MM_PERM_ENUM = 190;
pub const _MM_PERM_ENUM__MM_PERM_CDDD: _MM_PERM_ENUM = 191;
pub const _MM_PERM_ENUM__MM_PERM_DAAA: _MM_PERM_ENUM = 192;
pub const _MM_PERM_ENUM__MM_PERM_DAAB: _MM_PERM_ENUM = 193;
pub const _MM_PERM_ENUM__MM_PERM_DAAC: _MM_PERM_ENUM = 194;
pub const _MM_PERM_ENUM__MM_PERM_DAAD: _MM_PERM_ENUM = 195;
pub const _MM_PERM_ENUM__MM_PERM_DABA: _MM_PERM_ENUM = 196;
pub const _MM_PERM_ENUM__MM_PERM_DABB: _MM_PERM_ENUM = 197;
pub const _MM_PERM_ENUM__MM_PERM_DABC: _MM_PERM_ENUM = 198;
pub const _MM_PERM_ENUM__MM_PERM_DABD: _MM_PERM_ENUM = 199;
pub const _MM_PERM_ENUM__MM_PERM_DACA: _MM_PERM_ENUM = 200;
pub const _MM_PERM_ENUM__MM_PERM_DACB: _MM_PERM_ENUM = 201;
pub const _MM_PERM_ENUM__MM_PERM_DACC: _MM_PERM_ENUM = 202;
pub const _MM_PERM_ENUM__MM_PERM_DACD: _MM_PERM_ENUM = 203;
pub const _MM_PERM_ENUM__MM_PERM_DADA: _MM_PERM_ENUM = 204;
pub const _MM_PERM_ENUM__MM_PERM_DADB: _MM_PERM_ENUM = 205;
pub const _MM_PERM_ENUM__MM_PERM_DADC: _MM_PERM_ENUM = 206;
pub const _MM_PERM_ENUM__MM_PERM_DADD: _MM_PERM_ENUM = 207;
pub const _MM_PERM_ENUM__MM_PERM_DBAA: _MM_PERM_ENUM = 208;
pub const _MM_PERM_ENUM__MM_PERM_DBAB: _MM_PERM_ENUM = 209;
pub const _MM_PERM_ENUM__MM_PERM_DBAC: _MM_PERM_ENUM = 210;
pub const _MM_PERM_ENUM__MM_PERM_DBAD: _MM_PERM_ENUM = 211;
pub const _MM_PERM_ENUM__MM_PERM_DBBA: _MM_PERM_ENUM = 212;
pub const _MM_PERM_ENUM__MM_PERM_DBBB: _MM_PERM_ENUM = 213;
pub const _MM_PERM_ENUM__MM_PERM_DBBC: _MM_PERM_ENUM = 214;
pub const _MM_PERM_ENUM__MM_PERM_DBBD: _MM_PERM_ENUM = 215;
pub const _MM_PERM_ENUM__MM_PERM_DBCA: _MM_PERM_ENUM = 216;
pub const _MM_PERM_ENUM__MM_PERM_DBCB: _MM_PERM_ENUM = 217;
pub const _MM_PERM_ENUM__MM_PERM_DBCC: _MM_PERM_ENUM = 218;
pub const _MM_PERM_ENUM__MM_PERM_DBCD: _MM_PERM_ENUM = 219;
pub const _MM_PERM_ENUM__MM_PERM_DBDA: _MM_PERM_ENUM = 220;
pub const _MM_PERM_ENUM__MM_PERM_DBDB: _MM_PERM_ENUM = 221;
pub const _MM_PERM_ENUM__MM_PERM_DBDC: _MM_PERM_ENUM = 222;
pub const _MM_PERM_ENUM__MM_PERM_DBDD: _MM_PERM_ENUM = 223;
pub const _MM_PERM_ENUM__MM_PERM_DCAA: _MM_PERM_ENUM = 224;
pub const _MM_PERM_ENUM__MM_PERM_DCAB: _MM_PERM_ENUM = 225;
pub const _MM_PERM_ENUM__MM_PERM_DCAC: _MM_PERM_ENUM = 226;
pub const _MM_PERM_ENUM__MM_PERM_DCAD: _MM_PERM_ENUM = 227;
pub const _MM_PERM_ENUM__MM_PERM_DCBA: _MM_PERM_ENUM = 228;
pub const _MM_PERM_ENUM__MM_PERM_DCBB: _MM_PERM_ENUM = 229;
pub const _MM_PERM_ENUM__MM_PERM_DCBC: _MM_PERM_ENUM = 230;
pub const _MM_PERM_ENUM__MM_PERM_DCBD: _MM_PERM_ENUM = 231;
pub const _MM_PERM_ENUM__MM_PERM_DCCA: _MM_PERM_ENUM = 232;
pub const _MM_PERM_ENUM__MM_PERM_DCCB: _MM_PERM_ENUM = 233;
pub const _MM_PERM_ENUM__MM_PERM_DCCC: _MM_PERM_ENUM = 234;
pub const _MM_PERM_ENUM__MM_PERM_DCCD: _MM_PERM_ENUM = 235;
pub const _MM_PERM_ENUM__MM_PERM_DCDA: _MM_PERM_ENUM = 236;
pub const _MM_PERM_ENUM__MM_PERM_DCDB: _MM_PERM_ENUM = 237;
pub const _MM_PERM_ENUM__MM_PERM_DCDC: _MM_PERM_ENUM = 238;
pub const _MM_PERM_ENUM__MM_PERM_DCDD: _MM_PERM_ENUM = 239;
pub const _MM_PERM_ENUM__MM_PERM_DDAA: _MM_PERM_ENUM = 240;
pub const _MM_PERM_ENUM__MM_PERM_DDAB: _MM_PERM_ENUM = 241;
pub const _MM_PERM_ENUM__MM_PERM_DDAC: _MM_PERM_ENUM = 242;
pub const _MM_PERM_ENUM__MM_PERM_DDAD: _MM_PERM_ENUM = 243;
pub const _MM_PERM_ENUM__MM_PERM_DDBA: _MM_PERM_ENUM = 244;
pub const _MM_PERM_ENUM__MM_PERM_DDBB: _MM_PERM_ENUM = 245;
pub const _MM_PERM_ENUM__MM_PERM_DDBC: _MM_PERM_ENUM = 246;
pub const _MM_PERM_ENUM__MM_PERM_DDBD: _MM_PERM_ENUM = 247;
pub const _MM_PERM_ENUM__MM_PERM_DDCA: _MM_PERM_ENUM = 248;
pub const _MM_PERM_ENUM__MM_PERM_DDCB: _MM_PERM_ENUM = 249;
pub const _MM_PERM_ENUM__MM_PERM_DDCC: _MM_PERM_ENUM = 250;
pub const _MM_PERM_ENUM__MM_PERM_DDCD: _MM_PERM_ENUM = 251;
pub const _MM_PERM_ENUM__MM_PERM_DDDA: _MM_PERM_ENUM = 252;
pub const _MM_PERM_ENUM__MM_PERM_DDDB: _MM_PERM_ENUM = 253;
pub const _MM_PERM_ENUM__MM_PERM_DDDC: _MM_PERM_ENUM = 254;
pub const _MM_PERM_ENUM__MM_PERM_DDDD: _MM_PERM_ENUM = 255;
pub type _MM_PERM_ENUM = ::std::os::raw::c_uint;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_1_2: _MM_MANTISSA_NORM_ENUM = 0;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_2: _MM_MANTISSA_NORM_ENUM = 1;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_1: _MM_MANTISSA_NORM_ENUM = 2;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p75_1p5: _MM_MANTISSA_NORM_ENUM = 3;
pub type _MM_MANTISSA_NORM_ENUM = ::std::os::raw::c_uint;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_src: _MM_MANTISSA_SIGN_ENUM = 0;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_zero: _MM_MANTISSA_SIGN_ENUM = 1;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_nan: _MM_MANTISSA_SIGN_ENUM = 2;
pub type _MM_MANTISSA_SIGN_ENUM = ::std::os::raw::c_uint;
pub type __mmask32 = ::std::os::raw::c_uint;
pub type __mmask64 = ::std::os::raw::c_ulonglong;
pub type __v2sf = [f32; 2usize];
pub type CSLConstList = *const *const ::std::os::raw::c_char;
pub type GDALProgressFunc = ::std::option::Option<
    unsafe extern "C" fn(
        dfComplete: f64,
        pszMessage: *const ::std::os::raw::c_char,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn GDALDummyProgress(
        arg1: f64,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALTermProgress(
        arg1: f64,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALScaledProgress(
        arg1: f64,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALCreateScaledProgress(
        arg1: f64,
        arg2: f64,
        arg3: GDALProgressFunc,
        arg4: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALDestroyScaledProgress(arg1: *mut ::std::os::raw::c_void);
}
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn euidaccess(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eaccess(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn lseek64(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread64(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off64_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite64(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off64_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe2(
        __pipedes: *mut ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_current_dir_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup3(
        __fd: ::std::os::raw::c_int,
        __fd2: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvpe(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: ::std::os::raw::c_uint = 0;
pub const _PC_MAX_CANON: ::std::os::raw::c_uint = 1;
pub const _PC_MAX_INPUT: ::std::os::raw::c_uint = 2;
pub const _PC_NAME_MAX: ::std::os::raw::c_uint = 3;
pub const _PC_PATH_MAX: ::std::os::raw::c_uint = 4;
pub const _PC_PIPE_BUF: ::std::os::raw::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 6;
pub const _PC_NO_TRUNC: ::std::os::raw::c_uint = 7;
pub const _PC_VDISABLE: ::std::os::raw::c_uint = 8;
pub const _PC_SYNC_IO: ::std::os::raw::c_uint = 9;
pub const _PC_ASYNC_IO: ::std::os::raw::c_uint = 10;
pub const _PC_PRIO_IO: ::std::os::raw::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::std::os::raw::c_uint = 12;
pub const _PC_FILESIZEBITS: ::std::os::raw::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::std::os::raw::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::std::os::raw::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::std::os::raw::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::std::os::raw::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::std::os::raw::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::std::os::raw::c_uint = 19;
pub const _PC_2_SYMLINKS: ::std::os::raw::c_uint = 20;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: ::std::os::raw::c_uint = 0;
pub const _SC_CHILD_MAX: ::std::os::raw::c_uint = 1;
pub const _SC_CLK_TCK: ::std::os::raw::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::std::os::raw::c_uint = 3;
pub const _SC_OPEN_MAX: ::std::os::raw::c_uint = 4;
pub const _SC_STREAM_MAX: ::std::os::raw::c_uint = 5;
pub const _SC_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _SC_JOB_CONTROL: ::std::os::raw::c_uint = 7;
pub const _SC_SAVED_IDS: ::std::os::raw::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::std::os::raw::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 10;
pub const _SC_TIMERS: ::std::os::raw::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::std::os::raw::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 14;
pub const _SC_FSYNC: ::std::os::raw::c_uint = 15;
pub const _SC_MAPPED_FILES: ::std::os::raw::c_uint = 16;
pub const _SC_MEMLOCK: ::std::os::raw::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::std::os::raw::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::std::os::raw::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::std::os::raw::c_uint = 20;
pub const _SC_SEMAPHORES: ::std::os::raw::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 23;
pub const _SC_AIO_MAX: ::std::os::raw::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::std::os::raw::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::std::os::raw::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::std::os::raw::c_uint = 28;
pub const _SC_VERSION: ::std::os::raw::c_uint = 29;
pub const _SC_PAGESIZE: ::std::os::raw::c_uint = 30;
pub const _SC_RTSIG_MAX: ::std::os::raw::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::std::os::raw::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::std::os::raw::c_uint = 34;
pub const _SC_TIMER_MAX: ::std::os::raw::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::std::os::raw::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::std::os::raw::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::std::os::raw::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::std::os::raw::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::std::os::raw::c_uint = 42;
pub const _SC_LINE_MAX: ::std::os::raw::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::std::os::raw::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 45;
pub const _SC_2_VERSION: ::std::os::raw::c_uint = 46;
pub const _SC_2_C_BIND: ::std::os::raw::c_uint = 47;
pub const _SC_2_C_DEV: ::std::os::raw::c_uint = 48;
pub const _SC_2_FORT_DEV: ::std::os::raw::c_uint = 49;
pub const _SC_2_FORT_RUN: ::std::os::raw::c_uint = 50;
pub const _SC_2_SW_DEV: ::std::os::raw::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::std::os::raw::c_uint = 52;
pub const _SC_PII: ::std::os::raw::c_uint = 53;
pub const _SC_PII_XTI: ::std::os::raw::c_uint = 54;
pub const _SC_PII_SOCKET: ::std::os::raw::c_uint = 55;
pub const _SC_PII_INTERNET: ::std::os::raw::c_uint = 56;
pub const _SC_PII_OSI: ::std::os::raw::c_uint = 57;
pub const _SC_POLL: ::std::os::raw::c_uint = 58;
pub const _SC_SELECT: ::std::os::raw::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::std::os::raw::c_uint = 60;
pub const _SC_IOV_MAX: ::std::os::raw::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::std::os::raw::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::std::os::raw::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::std::os::raw::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::std::os::raw::c_uint = 64;
pub const _SC_PII_OSI_M: ::std::os::raw::c_uint = 65;
pub const _SC_T_IOV_MAX: ::std::os::raw::c_uint = 66;
pub const _SC_THREADS: ::std::os::raw::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::std::os::raw::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::std::os::raw::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::std::os::raw::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::std::os::raw::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::std::os::raw::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::std::os::raw::c_uint = 84;
pub const _SC_PHYS_PAGES: ::std::os::raw::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::std::os::raw::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::std::os::raw::c_uint = 87;
pub const _SC_PASS_MAX: ::std::os::raw::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::std::os::raw::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::std::os::raw::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::std::os::raw::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::std::os::raw::c_uint = 93;
pub const _SC_XOPEN_SHM: ::std::os::raw::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::std::os::raw::c_uint = 95;
pub const _SC_2_C_VERSION: ::std::os::raw::c_uint = 96;
pub const _SC_2_UPE: ::std::os::raw::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::std::os::raw::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::std::os::raw::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::std::os::raw::c_uint = 100;
pub const _SC_CHAR_BIT: ::std::os::raw::c_uint = 101;
pub const _SC_CHAR_MAX: ::std::os::raw::c_uint = 102;
pub const _SC_CHAR_MIN: ::std::os::raw::c_uint = 103;
pub const _SC_INT_MAX: ::std::os::raw::c_uint = 104;
pub const _SC_INT_MIN: ::std::os::raw::c_uint = 105;
pub const _SC_LONG_BIT: ::std::os::raw::c_uint = 106;
pub const _SC_WORD_BIT: ::std::os::raw::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::std::os::raw::c_uint = 108;
pub const _SC_NZERO: ::std::os::raw::c_uint = 109;
pub const _SC_SSIZE_MAX: ::std::os::raw::c_uint = 110;
pub const _SC_SCHAR_MAX: ::std::os::raw::c_uint = 111;
pub const _SC_SCHAR_MIN: ::std::os::raw::c_uint = 112;
pub const _SC_SHRT_MAX: ::std::os::raw::c_uint = 113;
pub const _SC_SHRT_MIN: ::std::os::raw::c_uint = 114;
pub const _SC_UCHAR_MAX: ::std::os::raw::c_uint = 115;
pub const _SC_UINT_MAX: ::std::os::raw::c_uint = 116;
pub const _SC_ULONG_MAX: ::std::os::raw::c_uint = 117;
pub const _SC_USHRT_MAX: ::std::os::raw::c_uint = 118;
pub const _SC_NL_ARGMAX: ::std::os::raw::c_uint = 119;
pub const _SC_NL_LANGMAX: ::std::os::raw::c_uint = 120;
pub const _SC_NL_MSGMAX: ::std::os::raw::c_uint = 121;
pub const _SC_NL_NMAX: ::std::os::raw::c_uint = 122;
pub const _SC_NL_SETMAX: ::std::os::raw::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::std::os::raw::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::std::os::raw::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::std::os::raw::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::std::os::raw::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::std::os::raw::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::std::os::raw::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::std::os::raw::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::std::os::raw::c_uint = 132;
pub const _SC_BARRIERS: ::std::os::raw::c_uint = 133;
pub const _SC_BASE: ::std::os::raw::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::std::os::raw::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::std::os::raw::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::std::os::raw::c_uint = 137;
pub const _SC_CPUTIME: ::std::os::raw::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::std::os::raw::c_uint = 139;
pub const _SC_DEVICE_IO: ::std::os::raw::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::std::os::raw::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::std::os::raw::c_uint = 142;
pub const _SC_FD_MGMT: ::std::os::raw::c_uint = 143;
pub const _SC_FIFO: ::std::os::raw::c_uint = 144;
pub const _SC_PIPE: ::std::os::raw::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::std::os::raw::c_uint = 146;
pub const _SC_FILE_LOCKING: ::std::os::raw::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::std::os::raw::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::std::os::raw::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::std::os::raw::c_uint = 151;
pub const _SC_NETWORKING: ::std::os::raw::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::std::os::raw::c_uint = 154;
pub const _SC_REGEXP: ::std::os::raw::c_uint = 155;
pub const _SC_REGEX_VERSION: ::std::os::raw::c_uint = 156;
pub const _SC_SHELL: ::std::os::raw::c_uint = 157;
pub const _SC_SIGNALS: ::std::os::raw::c_uint = 158;
pub const _SC_SPAWN: ::std::os::raw::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::std::os::raw::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::std::os::raw::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::std::os::raw::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::std::os::raw::c_uint = 163;
pub const _SC_TIMEOUTS: ::std::os::raw::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 165;
pub const _SC_USER_GROUPS: ::std::os::raw::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::std::os::raw::c_uint = 167;
pub const _SC_2_PBS: ::std::os::raw::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::std::os::raw::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::std::os::raw::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::std::os::raw::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::std::os::raw::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::std::os::raw::c_uint = 173;
pub const _SC_STREAMS: ::std::os::raw::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::std::os::raw::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::std::os::raw::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::std::os::raw::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::std::os::raw::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::std::os::raw::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::std::os::raw::c_uint = 180;
pub const _SC_TRACE: ::std::os::raw::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::std::os::raw::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::std::os::raw::c_uint = 183;
pub const _SC_TRACE_LOG: ::std::os::raw::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::std::os::raw::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::std::os::raw::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::std::os::raw::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::std::os::raw::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::std::os::raw::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::std::os::raw::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::std::os::raw::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::std::os::raw::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::std::os::raw::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::std::os::raw::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::std::os::raw::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::std::os::raw::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::std::os::raw::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::std::os::raw::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::std::os::raw::c_uint = 199;
pub const _SC_IPV6: ::std::os::raw::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::std::os::raw::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::std::os::raw::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::std::os::raw::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::std::os::raw::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::std::os::raw::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::std::os::raw::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::std::os::raw::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::std::os::raw::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::std::os::raw::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_uint = 248;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const _CS_PATH: ::std::os::raw::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::std::os::raw::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::std::os::raw::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::std::os::raw::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::std::os::raw::c_uint = 1001;
pub const _CS_LFS_LIBS: ::std::os::raw::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::std::os::raw::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::std::os::raw::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::std::os::raw::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::std::os::raw::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::std::os::raw::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1147;
pub const _CS_V6_ENV: ::std::os::raw::c_uint = 1148;
pub const _CS_V7_ENV: ::std::os::raw::c_uint = 1149;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn group_member(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getresuid(
        __ruid: *mut __uid_t,
        __euid: *mut __uid_t,
        __suid: *mut __uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getresgid(
        __rgid: *mut __gid_t,
        __egid: *mut __gid_t,
        __sgid: *mut __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setresuid(__ruid: __uid_t, __euid: __uid_t, __suid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setresgid(__rgid: __gid_t, __egid: __gid_t, __sgid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> __pid_t;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syncfs(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate64(
        __file: *const ::std::os::raw::c_char,
        __length: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate64(__fd: ::std::os::raw::c_int, __length: __off64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf64(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copy_file_range(
        __infd: ::std::os::raw::c_int,
        __pinoff: *mut __off64_t,
        __outfd: ::std::os::raw::c_int,
        __poutoff: *mut __off64_t,
        __length: size_t,
        __flags: ::std::os::raw::c_uint,
    ) -> ssize_t;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(__glibc_block: *mut ::std::os::raw::c_char, __edflag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn swab(
        __from: *const ::std::os::raw::c_void,
        __to: *mut ::std::os::raw::c_void,
        __n: ssize_t,
    );
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat64 {
    pub st_dev: __dev_t,
    pub st_ino: __ino64_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt64_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat64() {
    assert_eq!(
        ::std::mem::size_of::<stat64>(),
        144usize,
        concat!("Size of: ", stringify!(stat64))
    );
    assert_eq!(
        ::std::mem::align_of::<stat64>(),
        8usize,
        concat!("Alignment of ", stringify!(stat64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat64(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat64(__fd: ::std::os::raw::c_int, __buf: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat64(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat64,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat64(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn getumask() -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __lxstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstatat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstat64(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __stat_buf: *mut stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xstat64(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __lxstat64(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstatat64(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat64,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknod(
        __ver: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknodat(
        __ver: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFOpen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn VSIFClose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFSeek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFTell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn VSIRewind(arg1: *mut FILE);
}
extern "C" {
    pub fn VSIFFlush(arg1: *mut FILE);
}
extern "C" {
    pub fn VSIFRead(
        arg1: *mut ::std::os::raw::c_void,
        arg2: size_t,
        arg3: size_t,
        arg4: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn VSIFWrite(
        arg1: *const ::std::os::raw::c_void,
        arg2: size_t,
        arg3: size_t,
        arg4: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn VSIFGets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIFPuts(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFPrintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFGetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFPutc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIUngetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFEof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
pub type VSIStatBuf = stat;
extern "C" {
    pub fn VSIStat(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut VSIStatBuf,
    ) -> ::std::os::raw::c_int;
}
pub type vsi_l_offset = GUIntBig;
pub type VSILFILE = FILE;
extern "C" {
    pub fn VSIFOpenL(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut VSILFILE;
}
extern "C" {
    pub fn VSIFOpenExL(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut VSILFILE;
}
extern "C" {
    pub fn VSIFCloseL(arg1: *mut VSILFILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFSeekL(
        arg1: *mut VSILFILE,
        arg2: vsi_l_offset,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFTellL(arg1: *mut VSILFILE) -> vsi_l_offset;
}
extern "C" {
    pub fn VSIRewindL(arg1: *mut VSILFILE);
}
extern "C" {
    pub fn VSIFReadL(
        arg1: *mut ::std::os::raw::c_void,
        arg2: size_t,
        arg3: size_t,
        arg4: *mut VSILFILE,
    ) -> size_t;
}
extern "C" {
    pub fn VSIFReadMultiRangeL(
        nRanges: ::std::os::raw::c_int,
        ppData: *mut *mut ::std::os::raw::c_void,
        panOffsets: *const vsi_l_offset,
        panSizes: *const size_t,
        arg1: *mut VSILFILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFWriteL(
        arg1: *const ::std::os::raw::c_void,
        arg2: size_t,
        arg3: size_t,
        arg4: *mut VSILFILE,
    ) -> size_t;
}
extern "C" {
    pub fn VSIFEofL(arg1: *mut VSILFILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFTruncateL(arg1: *mut VSILFILE, arg2: vsi_l_offset) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFFlushL(arg1: *mut VSILFILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFPrintfL(
        arg1: *mut VSILFILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIFPutcL(arg1: ::std::os::raw::c_int, arg2: *mut VSILFILE) -> ::std::os::raw::c_int;
}
pub const VSIRangeStatus_VSI_RANGE_STATUS_UNKNOWN: VSIRangeStatus = 0;
pub const VSIRangeStatus_VSI_RANGE_STATUS_DATA: VSIRangeStatus = 1;
pub const VSIRangeStatus_VSI_RANGE_STATUS_HOLE: VSIRangeStatus = 2;
pub type VSIRangeStatus = ::std::os::raw::c_uint;
extern "C" {
    pub fn VSIFGetRangeStatusL(
        fp: *mut VSILFILE,
        nStart: vsi_l_offset,
        nLength: vsi_l_offset,
    ) -> VSIRangeStatus;
}
extern "C" {
    pub fn VSIIngestFile(
        fp: *mut VSILFILE,
        pszFilename: *const ::std::os::raw::c_char,
        ppabyRet: *mut *mut GByte,
        pnSize: *mut vsi_l_offset,
        nMaxSize: GIntBig,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIOverwriteFile(
        fpTarget: *mut VSILFILE,
        pszSourceFilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type VSIStatBufL = stat64;
extern "C" {
    pub fn VSIStatL(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut VSIStatBufL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIStatExL(
        pszFilename: *const ::std::os::raw::c_char,
        psStatBuf: *mut VSIStatBufL,
        nFlags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIIsCaseSensitiveFS(
        pszFilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSISupportsSparseFiles(pszPath: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIHasOptimizedReadMultiRange(
        pszPath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIGetActualURL(
        pszFilename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIGetSignedURL(
        pszFilename: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIGetFileSystemOptions(
        pszFilename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIGetFileSystemsPrefixes() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIFGetNativeFileDescriptorL(arg1: *mut VSILFILE) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIGetFileMetadata(
        pszFilename: *const ::std::os::raw::c_char,
        pszDomain: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSISetFileMetadata(
        pszFilename: *const ::std::os::raw::c_char,
        papszMetadata: CSLConstList,
        pszDomain: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSICalloc(arg1: size_t, arg2: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIMalloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIFree(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn VSIRealloc(
        arg1: *mut ::std::os::raw::c_void,
        arg2: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIStrdup(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIMallocAligned(nAlignment: size_t, nSize: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIMallocAlignedAuto(nSize: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIFreeAligned(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn VSIMallocAlignedAutoVerbose(
        nSize: size_t,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIMalloc2(nSize1: size_t, nSize2: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIMalloc3(
        nSize1: size_t,
        nSize2: size_t,
        nSize3: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIMallocVerbose(
        nSize: size_t,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIMalloc2Verbose(
        nSize1: size_t,
        nSize2: size_t,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIMalloc3Verbose(
        nSize1: size_t,
        nSize2: size_t,
        nSize3: size_t,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSICallocVerbose(
        nCount: size_t,
        nSize: size_t,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIReallocVerbose(
        pOldPtr: *mut ::std::os::raw::c_void,
        nNewSize: size_t,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn VSIStrdupVerbose(
        pszStr: *const ::std::os::raw::c_char,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLGetPhysicalRAM() -> GIntBig;
}
extern "C" {
    pub fn CPLGetUsablePhysicalRAM() -> GIntBig;
}
extern "C" {
    pub fn VSIReadDir(arg1: *const ::std::os::raw::c_char) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIReadDirRecursive(
        pszPath: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIReadDirEx(
        pszPath: *const ::std::os::raw::c_char,
        nMaxFiles: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VSIDIR {
    _unused: [u8; 0],
}
extern "C" {
    pub fn VSIOpenDir(
        pszPath: *const ::std::os::raw::c_char,
        nRecurseDepth: ::std::os::raw::c_int,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut VSIDIR;
}
#[repr(C)]
#[derive(Debug)]
pub struct VSIDIREntry {
    pub pszName: *mut ::std::os::raw::c_char,
    pub nMode: ::std::os::raw::c_int,
    pub nSize: vsi_l_offset,
    pub nMTime: GIntBig,
    pub bModeKnown: ::std::os::raw::c_char,
    pub bSizeKnown: ::std::os::raw::c_char,
    pub bMTimeKnown: ::std::os::raw::c_char,
    pub papszExtra: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VSIDIREntry() {
    assert_eq!(
        ::std::mem::size_of::<VSIDIREntry>(),
        48usize,
        concat!("Size of: ", stringify!(VSIDIREntry))
    );
    assert_eq!(
        ::std::mem::align_of::<VSIDIREntry>(),
        8usize,
        concat!("Alignment of ", stringify!(VSIDIREntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VSIDIREntry>())).pszName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIDIREntry),
            "::",
            stringify!(pszName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VSIDIREntry>())).nMode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIDIREntry),
            "::",
            stringify!(nMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VSIDIREntry>())).nSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIDIREntry),
            "::",
            stringify!(nSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VSIDIREntry>())).nMTime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIDIREntry),
            "::",
            stringify!(nMTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VSIDIREntry>())).bModeKnown as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIDIREntry),
            "::",
            stringify!(bModeKnown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VSIDIREntry>())).bSizeKnown as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIDIREntry),
            "::",
            stringify!(bSizeKnown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VSIDIREntry>())).bMTimeKnown as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIDIREntry),
            "::",
            stringify!(bMTimeKnown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VSIDIREntry>())).papszExtra as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIDIREntry),
            "::",
            stringify!(papszExtra)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11VSIDIREntryC1Ev"]
    pub fn VSIDIREntry_VSIDIREntry(this: *mut VSIDIREntry);
}
extern "C" {
    #[link_name = "\u{1}_ZN11VSIDIREntryC1ERKS_"]
    pub fn VSIDIREntry_VSIDIREntry1(this: *mut VSIDIREntry, arg1: *const VSIDIREntry);
}
extern "C" {
    #[link_name = "\u{1}_ZN11VSIDIREntryD1Ev"]
    pub fn VSIDIREntry_VSIDIREntry_destructor(this: *mut VSIDIREntry);
}
impl VSIDIREntry {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        VSIDIREntry_VSIDIREntry(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const VSIDIREntry) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        VSIDIREntry_VSIDIREntry1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        VSIDIREntry_VSIDIREntry_destructor(self)
    }
}
extern "C" {
    pub fn VSIGetNextDirEntry(dir: *mut VSIDIR) -> *const VSIDIREntry;
}
extern "C" {
    pub fn VSICloseDir(dir: *mut VSIDIR);
}
extern "C" {
    pub fn VSIMkdir(
        pszPathname: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIMkdirRecursive(
        pszPathname: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIRmdir(pszDirname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIRmdirRecursive(pszDirname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIUnlink(pszFilename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIUnlinkBatch(papszFiles: CSLConstList) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIRename(
        oldpath: *const ::std::os::raw::c_char,
        newpath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSISync(
        pszSource: *const ::std::os::raw::c_char,
        pszTarget: *const ::std::os::raw::c_char,
        papszOptions: *const *const ::std::os::raw::c_char,
        pProgressFunc: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
        ppapszOutputs: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSIStrerror(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIGetDiskFreeSpace(pszDirname: *const ::std::os::raw::c_char) -> GIntBig;
}
extern "C" {
    pub fn VSINetworkStatsReset();
}
extern "C" {
    pub fn VSINetworkStatsGetAsSerializedJSON(
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIInstallMemFileHandler();
}
extern "C" {
    pub fn VSIInstallLargeFileHandler();
}
extern "C" {
    pub fn VSIInstallSubFileHandler();
}
extern "C" {
    pub fn VSIInstallCurlFileHandler();
}
extern "C" {
    pub fn VSICurlClearCache();
}
extern "C" {
    pub fn VSICurlPartialClearCache(pszFilenamePrefix: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn VSIInstallCurlStreamingFileHandler();
}
extern "C" {
    pub fn VSIInstallS3FileHandler();
}
extern "C" {
    pub fn VSIInstallS3StreamingFileHandler();
}
extern "C" {
    pub fn VSIInstallGSFileHandler();
}
extern "C" {
    pub fn VSIInstallGSStreamingFileHandler();
}
extern "C" {
    pub fn VSIInstallAzureFileHandler();
}
extern "C" {
    pub fn VSIInstallAzureStreamingFileHandler();
}
extern "C" {
    pub fn VSIInstallOSSFileHandler();
}
extern "C" {
    pub fn VSIInstallOSSStreamingFileHandler();
}
extern "C" {
    pub fn VSIInstallSwiftFileHandler();
}
extern "C" {
    pub fn VSIInstallSwiftStreamingFileHandler();
}
extern "C" {
    pub fn VSIInstallGZipFileHandler();
}
extern "C" {
    pub fn VSIInstallZipFileHandler();
}
extern "C" {
    pub fn VSIInstallStdinHandler();
}
extern "C" {
    pub fn VSIInstallHdfsHandler();
}
extern "C" {
    pub fn VSIInstallWebHdfsHandler();
}
extern "C" {
    pub fn VSIInstallStdoutHandler();
}
extern "C" {
    pub fn VSIInstallSparseFileHandler();
}
extern "C" {
    pub fn VSIInstallTarFileHandler();
}
extern "C" {
    pub fn VSIInstallCryptFileHandler();
}
extern "C" {
    pub fn VSISetCryptKey(pabyKey: *const GByte, nKeySize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn VSICleanupFileManager();
}
extern "C" {
    pub fn VSIFileFromMemBuffer(
        pszFilename: *const ::std::os::raw::c_char,
        pabyData: *mut GByte,
        nDataLength: vsi_l_offset,
        bTakeOwnership: ::std::os::raw::c_int,
    ) -> *mut VSILFILE;
}
extern "C" {
    pub fn VSIGetMemFileBuffer(
        pszFilename: *const ::std::os::raw::c_char,
        pnDataLength: *mut vsi_l_offset,
        bUnlinkAndSeize: ::std::os::raw::c_int,
    ) -> *mut GByte;
}
pub type VSIWriteFunction = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *const ::std::os::raw::c_void,
        size: size_t,
        nmemb: size_t,
        stream: *mut FILE,
    ) -> size_t,
>;
extern "C" {
    pub fn VSIStdoutSetRedirection(pFct: VSIWriteFunction, stream: *mut FILE);
}
pub type VSIFilesystemPluginStatCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pszFilename: *const ::std::os::raw::c_char,
        pStatBuf: *mut VSIStatBufL,
        nFlags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type VSIFilesystemPluginUnlinkCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pszFilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type VSIFilesystemPluginRenameCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        oldpath: *const ::std::os::raw::c_char,
        newpath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type VSIFilesystemPluginMkdirCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pszDirname: *const ::std::os::raw::c_char,
        nMode: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int,
>;
pub type VSIFilesystemPluginRmdirCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pszDirname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type VSIFilesystemPluginReadDirCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pszDirname: *const ::std::os::raw::c_char,
        nMaxFiles: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char,
>;
pub type VSIFilesystemPluginOpenCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pszFilename: *const ::std::os::raw::c_char,
        pszAccess: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type VSIFilesystemPluginTellCallback =
    ::std::option::Option<unsafe extern "C" fn(pFile: *mut ::std::os::raw::c_void) -> vsi_l_offset>;
pub type VSIFilesystemPluginSeekCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pFile: *mut ::std::os::raw::c_void,
        nOffset: vsi_l_offset,
        nWhence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type VSIFilesystemPluginReadCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pFile: *mut ::std::os::raw::c_void,
        pBuffer: *mut ::std::os::raw::c_void,
        nSize: size_t,
        nCount: size_t,
    ) -> size_t,
>;
pub type VSIFilesystemPluginReadMultiRangeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pFile: *mut ::std::os::raw::c_void,
        nRanges: ::std::os::raw::c_int,
        ppData: *mut *mut ::std::os::raw::c_void,
        panOffsets: *const vsi_l_offset,
        panSizes: *const size_t,
    ) -> ::std::os::raw::c_int,
>;
pub type VSIFilesystemPluginGetRangeStatusCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pFile: *mut ::std::os::raw::c_void,
        nOffset: vsi_l_offset,
        nLength: vsi_l_offset,
    ) -> VSIRangeStatus,
>;
pub type VSIFilesystemPluginEofCallback = ::std::option::Option<
    unsafe extern "C" fn(pFile: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type VSIFilesystemPluginWriteCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pFile: *mut ::std::os::raw::c_void,
        pBuffer: *const ::std::os::raw::c_void,
        nSize: size_t,
        nCount: size_t,
    ) -> size_t,
>;
pub type VSIFilesystemPluginFlushCallback = ::std::option::Option<
    unsafe extern "C" fn(pFile: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type VSIFilesystemPluginTruncateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pFile: *mut ::std::os::raw::c_void,
        nNewSize: vsi_l_offset,
    ) -> ::std::os::raw::c_int,
>;
pub type VSIFilesystemPluginCloseCallback = ::std::option::Option<
    unsafe extern "C" fn(pFile: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VSIFilesystemPluginCallbacksStruct {
    pub pUserData: *mut ::std::os::raw::c_void,
    pub stat: VSIFilesystemPluginStatCallback,
    pub unlink: VSIFilesystemPluginUnlinkCallback,
    pub rename: VSIFilesystemPluginRenameCallback,
    pub mkdir: VSIFilesystemPluginMkdirCallback,
    pub rmdir: VSIFilesystemPluginRmdirCallback,
    pub read_dir: VSIFilesystemPluginReadDirCallback,
    pub open: VSIFilesystemPluginOpenCallback,
    pub tell: VSIFilesystemPluginTellCallback,
    pub seek: VSIFilesystemPluginSeekCallback,
    pub read: VSIFilesystemPluginReadCallback,
    pub read_multi_range: VSIFilesystemPluginReadMultiRangeCallback,
    pub get_range_status: VSIFilesystemPluginGetRangeStatusCallback,
    pub eof: VSIFilesystemPluginEofCallback,
    pub write: VSIFilesystemPluginWriteCallback,
    pub flush: VSIFilesystemPluginFlushCallback,
    pub truncate: VSIFilesystemPluginTruncateCallback,
    pub close: VSIFilesystemPluginCloseCallback,
}
#[test]
fn bindgen_test_layout_VSIFilesystemPluginCallbacksStruct() {
    assert_eq!(
        ::std::mem::size_of::<VSIFilesystemPluginCallbacksStruct>(),
        144usize,
        concat!("Size of: ", stringify!(VSIFilesystemPluginCallbacksStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<VSIFilesystemPluginCallbacksStruct>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VSIFilesystemPluginCallbacksStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).pUserData as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).stat as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).unlink as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).rename as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).mkdir as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).rmdir as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(rmdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).read_dir as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(read_dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).open as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).tell as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).seek as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).read as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).read_multi_range
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(read_multi_range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).get_range_status
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(get_range_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).eof as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).write as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).flush as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).truncate as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VSIFilesystemPluginCallbacksStruct>())).close as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VSIFilesystemPluginCallbacksStruct),
            "::",
            stringify!(close)
        )
    );
}
extern "C" {
    pub fn VSIAllocFilesystemPluginCallbacksStruct() -> *mut VSIFilesystemPluginCallbacksStruct;
}
extern "C" {
    pub fn VSIFreeFilesystemPluginCallbacksStruct(poCb: *mut VSIFilesystemPluginCallbacksStruct);
}
extern "C" {
    pub fn VSIInstallPluginHandler(
        pszPrefix: *const ::std::os::raw::c_char,
        poCb: *const VSIFilesystemPluginCallbacksStruct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn VSITime(arg1: *mut ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn VSICTime(arg1: ::std::os::raw::c_ulong) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn VSIGMTime(pnTime: *const time_t, poBrokenTime: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn VSILocalTime(pnTime: *const time_t, poBrokenTime: *mut tm) -> *mut tm;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const CPLErr_CE_None: CPLErr = 0;
pub const CPLErr_CE_Debug: CPLErr = 1;
pub const CPLErr_CE_Warning: CPLErr = 2;
pub const CPLErr_CE_Failure: CPLErr = 3;
pub const CPLErr_CE_Fatal: CPLErr = 4;
pub type CPLErr = ::std::os::raw::c_uint;
pub type CPLErrorNum = ::std::os::raw::c_int;
extern "C" {
    pub fn CPLError(
        eErrClass: CPLErr,
        err_no: CPLErrorNum,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn CPLErrorV(
        arg1: CPLErr,
        arg2: CPLErrorNum,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn CPLEmergencyError(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn CPLErrorReset();
}
extern "C" {
    pub fn CPLGetLastErrorNo() -> CPLErrorNum;
}
extern "C" {
    pub fn CPLGetLastErrorType() -> CPLErr;
}
extern "C" {
    pub fn CPLGetLastErrorMsg() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLGetErrorCounter() -> GUInt32;
}
extern "C" {
    pub fn CPLGetErrorHandlerUserData() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLErrorSetState(
        eErrClass: CPLErr,
        err_no: CPLErrorNum,
        pszMsg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn CPLCleanupErrorMutex();
}
pub type CPLErrorHandler = ::std::option::Option<
    unsafe extern "C" fn(arg1: CPLErr, arg2: CPLErrorNum, arg3: *const ::std::os::raw::c_char),
>;
extern "C" {
    pub fn CPLLoggingErrorHandler(
        arg1: CPLErr,
        arg2: CPLErrorNum,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn CPLDefaultErrorHandler(
        arg1: CPLErr,
        arg2: CPLErrorNum,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn CPLQuietErrorHandler(
        arg1: CPLErr,
        arg2: CPLErrorNum,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn CPLTurnFailureIntoWarning(bOn: ::std::os::raw::c_int);
}
extern "C" {
    pub fn CPLSetErrorHandler(arg1: CPLErrorHandler) -> CPLErrorHandler;
}
extern "C" {
    pub fn CPLSetErrorHandlerEx(
        arg1: CPLErrorHandler,
        arg2: *mut ::std::os::raw::c_void,
    ) -> CPLErrorHandler;
}
extern "C" {
    pub fn CPLPushErrorHandler(arg1: CPLErrorHandler);
}
extern "C" {
    pub fn CPLPushErrorHandlerEx(arg1: CPLErrorHandler, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CPLSetCurrentErrorHandlerCatchDebug(bCatchDebug: ::std::os::raw::c_int);
}
extern "C" {
    pub fn CPLPopErrorHandler();
}
extern "C" {
    pub fn CPLDebug(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn _CPLAssert(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
pub type wint_t = ::std::os::raw::c_uint;
pub type mbstate_t = __mbstate_t;
extern "C" {
    pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: size_t) -> *mut u32;
}
extern "C" {
    pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: size_t) -> *mut u32;
}
extern "C" {
    pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(__s1: *const u32, __s2: *const u32, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(__s1: *const u32, __s2: *const u32, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: size_t) -> size_t;
}
extern "C" {
    pub fn wcscoll_l(__s1: *const u32, __s2: *const u32, __loc: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(__s1: *mut u32, __s2: *const u32, __n: size_t, __loc: locale_t) -> size_t;
}
extern "C" {
    pub fn wcsdup(__s: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> size_t;
}
extern "C" {
    pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> size_t;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut *mut u32) -> *mut u32;
}
extern "C" {
    pub fn wcslen(__s: *const u32) -> size_t;
}
extern "C" {
    pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsnlen(__s: *const u32, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn wmemchr(__s: *const u32, __c: u32, __n: size_t) -> *mut u32;
}
extern "C" {
    pub fn wmemcmp(__s1: *const u32, __s2: *const u32, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: size_t) -> *mut u32;
}
extern "C" {
    pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: size_t) -> *mut u32;
}
extern "C" {
    pub fn wmemset(__s: *mut u32, __c: u32, __n: size_t) -> *mut u32;
}
extern "C" {
    pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: size_t) -> *mut u32;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
        __p: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: u32, __ps: *mut mbstate_t) -> size_t;
}
extern "C" {
    pub fn __mbrlen(
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: size_t, __ps: *mut mbstate_t) -> size_t;
}
extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: size_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __nwc: size_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcwidth(__c: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(__s: *const u32, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> u128;
}
extern "C" {
    pub fn wcstof32(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float32;
}
extern "C" {
    pub fn wcstof64(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float64;
}
extern "C" {
    pub fn wcstof32x(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float32x;
}
extern "C" {
    pub fn wcstof64x(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float64x;
}
extern "C" {
    pub fn wcstol(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstoq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstouq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstol_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstod_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f64;
}
extern "C" {
    pub fn wcstof_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> u128;
}
extern "C" {
    pub fn wcstof32_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float32;
}
extern "C" {
    pub fn wcstof64_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float64;
}
extern "C" {
    pub fn wcstof32x_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float32x;
}
extern "C" {
    pub fn wcstof64x_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float64x;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: size_t) -> *mut u32;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut u32, __sizeloc: *mut size_t) -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(__s: *mut u32, __n: size_t, __format: *const u32, ...)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        __s: *mut u32,
        __n: size_t,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        __s: *const u32,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: u32) -> wint_t;
}
extern "C" {
    pub fn fgetws(__ws: *mut u32, __n: ::std::os::raw::c_int, __stream: *mut __FILE) -> *mut u32;
}
extern "C" {
    pub fn fputws(__ws: *const u32, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar_unlocked() -> wint_t;
}
extern "C" {
    pub fn fgetwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn fputwc_unlocked(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc_unlocked(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar_unlocked(__wc: u32) -> wint_t;
}
extern "C" {
    pub fn fgetws_unlocked(
        __ws: *mut u32,
        __n: ::std::os::raw::c_int,
        __stream: *mut __FILE,
    ) -> *mut u32;
}
extern "C" {
    pub fn fputws_unlocked(__ws: *const u32, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime(
        __s: *mut u32,
        __maxsize: size_t,
        __format: *const u32,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn wcsftime_l(
        __s: *mut u32,
        __maxsize: size_t,
        __format: *const u32,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cxxabiv1___cxa_refcounted_exception {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}__cxa_allocate_exception"]
    pub fn __cxxabiv1___cxa_allocate_exception(arg1: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__cxa_free_exception"]
    pub fn __cxxabiv1___cxa_free_exception(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__cxa_init_primary_exception"]
    pub fn __cxxabiv1___cxa_init_primary_exception(
        object: *mut ::std::os::raw::c_void,
        tinfo: *mut std_type_info,
        dest: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut __cxxabiv1___cxa_refcounted_exception;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cxxabiv1___class_type_info {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct __cxxabiv1___forced_unwind__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct __cxxabiv1___forced_unwind {
    pub vtable_: *const __cxxabiv1___forced_unwind__bindgen_vtable,
}
#[test]
fn bindgen_test_layout___cxxabiv1___forced_unwind() {
    assert_eq!(
        ::std::mem::size_of::<__cxxabiv1___forced_unwind>(),
        8usize,
        concat!("Size of: ", stringify!(__cxxabiv1___forced_unwind))
    );
    assert_eq!(
        ::std::mem::align_of::<__cxxabiv1___forced_unwind>(),
        8usize,
        concat!("Alignment of ", stringify!(__cxxabiv1___forced_unwind))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
extern "C" {
    pub fn clone(
        __fn: ::std::option::Option<
            unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        __child_stack: *mut ::std::os::raw::c_void,
        __flags: ::std::os::raw::c_int,
        __arg: *mut ::std::os::raw::c_void,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getcpu() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setns(
        __fd: ::std::os::raw::c_int,
        __nstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: size_t, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: size_t) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setaffinity(
        __pid: __pid_t,
        __cpusetsize: size_t,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getaffinity(
        __pid: __pid_t,
        __cpusetsize: size_t,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
pub const PTHREAD_CREATE_JOINABLE: ::std::os::raw::c_uint = 0;
pub const PTHREAD_CREATE_DETACHED: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: ::std::os::raw::c_uint = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: ::std::os::raw::c_uint = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: ::std::os::raw::c_uint = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: ::std::os::raw::c_uint = 3;
pub const PTHREAD_MUTEX_NORMAL: ::std::os::raw::c_uint = 0;
pub const PTHREAD_MUTEX_RECURSIVE: ::std::os::raw::c_uint = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: ::std::os::raw::c_uint = 2;
pub const PTHREAD_MUTEX_DEFAULT: ::std::os::raw::c_uint = 0;
pub const PTHREAD_MUTEX_FAST_NP: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: ::std::os::raw::c_uint = 0;
pub const PTHREAD_MUTEX_STALLED_NP: ::std::os::raw::c_uint = 0;
pub const PTHREAD_MUTEX_ROBUST: ::std::os::raw::c_uint = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: ::std::os::raw::c_uint = 0;
pub const PTHREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 1;
pub const PTHREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: ::std::os::raw::c_uint = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: ::std::os::raw::c_uint = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: ::std::os::raw::c_uint = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: ::std::os::raw::c_uint = 0;
pub const PTHREAD_EXPLICIT_SCHED: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: ::std::os::raw::c_uint = 0;
pub const PTHREAD_SCOPE_PROCESS: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: ::std::os::raw::c_uint = 0;
pub const PTHREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: ::std::os::raw::c_uint = 0;
pub const PTHREAD_CANCEL_DISABLE: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: ::std::os::raw::c_uint = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_tryjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_timedjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setaffinity_np(
        __attr: *mut pthread_attr_t,
        __cpusetsize: size_t,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getaffinity_np(
        __attr: *const pthread_attr_t,
        __cpusetsize: size_t,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_default_np(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setattr_default_np(__attr: *const pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_np(
        __th: pthread_t,
        __attr: *mut pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        __target_thread: pthread_t,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(
        __target_thread: pthread_t,
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setaffinity_np(
        __th: pthread_t,
        __cpusetsize: size_t,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getaffinity_np(
        __th: pthread_t,
        __cpusetsize: size_t,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        104usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_cleanup_class {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_class() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_class>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_class))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_class>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_class))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_routine as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cleanup_class>())).__do_it as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_type as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__cancel_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent_np(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust_np(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust_np(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type __gthread_t = pthread_t;
pub type __gthread_key_t = pthread_key_t;
pub type __gthread_once_t = pthread_once_t;
pub type __gthread_mutex_t = pthread_mutex_t;
pub type __gthread_recursive_mutex_t = pthread_mutex_t;
pub type __gthread_cond_t = pthread_cond_t;
pub type __gthread_time_t = timespec;
pub type _Atomic_word = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct CPLErrorHandlerPusher {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_CPLErrorHandlerPusher() {
    assert_eq!(
        ::std::mem::size_of::<CPLErrorHandlerPusher>(),
        1usize,
        concat!("Size of: ", stringify!(CPLErrorHandlerPusher))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLErrorHandlerPusher>(),
        1usize,
        concat!("Alignment of ", stringify!(CPLErrorHandlerPusher))
    );
}
#[repr(C)]
pub struct CPLErrorStateBackuper {
    pub m_nLastErrorNum: CPLErrorNum,
    pub m_nLastErrorType: CPLErr,
    pub m_osLastErrorMsg: std_string,
}
#[test]
fn bindgen_test_layout_CPLErrorStateBackuper() {
    assert_eq!(
        ::std::mem::size_of::<CPLErrorStateBackuper>(),
        40usize,
        concat!("Size of: ", stringify!(CPLErrorStateBackuper))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLErrorStateBackuper>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLErrorStateBackuper))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CPLErrorStateBackuper>())).m_nLastErrorNum as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLErrorStateBackuper),
            "::",
            stringify!(m_nLastErrorNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CPLErrorStateBackuper>())).m_nLastErrorType as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLErrorStateBackuper),
            "::",
            stringify!(m_nLastErrorType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CPLErrorStateBackuper>())).m_osLastErrorMsg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLErrorStateBackuper),
            "::",
            stringify!(m_osLastErrorMsg)
        )
    );
}
extern "C" {
    pub fn CPLVerifyConfiguration();
}
extern "C" {
    pub fn CPLGetConfigOption(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLGetThreadLocalConfigOption(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLSetConfigOption(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn CPLSetThreadLocalConfigOption(
        pszKey: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn CPLFreeConfig();
}
extern "C" {
    pub fn CPLGetConfigOptions() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLSetConfigOptions(papszConfigOptions: *const *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn CPLGetThreadLocalConfigOptions() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLSetThreadLocalConfigOptions(papszConfigOptions: *const *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn CPLMalloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLCalloc(arg1: size_t, arg2: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLRealloc(
        arg1: *mut ::std::os::raw::c_void,
        arg2: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLStrdup(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLStrlwr(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLFGets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLReadLine(arg1: *mut FILE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLReadLineL(arg1: *mut VSILFILE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLReadLine2L(
        arg1: *mut VSILFILE,
        arg2: ::std::os::raw::c_int,
        arg3: CSLConstList,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLReadLine3L(
        arg1: *mut VSILFILE,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: CSLConstList,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLAtof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn CPLAtofDelim(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn CPLStrtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn CPLStrtodDelim(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn CPLStrtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn CPLStrtofDelim(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn CPLAtofM(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn CPLScanString(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLScanDouble(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn CPLScanLong(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn CPLScanULong(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn CPLScanUIntBig(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> GUIntBig;
}
extern "C" {
    pub fn CPLAtoGIntBig(pszString: *const ::std::os::raw::c_char) -> GIntBig;
}
extern "C" {
    pub fn CPLAtoGIntBigEx(
        pszString: *const ::std::os::raw::c_char,
        bWarn: ::std::os::raw::c_int,
        pbOverflow: *mut ::std::os::raw::c_int,
    ) -> GIntBig;
}
extern "C" {
    pub fn CPLScanPointer(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLPrintString(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLPrintStringFill(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLPrintInt32(
        arg1: *mut ::std::os::raw::c_char,
        arg2: GInt32,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLPrintUIntBig(
        arg1: *mut ::std::os::raw::c_char,
        arg2: GUIntBig,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLPrintDouble(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: f64,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLPrintTime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLPrintPointer(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLGetSymbol(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLGetExecPath(
        pszPathBuf: *mut ::std::os::raw::c_char,
        nMaxLength: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLGetPath(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLGetDirname(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLGetFilename(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLGetBasename(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLGetExtension(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLGetCurrentDir() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLFormFilename(
        pszPath: *const ::std::os::raw::c_char,
        pszBasename: *const ::std::os::raw::c_char,
        pszExtension: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLFormCIFilename(
        pszPath: *const ::std::os::raw::c_char,
        pszBasename: *const ::std::os::raw::c_char,
        pszExtension: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLResetExtension(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLProjectRelativeFilename(
        pszProjectDir: *const ::std::os::raw::c_char,
        pszSecondaryFilename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLIsFilenameRelative(
        pszFilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLExtractRelativePath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLCleanTrailingSlash(
        arg1: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLCorrespondingPaths(
        pszOldFilename: *const ::std::os::raw::c_char,
        pszNewFilename: *const ::std::os::raw::c_char,
        papszFileList: *mut *mut ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLCheckForFile(
        pszFilename: *mut ::std::os::raw::c_char,
        papszSiblingList: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLGenerateTempFilename(
        pszStem: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLExpandTilde(
        pszFilename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLGetHomeDir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLLaunderForFilename(
        pszName: *const ::std::os::raw::c_char,
        pszOutputPath: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
pub type CPLFileFinder = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    pub fn CPLFindFile(
        pszClass: *const ::std::os::raw::c_char,
        pszBasename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLDefaultFindFile(
        pszClass: *const ::std::os::raw::c_char,
        pszBasename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLPushFileFinder(pfnFinder: CPLFileFinder);
}
extern "C" {
    pub fn CPLPopFileFinder() -> CPLFileFinder;
}
extern "C" {
    pub fn CPLPushFinderLocation(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn CPLPopFinderLocation();
}
extern "C" {
    pub fn CPLFinderClean();
}
extern "C" {
    pub fn CPLStat(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut VSIStatBuf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPLSharedFileInfo {
    pub fp: *mut FILE,
    pub nRefCount: ::std::os::raw::c_int,
    pub bLarge: ::std::os::raw::c_int,
    pub pszFilename: *mut ::std::os::raw::c_char,
    pub pszAccess: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CPLSharedFileInfo() {
    assert_eq!(
        ::std::mem::size_of::<CPLSharedFileInfo>(),
        32usize,
        concat!("Size of: ", stringify!(CPLSharedFileInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLSharedFileInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLSharedFileInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLSharedFileInfo>())).fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLSharedFileInfo),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLSharedFileInfo>())).nRefCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLSharedFileInfo),
            "::",
            stringify!(nRefCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLSharedFileInfo>())).bLarge as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLSharedFileInfo),
            "::",
            stringify!(bLarge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLSharedFileInfo>())).pszFilename as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLSharedFileInfo),
            "::",
            stringify!(pszFilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLSharedFileInfo>())).pszAccess as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLSharedFileInfo),
            "::",
            stringify!(pszAccess)
        )
    );
}
extern "C" {
    pub fn CPLOpenShared(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn CPLCloseShared(arg1: *mut FILE);
}
extern "C" {
    pub fn CPLGetSharedList(arg1: *mut ::std::os::raw::c_int) -> *mut CPLSharedFileInfo;
}
extern "C" {
    pub fn CPLDumpSharedList(arg1: *mut FILE);
}
extern "C" {
    pub fn CPLCleanupSharedFileMutex();
}
extern "C" {
    pub fn CPLDMSToDec(is: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn CPLDecToDMS(
        dfAngle: f64,
        pszAxis: *const ::std::os::raw::c_char,
        nPrecision: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLPackedDMSToDec(arg1: f64) -> f64;
}
extern "C" {
    pub fn CPLDecToPackedDMS(dfDec: f64) -> f64;
}
extern "C" {
    pub fn CPLStringToComplex(
        pszString: *const ::std::os::raw::c_char,
        pdfReal: *mut f64,
        pdfImag: *mut f64,
    );
}
extern "C" {
    pub fn CPLUnlinkTree(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLCopyFile(
        pszNewPath: *const ::std::os::raw::c_char,
        pszOldPath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLCopyTree(
        pszNewPath: *const ::std::os::raw::c_char,
        pszOldPath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLMoveFile(
        pszNewPath: *const ::std::os::raw::c_char,
        pszOldPath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLSymlink(
        pszOldPath: *const ::std::os::raw::c_char,
        pszNewPath: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLCreateZip(
        pszZipFilename: *const ::std::os::raw::c_char,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLCreateFileInZip(
        hZip: *mut ::std::os::raw::c_void,
        pszFilename: *const ::std::os::raw::c_char,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> CPLErr;
}
extern "C" {
    pub fn CPLWriteFileInZip(
        hZip: *mut ::std::os::raw::c_void,
        pBuffer: *const ::std::os::raw::c_void,
        nBufferSize: ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn CPLCloseFileInZip(hZip: *mut ::std::os::raw::c_void) -> CPLErr;
}
extern "C" {
    pub fn CPLCloseZip(hZip: *mut ::std::os::raw::c_void) -> CPLErr;
}
extern "C" {
    pub fn CPLZLibDeflate(
        ptr: *const ::std::os::raw::c_void,
        nBytes: size_t,
        nLevel: ::std::os::raw::c_int,
        outptr: *mut ::std::os::raw::c_void,
        nOutAvailableBytes: size_t,
        pnOutBytes: *mut size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLZLibInflate(
        ptr: *const ::std::os::raw::c_void,
        nBytes: size_t,
        outptr: *mut ::std::os::raw::c_void,
        nOutAvailableBytes: size_t,
        pnOutBytes: *mut size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLValidateXML(
        pszXMLFilename: *const ::std::os::raw::c_char,
        pszXSDFilename: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLsetlocale(
        category: ::std::os::raw::c_int,
        locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLCleanupSetlocaleMutex();
}
extern "C" {
    pub fn CPLIsPowerOfTwo(i: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct CPLLocaleC {
    pub pszOldLocale: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CPLLocaleC() {
    assert_eq!(
        ::std::mem::size_of::<CPLLocaleC>(),
        8usize,
        concat!("Size of: ", stringify!(CPLLocaleC))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLLocaleC>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLLocaleC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLLocaleC>())).pszOldLocale as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLLocaleC),
            "::",
            stringify!(pszOldLocale)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10CPLLocaleCC1Ev"]
    pub fn CPLLocaleC_CPLLocaleC(this: *mut CPLLocaleC);
}
extern "C" {
    #[link_name = "\u{1}_ZN10CPLLocaleCD1Ev"]
    pub fn CPLLocaleC_CPLLocaleC_destructor(this: *mut CPLLocaleC);
}
impl CPLLocaleC {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLLocaleC_CPLLocaleC(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        CPLLocaleC_CPLLocaleC_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPLThreadLocaleCPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct CPLThreadLocaleC {
    pub m_private: *mut CPLThreadLocaleCPrivate,
}
#[test]
fn bindgen_test_layout_CPLThreadLocaleC() {
    assert_eq!(
        ::std::mem::size_of::<CPLThreadLocaleC>(),
        8usize,
        concat!("Size of: ", stringify!(CPLThreadLocaleC))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLThreadLocaleC>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLThreadLocaleC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLThreadLocaleC>())).m_private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLThreadLocaleC),
            "::",
            stringify!(m_private)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16CPLThreadLocaleCC1Ev"]
    pub fn CPLThreadLocaleC_CPLThreadLocaleC(this: *mut CPLThreadLocaleC);
}
extern "C" {
    #[link_name = "\u{1}_ZN16CPLThreadLocaleCD1Ev"]
    pub fn CPLThreadLocaleC_CPLThreadLocaleC_destructor(this: *mut CPLThreadLocaleC);
}
impl CPLThreadLocaleC {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLThreadLocaleC_CPLThreadLocaleC(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        CPLThreadLocaleC_CPLThreadLocaleC_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct CPLConfigOptionSetter {
    pub m_pszKey: *mut ::std::os::raw::c_char,
    pub m_pszOldValue: *mut ::std::os::raw::c_char,
    pub m_bRestoreOldValue: bool,
}
#[test]
fn bindgen_test_layout_CPLConfigOptionSetter() {
    assert_eq!(
        ::std::mem::size_of::<CPLConfigOptionSetter>(),
        24usize,
        concat!("Size of: ", stringify!(CPLConfigOptionSetter))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLConfigOptionSetter>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLConfigOptionSetter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLConfigOptionSetter>())).m_pszKey as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLConfigOptionSetter),
            "::",
            stringify!(m_pszKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CPLConfigOptionSetter>())).m_pszOldValue as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLConfigOptionSetter),
            "::",
            stringify!(m_pszOldValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CPLConfigOptionSetter>())).m_bRestoreOldValue as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLConfigOptionSetter),
            "::",
            stringify!(m_bRestoreOldValue)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21CPLConfigOptionSetterC1EPKcS1_b"]
    pub fn CPLConfigOptionSetter_CPLConfigOptionSetter(
        this: *mut CPLConfigOptionSetter,
        pszKey: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
        bSetOnlyIfUndefined: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21CPLConfigOptionSetterD1Ev"]
    pub fn CPLConfigOptionSetter_CPLConfigOptionSetter_destructor(this: *mut CPLConfigOptionSetter);
}
impl CPLConfigOptionSetter {
    #[inline]
    pub unsafe fn new(
        pszKey: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
        bSetOnlyIfUndefined: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLConfigOptionSetter_CPLConfigOptionSetter(
            __bindgen_tmp.as_mut_ptr(),
            pszKey,
            pszValue,
            bSetOnlyIfUndefined,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        CPLConfigOptionSetter_CPLConfigOptionSetter_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPLVirtualMem {
    _unused: [u8; 0],
}
pub type CPLVirtualMemCachePageCbk = ::std::option::Option<
    unsafe extern "C" fn(
        ctxt: *mut CPLVirtualMem,
        nOffset: size_t,
        pPageToFill: *mut ::std::os::raw::c_void,
        nToFill: size_t,
        pUserData: *mut ::std::os::raw::c_void,
    ),
>;
pub type CPLVirtualMemUnCachePageCbk = ::std::option::Option<
    unsafe extern "C" fn(
        ctxt: *mut CPLVirtualMem,
        nOffset: size_t,
        pPageToBeEvicted: *const ::std::os::raw::c_void,
        nToBeEvicted: size_t,
        pUserData: *mut ::std::os::raw::c_void,
    ),
>;
pub type CPLVirtualMemFreeUserData =
    ::std::option::Option<unsafe extern "C" fn(pUserData: *mut ::std::os::raw::c_void)>;
pub const CPLVirtualMemAccessMode_VIRTUALMEM_READONLY: CPLVirtualMemAccessMode = 0;
pub const CPLVirtualMemAccessMode_VIRTUALMEM_READONLY_ENFORCED: CPLVirtualMemAccessMode = 1;
pub const CPLVirtualMemAccessMode_VIRTUALMEM_READWRITE: CPLVirtualMemAccessMode = 2;
pub type CPLVirtualMemAccessMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn CPLGetPageSize() -> size_t;
}
extern "C" {
    pub fn CPLVirtualMemNew(
        nSize: size_t,
        nCacheSize: size_t,
        nPageSizeHint: size_t,
        bSingleThreadUsage: ::std::os::raw::c_int,
        eAccessMode: CPLVirtualMemAccessMode,
        pfnCachePage: CPLVirtualMemCachePageCbk,
        pfnUnCachePage: CPLVirtualMemUnCachePageCbk,
        pfnFreeUserData: CPLVirtualMemFreeUserData,
        pCbkUserData: *mut ::std::os::raw::c_void,
    ) -> *mut CPLVirtualMem;
}
extern "C" {
    pub fn CPLIsVirtualMemFileMapAvailable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLVirtualMemFileMapNew(
        fp: *mut VSILFILE,
        nOffset: vsi_l_offset,
        nLength: vsi_l_offset,
        eAccessMode: CPLVirtualMemAccessMode,
        pfnFreeUserData: CPLVirtualMemFreeUserData,
        pCbkUserData: *mut ::std::os::raw::c_void,
    ) -> *mut CPLVirtualMem;
}
extern "C" {
    pub fn CPLVirtualMemDerivedNew(
        pVMemBase: *mut CPLVirtualMem,
        nOffset: vsi_l_offset,
        nSize: vsi_l_offset,
        pfnFreeUserData: CPLVirtualMemFreeUserData,
        pCbkUserData: *mut ::std::os::raw::c_void,
    ) -> *mut CPLVirtualMem;
}
extern "C" {
    pub fn CPLVirtualMemFree(ctxt: *mut CPLVirtualMem);
}
extern "C" {
    pub fn CPLVirtualMemGetAddr(ctxt: *mut CPLVirtualMem) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLVirtualMemGetSize(ctxt: *mut CPLVirtualMem) -> size_t;
}
extern "C" {
    pub fn CPLVirtualMemIsFileMapping(ctxt: *mut CPLVirtualMem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLVirtualMemGetAccessMode(ctxt: *mut CPLVirtualMem) -> CPLVirtualMemAccessMode;
}
extern "C" {
    pub fn CPLVirtualMemGetPageSize(ctxt: *mut CPLVirtualMem) -> size_t;
}
extern "C" {
    pub fn CPLVirtualMemIsAccessThreadSafe(ctxt: *mut CPLVirtualMem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLVirtualMemDeclareThread(ctxt: *mut CPLVirtualMem);
}
extern "C" {
    pub fn CPLVirtualMemUnDeclareThread(ctxt: *mut CPLVirtualMem);
}
extern "C" {
    pub fn CPLVirtualMemPin(
        ctxt: *mut CPLVirtualMem,
        pAddr: *mut ::std::os::raw::c_void,
        nSize: size_t,
        bWriteOp: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CPLVirtualMemManagerTerminate();
}
pub const CPLXMLNodeType_CXT_Element: CPLXMLNodeType = 0;
pub const CPLXMLNodeType_CXT_Text: CPLXMLNodeType = 1;
pub const CPLXMLNodeType_CXT_Attribute: CPLXMLNodeType = 2;
pub const CPLXMLNodeType_CXT_Comment: CPLXMLNodeType = 3;
pub const CPLXMLNodeType_CXT_Literal: CPLXMLNodeType = 4;
pub type CPLXMLNodeType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPLXMLNode {
    pub eType: CPLXMLNodeType,
    pub pszValue: *mut ::std::os::raw::c_char,
    pub psNext: *mut CPLXMLNode,
    pub psChild: *mut CPLXMLNode,
}
#[test]
fn bindgen_test_layout_CPLXMLNode() {
    assert_eq!(
        ::std::mem::size_of::<CPLXMLNode>(),
        32usize,
        concat!("Size of: ", stringify!(CPLXMLNode))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLXMLNode>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLXMLNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLXMLNode>())).eType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLXMLNode),
            "::",
            stringify!(eType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLXMLNode>())).pszValue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLXMLNode),
            "::",
            stringify!(pszValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLXMLNode>())).psNext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLXMLNode),
            "::",
            stringify!(psNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLXMLNode>())).psChild as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLXMLNode),
            "::",
            stringify!(psChild)
        )
    );
}
extern "C" {
    pub fn CPLParseXMLString(arg1: *const ::std::os::raw::c_char) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn CPLDestroyXMLNode(arg1: *mut CPLXMLNode);
}
extern "C" {
    pub fn CPLGetXMLNode(
        poRoot: *mut CPLXMLNode,
        pszPath: *const ::std::os::raw::c_char,
    ) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn CPLSearchXMLNode(
        poRoot: *mut CPLXMLNode,
        pszTarget: *const ::std::os::raw::c_char,
    ) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn CPLGetXMLValue(
        poRoot: *const CPLXMLNode,
        pszPath: *const ::std::os::raw::c_char,
        pszDefault: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLCreateXMLNode(
        poParent: *mut CPLXMLNode,
        eType: CPLXMLNodeType,
        pszText: *const ::std::os::raw::c_char,
    ) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn CPLSerializeXMLTree(psNode: *const CPLXMLNode) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLAddXMLChild(psParent: *mut CPLXMLNode, psChild: *mut CPLXMLNode);
}
extern "C" {
    pub fn CPLRemoveXMLChild(
        psParent: *mut CPLXMLNode,
        psChild: *mut CPLXMLNode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLAddXMLSibling(psOlderSibling: *mut CPLXMLNode, psNewSibling: *mut CPLXMLNode);
}
extern "C" {
    pub fn CPLCreateXMLElementAndValue(
        psParent: *mut CPLXMLNode,
        pszName: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn CPLAddXMLAttributeAndValue(
        psParent: *mut CPLXMLNode,
        pszName: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn CPLCloneXMLTree(psTree: *const CPLXMLNode) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn CPLSetXMLValue(
        psRoot: *mut CPLXMLNode,
        pszPath: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLStripXMLNamespace(
        psRoot: *mut CPLXMLNode,
        pszNameSpace: *const ::std::os::raw::c_char,
        bRecurse: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CPLCleanXMLElementName(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn CPLParseXMLFile(pszFilename: *const ::std::os::raw::c_char) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn CPLSerializeXMLTreeToFile(
        psTree: *const CPLXMLNode,
        pszFilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CPLXMLTreeCloserDeleter {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_CPLXMLTreeCloserDeleter() {
    assert_eq!(
        ::std::mem::size_of::<CPLXMLTreeCloserDeleter>(),
        1usize,
        concat!("Size of: ", stringify!(CPLXMLTreeCloserDeleter))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLXMLTreeCloserDeleter>(),
        1usize,
        concat!("Alignment of ", stringify!(CPLXMLTreeCloserDeleter))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct CPLXMLTreeCloser {
    pub _base: std_unique_ptr,
}
#[test]
fn bindgen_test_layout_CPLXMLTreeCloser() {
    assert_eq!(
        ::std::mem::size_of::<CPLXMLTreeCloser>(),
        8usize,
        concat!("Size of: ", stringify!(CPLXMLTreeCloser))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLXMLTreeCloser>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLXMLTreeCloser))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16CPLXMLTreeCloser18getDocumentElementEv"]
    pub fn CPLXMLTreeCloser_getDocumentElement(this: *mut CPLXMLTreeCloser) -> *mut CPLXMLNode;
}
impl CPLXMLTreeCloser {
    #[inline]
    pub unsafe fn getDocumentElement(&mut self) -> *mut CPLXMLNode {
        CPLXMLTreeCloser_getDocumentElement(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGREnvelope {
    pub MinX: f64,
    pub MaxX: f64,
    pub MinY: f64,
    pub MaxY: f64,
}
#[test]
fn bindgen_test_layout_OGREnvelope() {
    assert_eq!(
        ::std::mem::size_of::<OGREnvelope>(),
        32usize,
        concat!("Size of: ", stringify!(OGREnvelope))
    );
    assert_eq!(
        ::std::mem::align_of::<OGREnvelope>(),
        8usize,
        concat!("Alignment of ", stringify!(OGREnvelope))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGREnvelope>())).MinX as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGREnvelope),
            "::",
            stringify!(MinX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGREnvelope>())).MaxX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGREnvelope),
            "::",
            stringify!(MaxX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGREnvelope>())).MinY as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OGREnvelope),
            "::",
            stringify!(MinY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGREnvelope>())).MaxY as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OGREnvelope),
            "::",
            stringify!(MaxY)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGREnvelope3D {
    pub _base: OGREnvelope,
    pub MinZ: f64,
    pub MaxZ: f64,
}
#[test]
fn bindgen_test_layout_OGREnvelope3D() {
    assert_eq!(
        ::std::mem::size_of::<OGREnvelope3D>(),
        48usize,
        concat!("Size of: ", stringify!(OGREnvelope3D))
    );
    assert_eq!(
        ::std::mem::align_of::<OGREnvelope3D>(),
        8usize,
        concat!("Alignment of ", stringify!(OGREnvelope3D))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGREnvelope3D>())).MinZ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OGREnvelope3D),
            "::",
            stringify!(MinZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGREnvelope3D>())).MaxZ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OGREnvelope3D),
            "::",
            stringify!(MaxZ)
        )
    );
}
extern "C" {
    pub fn OGRMalloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OGRCalloc(arg1: size_t, arg2: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OGRRealloc(
        arg1: *mut ::std::os::raw::c_void,
        arg2: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OGRStrdup(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGRFree(arg1: *mut ::std::os::raw::c_void);
}
pub type OGRBoolean = ::std::os::raw::c_int;
pub const OGRwkbGeometryType_wkbUnknown: OGRwkbGeometryType = 0;
pub const OGRwkbGeometryType_wkbPoint: OGRwkbGeometryType = 1;
pub const OGRwkbGeometryType_wkbLineString: OGRwkbGeometryType = 2;
pub const OGRwkbGeometryType_wkbPolygon: OGRwkbGeometryType = 3;
pub const OGRwkbGeometryType_wkbMultiPoint: OGRwkbGeometryType = 4;
pub const OGRwkbGeometryType_wkbMultiLineString: OGRwkbGeometryType = 5;
pub const OGRwkbGeometryType_wkbMultiPolygon: OGRwkbGeometryType = 6;
pub const OGRwkbGeometryType_wkbGeometryCollection: OGRwkbGeometryType = 7;
pub const OGRwkbGeometryType_wkbCircularString: OGRwkbGeometryType = 8;
pub const OGRwkbGeometryType_wkbCompoundCurve: OGRwkbGeometryType = 9;
pub const OGRwkbGeometryType_wkbCurvePolygon: OGRwkbGeometryType = 10;
pub const OGRwkbGeometryType_wkbMultiCurve: OGRwkbGeometryType = 11;
pub const OGRwkbGeometryType_wkbMultiSurface: OGRwkbGeometryType = 12;
pub const OGRwkbGeometryType_wkbCurve: OGRwkbGeometryType = 13;
pub const OGRwkbGeometryType_wkbSurface: OGRwkbGeometryType = 14;
pub const OGRwkbGeometryType_wkbPolyhedralSurface: OGRwkbGeometryType = 15;
pub const OGRwkbGeometryType_wkbTIN: OGRwkbGeometryType = 16;
pub const OGRwkbGeometryType_wkbTriangle: OGRwkbGeometryType = 17;
pub const OGRwkbGeometryType_wkbNone: OGRwkbGeometryType = 100;
pub const OGRwkbGeometryType_wkbLinearRing: OGRwkbGeometryType = 101;
pub const OGRwkbGeometryType_wkbCircularStringZ: OGRwkbGeometryType = 1008;
pub const OGRwkbGeometryType_wkbCompoundCurveZ: OGRwkbGeometryType = 1009;
pub const OGRwkbGeometryType_wkbCurvePolygonZ: OGRwkbGeometryType = 1010;
pub const OGRwkbGeometryType_wkbMultiCurveZ: OGRwkbGeometryType = 1011;
pub const OGRwkbGeometryType_wkbMultiSurfaceZ: OGRwkbGeometryType = 1012;
pub const OGRwkbGeometryType_wkbCurveZ: OGRwkbGeometryType = 1013;
pub const OGRwkbGeometryType_wkbSurfaceZ: OGRwkbGeometryType = 1014;
pub const OGRwkbGeometryType_wkbPolyhedralSurfaceZ: OGRwkbGeometryType = 1015;
pub const OGRwkbGeometryType_wkbTINZ: OGRwkbGeometryType = 1016;
pub const OGRwkbGeometryType_wkbTriangleZ: OGRwkbGeometryType = 1017;
pub const OGRwkbGeometryType_wkbPointM: OGRwkbGeometryType = 2001;
pub const OGRwkbGeometryType_wkbLineStringM: OGRwkbGeometryType = 2002;
pub const OGRwkbGeometryType_wkbPolygonM: OGRwkbGeometryType = 2003;
pub const OGRwkbGeometryType_wkbMultiPointM: OGRwkbGeometryType = 2004;
pub const OGRwkbGeometryType_wkbMultiLineStringM: OGRwkbGeometryType = 2005;
pub const OGRwkbGeometryType_wkbMultiPolygonM: OGRwkbGeometryType = 2006;
pub const OGRwkbGeometryType_wkbGeometryCollectionM: OGRwkbGeometryType = 2007;
pub const OGRwkbGeometryType_wkbCircularStringM: OGRwkbGeometryType = 2008;
pub const OGRwkbGeometryType_wkbCompoundCurveM: OGRwkbGeometryType = 2009;
pub const OGRwkbGeometryType_wkbCurvePolygonM: OGRwkbGeometryType = 2010;
pub const OGRwkbGeometryType_wkbMultiCurveM: OGRwkbGeometryType = 2011;
pub const OGRwkbGeometryType_wkbMultiSurfaceM: OGRwkbGeometryType = 2012;
pub const OGRwkbGeometryType_wkbCurveM: OGRwkbGeometryType = 2013;
pub const OGRwkbGeometryType_wkbSurfaceM: OGRwkbGeometryType = 2014;
pub const OGRwkbGeometryType_wkbPolyhedralSurfaceM: OGRwkbGeometryType = 2015;
pub const OGRwkbGeometryType_wkbTINM: OGRwkbGeometryType = 2016;
pub const OGRwkbGeometryType_wkbTriangleM: OGRwkbGeometryType = 2017;
pub const OGRwkbGeometryType_wkbPointZM: OGRwkbGeometryType = 3001;
pub const OGRwkbGeometryType_wkbLineStringZM: OGRwkbGeometryType = 3002;
pub const OGRwkbGeometryType_wkbPolygonZM: OGRwkbGeometryType = 3003;
pub const OGRwkbGeometryType_wkbMultiPointZM: OGRwkbGeometryType = 3004;
pub const OGRwkbGeometryType_wkbMultiLineStringZM: OGRwkbGeometryType = 3005;
pub const OGRwkbGeometryType_wkbMultiPolygonZM: OGRwkbGeometryType = 3006;
pub const OGRwkbGeometryType_wkbGeometryCollectionZM: OGRwkbGeometryType = 3007;
pub const OGRwkbGeometryType_wkbCircularStringZM: OGRwkbGeometryType = 3008;
pub const OGRwkbGeometryType_wkbCompoundCurveZM: OGRwkbGeometryType = 3009;
pub const OGRwkbGeometryType_wkbCurvePolygonZM: OGRwkbGeometryType = 3010;
pub const OGRwkbGeometryType_wkbMultiCurveZM: OGRwkbGeometryType = 3011;
pub const OGRwkbGeometryType_wkbMultiSurfaceZM: OGRwkbGeometryType = 3012;
pub const OGRwkbGeometryType_wkbCurveZM: OGRwkbGeometryType = 3013;
pub const OGRwkbGeometryType_wkbSurfaceZM: OGRwkbGeometryType = 3014;
pub const OGRwkbGeometryType_wkbPolyhedralSurfaceZM: OGRwkbGeometryType = 3015;
pub const OGRwkbGeometryType_wkbTINZM: OGRwkbGeometryType = 3016;
pub const OGRwkbGeometryType_wkbTriangleZM: OGRwkbGeometryType = 3017;
pub const OGRwkbGeometryType_wkbPoint25D: OGRwkbGeometryType = 2147483649;
pub const OGRwkbGeometryType_wkbLineString25D: OGRwkbGeometryType = 2147483650;
pub const OGRwkbGeometryType_wkbPolygon25D: OGRwkbGeometryType = 2147483651;
pub const OGRwkbGeometryType_wkbMultiPoint25D: OGRwkbGeometryType = 2147483652;
pub const OGRwkbGeometryType_wkbMultiLineString25D: OGRwkbGeometryType = 2147483653;
pub const OGRwkbGeometryType_wkbMultiPolygon25D: OGRwkbGeometryType = 2147483654;
pub const OGRwkbGeometryType_wkbGeometryCollection25D: OGRwkbGeometryType = 2147483655;
pub type OGRwkbGeometryType = ::std::os::raw::c_uint;
pub const OGRwkbVariant_wkbVariantOldOgc: OGRwkbVariant = 0;
pub const OGRwkbVariant_wkbVariantIso: OGRwkbVariant = 1;
pub const OGRwkbVariant_wkbVariantPostGIS1: OGRwkbVariant = 2;
pub type OGRwkbVariant = ::std::os::raw::c_uint;
extern "C" {
    pub fn OGRGeometryTypeToName(eType: OGRwkbGeometryType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGRMergeGeometryTypes(
        eMain: OGRwkbGeometryType,
        eExtra: OGRwkbGeometryType,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGRMergeGeometryTypesEx(
        eMain: OGRwkbGeometryType,
        eExtra: OGRwkbGeometryType,
        bAllowPromotingToCurves: ::std::os::raw::c_int,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_GT_Flatten(eType: OGRwkbGeometryType) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_GT_SetZ(eType: OGRwkbGeometryType) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_GT_SetM(eType: OGRwkbGeometryType) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_GT_SetModifier(
        eType: OGRwkbGeometryType,
        bSetZ: ::std::os::raw::c_int,
        bSetM: ::std::os::raw::c_int,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_GT_HasZ(eType: OGRwkbGeometryType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_GT_HasM(eType: OGRwkbGeometryType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_GT_IsSubClassOf(
        eType: OGRwkbGeometryType,
        eSuperType: OGRwkbGeometryType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_GT_IsCurve(arg1: OGRwkbGeometryType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_GT_IsSurface(arg1: OGRwkbGeometryType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_GT_IsNonLinear(arg1: OGRwkbGeometryType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_GT_GetCollection(eType: OGRwkbGeometryType) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_GT_GetCurve(eType: OGRwkbGeometryType) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_GT_GetLinear(eType: OGRwkbGeometryType) -> OGRwkbGeometryType;
}
pub const OGRwkbByteOrder_wkbXDR: OGRwkbByteOrder = 0;
pub const OGRwkbByteOrder_wkbNDR: OGRwkbByteOrder = 1;
pub type OGRwkbByteOrder = ::std::os::raw::c_uint;
pub const OGRFieldType_OFTInteger: OGRFieldType = 0;
pub const OGRFieldType_OFTIntegerList: OGRFieldType = 1;
pub const OGRFieldType_OFTReal: OGRFieldType = 2;
pub const OGRFieldType_OFTRealList: OGRFieldType = 3;
pub const OGRFieldType_OFTString: OGRFieldType = 4;
pub const OGRFieldType_OFTStringList: OGRFieldType = 5;
pub const OGRFieldType_OFTWideString: OGRFieldType = 6;
pub const OGRFieldType_OFTWideStringList: OGRFieldType = 7;
pub const OGRFieldType_OFTBinary: OGRFieldType = 8;
pub const OGRFieldType_OFTDate: OGRFieldType = 9;
pub const OGRFieldType_OFTTime: OGRFieldType = 10;
pub const OGRFieldType_OFTDateTime: OGRFieldType = 11;
pub const OGRFieldType_OFTInteger64: OGRFieldType = 12;
pub const OGRFieldType_OFTInteger64List: OGRFieldType = 13;
pub const OGRFieldType_OFTMaxType: OGRFieldType = 13;
pub type OGRFieldType = ::std::os::raw::c_uint;
pub const OGRFieldSubType_OFSTNone: OGRFieldSubType = 0;
pub const OGRFieldSubType_OFSTBoolean: OGRFieldSubType = 1;
pub const OGRFieldSubType_OFSTInt16: OGRFieldSubType = 2;
pub const OGRFieldSubType_OFSTFloat32: OGRFieldSubType = 3;
pub const OGRFieldSubType_OFSTJSON: OGRFieldSubType = 4;
pub const OGRFieldSubType_OFSTMaxSubType: OGRFieldSubType = 4;
pub type OGRFieldSubType = ::std::os::raw::c_uint;
pub const OGRJustification_OJUndefined: OGRJustification = 0;
pub const OGRJustification_OJLeft: OGRJustification = 1;
pub const OGRJustification_OJRight: OGRJustification = 2;
pub type OGRJustification = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union OGRField {
    pub Integer: ::std::os::raw::c_int,
    pub Integer64: GIntBig,
    pub Real: f64,
    pub String: *mut ::std::os::raw::c_char,
    pub IntegerList: OGRField__bindgen_ty_1,
    pub Integer64List: OGRField__bindgen_ty_2,
    pub RealList: OGRField__bindgen_ty_3,
    pub StringList: OGRField__bindgen_ty_4,
    pub Binary: OGRField__bindgen_ty_5,
    pub Set: OGRField__bindgen_ty_6,
    pub Date: OGRField__bindgen_ty_7,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRField__bindgen_ty_1 {
    pub nCount: ::std::os::raw::c_int,
    pub paList: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OGRField__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<OGRField__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(OGRField__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRField__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRField__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_1>())).nCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_1),
            "::",
            stringify!(nCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_1>())).paList as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_1),
            "::",
            stringify!(paList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRField__bindgen_ty_2 {
    pub nCount: ::std::os::raw::c_int,
    pub paList: *mut GIntBig,
}
#[test]
fn bindgen_test_layout_OGRField__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<OGRField__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(OGRField__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRField__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRField__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_2>())).nCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_2),
            "::",
            stringify!(nCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_2>())).paList as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_2),
            "::",
            stringify!(paList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRField__bindgen_ty_3 {
    pub nCount: ::std::os::raw::c_int,
    pub paList: *mut f64,
}
#[test]
fn bindgen_test_layout_OGRField__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<OGRField__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(OGRField__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRField__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRField__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_3>())).nCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_3),
            "::",
            stringify!(nCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_3>())).paList as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_3),
            "::",
            stringify!(paList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRField__bindgen_ty_4 {
    pub nCount: ::std::os::raw::c_int,
    pub paList: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_OGRField__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<OGRField__bindgen_ty_4>(),
        16usize,
        concat!("Size of: ", stringify!(OGRField__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRField__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRField__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_4>())).nCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_4),
            "::",
            stringify!(nCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_4>())).paList as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_4),
            "::",
            stringify!(paList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRField__bindgen_ty_5 {
    pub nCount: ::std::os::raw::c_int,
    pub paData: *mut GByte,
}
#[test]
fn bindgen_test_layout_OGRField__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<OGRField__bindgen_ty_5>(),
        16usize,
        concat!("Size of: ", stringify!(OGRField__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRField__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRField__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_5>())).nCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_5),
            "::",
            stringify!(nCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_5>())).paData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_5),
            "::",
            stringify!(paData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRField__bindgen_ty_6 {
    pub nMarker1: ::std::os::raw::c_int,
    pub nMarker2: ::std::os::raw::c_int,
    pub nMarker3: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OGRField__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<OGRField__bindgen_ty_6>(),
        12usize,
        concat!("Size of: ", stringify!(OGRField__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRField__bindgen_ty_6>(),
        4usize,
        concat!("Alignment of ", stringify!(OGRField__bindgen_ty_6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_6>())).nMarker1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_6),
            "::",
            stringify!(nMarker1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_6>())).nMarker2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_6),
            "::",
            stringify!(nMarker2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_6>())).nMarker3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_6),
            "::",
            stringify!(nMarker3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRField__bindgen_ty_7 {
    pub Year: GInt16,
    pub Month: GByte,
    pub Day: GByte,
    pub Hour: GByte,
    pub Minute: GByte,
    pub TZFlag: GByte,
    pub Reserved: GByte,
    pub Second: f32,
}
#[test]
fn bindgen_test_layout_OGRField__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<OGRField__bindgen_ty_7>(),
        12usize,
        concat!("Size of: ", stringify!(OGRField__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRField__bindgen_ty_7>(),
        4usize,
        concat!("Alignment of ", stringify!(OGRField__bindgen_ty_7))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_7>())).Year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_7),
            "::",
            stringify!(Year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_7>())).Month as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_7),
            "::",
            stringify!(Month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_7>())).Day as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_7),
            "::",
            stringify!(Day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_7>())).Hour as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_7),
            "::",
            stringify!(Hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_7>())).Minute as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_7),
            "::",
            stringify!(Minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_7>())).TZFlag as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_7),
            "::",
            stringify!(TZFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_7>())).Reserved as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_7),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField__bindgen_ty_7>())).Second as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField__bindgen_ty_7),
            "::",
            stringify!(Second)
        )
    );
}
#[test]
fn bindgen_test_layout_OGRField() {
    assert_eq!(
        ::std::mem::size_of::<OGRField>(),
        16usize,
        concat!("Size of: ", stringify!(OGRField))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRField>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).Integer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(Integer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).Integer64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(Integer64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).Real as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(Real)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).String as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(String)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).IntegerList as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(IntegerList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).Integer64List as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(Integer64List)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).RealList as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(RealList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).StringList as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(StringList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).Binary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(Binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).Set as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(Set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRField>())).Date as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRField),
            "::",
            stringify!(Date)
        )
    );
}
extern "C" {
    pub fn OGRParseDate(
        pszInput: *const ::std::os::raw::c_char,
        psOutput: *mut OGRField,
        nOptions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const ogr_style_tool_class_id_OGRSTCNone: ogr_style_tool_class_id = 0;
pub const ogr_style_tool_class_id_OGRSTCPen: ogr_style_tool_class_id = 1;
pub const ogr_style_tool_class_id_OGRSTCBrush: ogr_style_tool_class_id = 2;
pub const ogr_style_tool_class_id_OGRSTCSymbol: ogr_style_tool_class_id = 3;
pub const ogr_style_tool_class_id_OGRSTCLabel: ogr_style_tool_class_id = 4;
pub const ogr_style_tool_class_id_OGRSTCVector: ogr_style_tool_class_id = 5;
pub type ogr_style_tool_class_id = ::std::os::raw::c_uint;
pub use self::ogr_style_tool_class_id as OGRSTClassId;
pub const ogr_style_tool_units_id_OGRSTUGround: ogr_style_tool_units_id = 0;
pub const ogr_style_tool_units_id_OGRSTUPixel: ogr_style_tool_units_id = 1;
pub const ogr_style_tool_units_id_OGRSTUPoints: ogr_style_tool_units_id = 2;
pub const ogr_style_tool_units_id_OGRSTUMM: ogr_style_tool_units_id = 3;
pub const ogr_style_tool_units_id_OGRSTUCM: ogr_style_tool_units_id = 4;
pub const ogr_style_tool_units_id_OGRSTUInches: ogr_style_tool_units_id = 5;
pub type ogr_style_tool_units_id = ::std::os::raw::c_uint;
pub use self::ogr_style_tool_units_id as OGRSTUnitId;
pub const ogr_style_tool_param_pen_id_OGRSTPenColor: ogr_style_tool_param_pen_id = 0;
pub const ogr_style_tool_param_pen_id_OGRSTPenWidth: ogr_style_tool_param_pen_id = 1;
pub const ogr_style_tool_param_pen_id_OGRSTPenPattern: ogr_style_tool_param_pen_id = 2;
pub const ogr_style_tool_param_pen_id_OGRSTPenId: ogr_style_tool_param_pen_id = 3;
pub const ogr_style_tool_param_pen_id_OGRSTPenPerOffset: ogr_style_tool_param_pen_id = 4;
pub const ogr_style_tool_param_pen_id_OGRSTPenCap: ogr_style_tool_param_pen_id = 5;
pub const ogr_style_tool_param_pen_id_OGRSTPenJoin: ogr_style_tool_param_pen_id = 6;
pub const ogr_style_tool_param_pen_id_OGRSTPenPriority: ogr_style_tool_param_pen_id = 7;
pub const ogr_style_tool_param_pen_id_OGRSTPenLast: ogr_style_tool_param_pen_id = 8;
pub type ogr_style_tool_param_pen_id = ::std::os::raw::c_uint;
pub use self::ogr_style_tool_param_pen_id as OGRSTPenParam;
pub const ogr_style_tool_param_brush_id_OGRSTBrushFColor: ogr_style_tool_param_brush_id = 0;
pub const ogr_style_tool_param_brush_id_OGRSTBrushBColor: ogr_style_tool_param_brush_id = 1;
pub const ogr_style_tool_param_brush_id_OGRSTBrushId: ogr_style_tool_param_brush_id = 2;
pub const ogr_style_tool_param_brush_id_OGRSTBrushAngle: ogr_style_tool_param_brush_id = 3;
pub const ogr_style_tool_param_brush_id_OGRSTBrushSize: ogr_style_tool_param_brush_id = 4;
pub const ogr_style_tool_param_brush_id_OGRSTBrushDx: ogr_style_tool_param_brush_id = 5;
pub const ogr_style_tool_param_brush_id_OGRSTBrushDy: ogr_style_tool_param_brush_id = 6;
pub const ogr_style_tool_param_brush_id_OGRSTBrushPriority: ogr_style_tool_param_brush_id = 7;
pub const ogr_style_tool_param_brush_id_OGRSTBrushLast: ogr_style_tool_param_brush_id = 8;
pub type ogr_style_tool_param_brush_id = ::std::os::raw::c_uint;
pub use self::ogr_style_tool_param_brush_id as OGRSTBrushParam;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolId: ogr_style_tool_param_symbol_id = 0;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolAngle: ogr_style_tool_param_symbol_id = 1;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolColor: ogr_style_tool_param_symbol_id = 2;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolSize: ogr_style_tool_param_symbol_id = 3;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolDx: ogr_style_tool_param_symbol_id = 4;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolDy: ogr_style_tool_param_symbol_id = 5;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolStep: ogr_style_tool_param_symbol_id = 6;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolPerp: ogr_style_tool_param_symbol_id = 7;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolOffset: ogr_style_tool_param_symbol_id = 8;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolPriority: ogr_style_tool_param_symbol_id = 9;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolFontName: ogr_style_tool_param_symbol_id = 10;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolOColor: ogr_style_tool_param_symbol_id = 11;
pub const ogr_style_tool_param_symbol_id_OGRSTSymbolLast: ogr_style_tool_param_symbol_id = 12;
pub type ogr_style_tool_param_symbol_id = ::std::os::raw::c_uint;
pub use self::ogr_style_tool_param_symbol_id as OGRSTSymbolParam;
pub const ogr_style_tool_param_label_id_OGRSTLabelFontName: ogr_style_tool_param_label_id = 0;
pub const ogr_style_tool_param_label_id_OGRSTLabelSize: ogr_style_tool_param_label_id = 1;
pub const ogr_style_tool_param_label_id_OGRSTLabelTextString: ogr_style_tool_param_label_id = 2;
pub const ogr_style_tool_param_label_id_OGRSTLabelAngle: ogr_style_tool_param_label_id = 3;
pub const ogr_style_tool_param_label_id_OGRSTLabelFColor: ogr_style_tool_param_label_id = 4;
pub const ogr_style_tool_param_label_id_OGRSTLabelBColor: ogr_style_tool_param_label_id = 5;
pub const ogr_style_tool_param_label_id_OGRSTLabelPlacement: ogr_style_tool_param_label_id = 6;
pub const ogr_style_tool_param_label_id_OGRSTLabelAnchor: ogr_style_tool_param_label_id = 7;
pub const ogr_style_tool_param_label_id_OGRSTLabelDx: ogr_style_tool_param_label_id = 8;
pub const ogr_style_tool_param_label_id_OGRSTLabelDy: ogr_style_tool_param_label_id = 9;
pub const ogr_style_tool_param_label_id_OGRSTLabelPerp: ogr_style_tool_param_label_id = 10;
pub const ogr_style_tool_param_label_id_OGRSTLabelBold: ogr_style_tool_param_label_id = 11;
pub const ogr_style_tool_param_label_id_OGRSTLabelItalic: ogr_style_tool_param_label_id = 12;
pub const ogr_style_tool_param_label_id_OGRSTLabelUnderline: ogr_style_tool_param_label_id = 13;
pub const ogr_style_tool_param_label_id_OGRSTLabelPriority: ogr_style_tool_param_label_id = 14;
pub const ogr_style_tool_param_label_id_OGRSTLabelStrikeout: ogr_style_tool_param_label_id = 15;
pub const ogr_style_tool_param_label_id_OGRSTLabelStretch: ogr_style_tool_param_label_id = 16;
pub const ogr_style_tool_param_label_id_OGRSTLabelAdjHor: ogr_style_tool_param_label_id = 17;
pub const ogr_style_tool_param_label_id_OGRSTLabelAdjVert: ogr_style_tool_param_label_id = 18;
pub const ogr_style_tool_param_label_id_OGRSTLabelHColor: ogr_style_tool_param_label_id = 19;
pub const ogr_style_tool_param_label_id_OGRSTLabelOColor: ogr_style_tool_param_label_id = 20;
pub const ogr_style_tool_param_label_id_OGRSTLabelLast: ogr_style_tool_param_label_id = 21;
pub type ogr_style_tool_param_label_id = ::std::os::raw::c_uint;
pub use self::ogr_style_tool_param_label_id as OGRSTLabelParam;
extern "C" {
    pub fn GDALVersionInfo(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALCheckVersion(
        nVersionMajor: ::std::os::raw::c_int,
        nVersionMinor: ::std::os::raw::c_int,
        pszCallingComponentName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type OGRGeometryH = *mut ::std::os::raw::c_void;
pub type OGRSpatialReferenceH = *mut ::std::os::raw::c_void;
pub type OGRCoordinateTransformationH = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CPLXMLNode {
    _unused: [u8; 0],
}
extern "C" {
    pub fn OGR_G_CreateFromWkb(
        arg1: *const ::std::os::raw::c_void,
        arg2: OGRSpatialReferenceH,
        arg3: *mut OGRGeometryH,
        arg4: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_CreateFromWkt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: OGRSpatialReferenceH,
        arg3: *mut OGRGeometryH,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_CreateFromFgf(
        arg1: *const ::std::os::raw::c_void,
        arg2: OGRSpatialReferenceH,
        arg3: *mut OGRGeometryH,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_DestroyGeometry(arg1: OGRGeometryH);
}
extern "C" {
    pub fn OGR_G_CreateGeometry(arg1: OGRwkbGeometryType) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_ApproximateArcAngles(
        dfCenterX: f64,
        dfCenterY: f64,
        dfZ: f64,
        dfPrimaryRadius: f64,
        dfSecondaryAxis: f64,
        dfRotation: f64,
        dfStartAngle: f64,
        dfEndAngle: f64,
        dfMaxAngleStepSizeDegrees: f64,
    ) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_ForceToPolygon(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_ForceToLineString(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_ForceToMultiPolygon(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_ForceToMultiPoint(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_ForceToMultiLineString(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_ForceTo(
        hGeom: OGRGeometryH,
        eTargetType: OGRwkbGeometryType,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_RemoveLowerDimensionSubGeoms(hGeom: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_GetDimension(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_GetCoordinateDimension(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_CoordinateDimension(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_SetCoordinateDimension(arg1: OGRGeometryH, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_G_Is3D(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_IsMeasured(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Set3D(arg1: OGRGeometryH, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_G_SetMeasured(arg1: OGRGeometryH, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_G_Clone(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_GetEnvelope(arg1: OGRGeometryH, arg2: *mut OGREnvelope);
}
extern "C" {
    pub fn OGR_G_GetEnvelope3D(arg1: OGRGeometryH, arg2: *mut OGREnvelope3D);
}
extern "C" {
    pub fn OGR_G_ImportFromWkb(
        arg1: OGRGeometryH,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_ExportToWkb(
        arg1: OGRGeometryH,
        arg2: OGRwkbByteOrder,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_ExportToIsoWkb(
        arg1: OGRGeometryH,
        arg2: OGRwkbByteOrder,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_WkbSize(hGeom: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_ImportFromWkt(
        arg1: OGRGeometryH,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_ExportToWkt(arg1: OGRGeometryH, arg2: *mut *mut ::std::os::raw::c_char) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_ExportToIsoWkt(
        arg1: OGRGeometryH,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_GetGeometryType(arg1: OGRGeometryH) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_G_GetGeometryName(arg1: OGRGeometryH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_G_DumpReadable(
        arg1: OGRGeometryH,
        arg2: *mut FILE,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OGR_G_FlattenTo2D(arg1: OGRGeometryH);
}
extern "C" {
    pub fn OGR_G_CloseRings(arg1: OGRGeometryH);
}
extern "C" {
    pub fn OGR_G_CreateFromGML(arg1: *const ::std::os::raw::c_char) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_ExportToGML(arg1: OGRGeometryH) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_G_ExportToGMLEx(
        arg1: OGRGeometryH,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_G_CreateFromGMLTree(arg1: *const CPLXMLNode) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_ExportToGMLTree(arg1: OGRGeometryH) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn OGR_G_ExportEnvelopeToGMLTree(arg1: OGRGeometryH) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn OGR_G_ExportToKML(
        arg1: OGRGeometryH,
        pszAltitudeMode: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_G_ExportToJson(arg1: OGRGeometryH) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_G_ExportToJsonEx(
        arg1: OGRGeometryH,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_G_CreateGeometryFromJson(arg1: *const ::std::os::raw::c_char) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_CreateGeometryFromEsriJson(arg1: *const ::std::os::raw::c_char) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_AssignSpatialReference(arg1: OGRGeometryH, arg2: OGRSpatialReferenceH);
}
extern "C" {
    pub fn OGR_G_GetSpatialReference(arg1: OGRGeometryH) -> OGRSpatialReferenceH;
}
extern "C" {
    pub fn OGR_G_Transform(arg1: OGRGeometryH, arg2: OGRCoordinateTransformationH) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_TransformTo(arg1: OGRGeometryH, arg2: OGRSpatialReferenceH) -> OGRErr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRGeomTransformer {
    _unused: [u8; 0],
}
pub type OGRGeomTransformerH = *mut OGRGeomTransformer;
extern "C" {
    pub fn OGR_GeomTransformer_Create(
        arg1: OGRCoordinateTransformationH,
        papszOptions: CSLConstList,
    ) -> OGRGeomTransformerH;
}
extern "C" {
    pub fn OGR_GeomTransformer_Transform(
        hTransformer: OGRGeomTransformerH,
        hGeom: OGRGeometryH,
    ) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_GeomTransformer_Destroy(hTransformer: OGRGeomTransformerH);
}
extern "C" {
    pub fn OGR_G_Simplify(hThis: OGRGeometryH, tolerance: f64) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_SimplifyPreserveTopology(hThis: OGRGeometryH, tolerance: f64) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_DelaunayTriangulation(
        hThis: OGRGeometryH,
        dfTolerance: f64,
        bOnlyEdges: ::std::os::raw::c_int,
    ) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_Segmentize(hGeom: OGRGeometryH, dfMaxLength: f64);
}
extern "C" {
    pub fn OGR_G_Intersects(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Equals(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Disjoint(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Touches(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Crosses(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Within(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Contains(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Overlaps(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Boundary(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_ConvexHull(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_Buffer(arg1: OGRGeometryH, arg2: f64, arg3: ::std::os::raw::c_int)
        -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_Intersection(arg1: OGRGeometryH, arg2: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_Union(arg1: OGRGeometryH, arg2: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_UnionCascaded(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_PointOnSurface(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_Difference(arg1: OGRGeometryH, arg2: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_SymDifference(arg1: OGRGeometryH, arg2: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_Distance(arg1: OGRGeometryH, arg2: OGRGeometryH) -> f64;
}
extern "C" {
    pub fn OGR_G_Distance3D(arg1: OGRGeometryH, arg2: OGRGeometryH) -> f64;
}
extern "C" {
    pub fn OGR_G_Length(arg1: OGRGeometryH) -> f64;
}
extern "C" {
    pub fn OGR_G_Area(arg1: OGRGeometryH) -> f64;
}
extern "C" {
    pub fn OGR_G_Centroid(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Value(arg1: OGRGeometryH, dfDistance: f64) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_Empty(arg1: OGRGeometryH);
}
extern "C" {
    pub fn OGR_G_IsEmpty(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_IsValid(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_MakeValid(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_IsSimple(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_IsRing(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Polygonize(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_Intersect(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_Equal(arg1: OGRGeometryH, arg2: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_SymmetricDifference(arg1: OGRGeometryH, arg2: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_GetArea(arg1: OGRGeometryH) -> f64;
}
extern "C" {
    pub fn OGR_G_GetBoundary(arg1: OGRGeometryH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_GetPointCount(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_GetPoints(
        hGeom: OGRGeometryH,
        pabyX: *mut ::std::os::raw::c_void,
        nXStride: ::std::os::raw::c_int,
        pabyY: *mut ::std::os::raw::c_void,
        nYStride: ::std::os::raw::c_int,
        pabyZ: *mut ::std::os::raw::c_void,
        nZStride: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_GetPointsZM(
        hGeom: OGRGeometryH,
        pabyX: *mut ::std::os::raw::c_void,
        nXStride: ::std::os::raw::c_int,
        pabyY: *mut ::std::os::raw::c_void,
        nYStride: ::std::os::raw::c_int,
        pabyZ: *mut ::std::os::raw::c_void,
        nZStride: ::std::os::raw::c_int,
        pabyM: *mut ::std::os::raw::c_void,
        nMStride: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_GetX(arg1: OGRGeometryH, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn OGR_G_GetY(arg1: OGRGeometryH, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn OGR_G_GetZ(arg1: OGRGeometryH, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn OGR_G_GetM(arg1: OGRGeometryH, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn OGR_G_GetPoint(
        arg1: OGRGeometryH,
        iPoint: ::std::os::raw::c_int,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut f64,
    );
}
extern "C" {
    pub fn OGR_G_GetPointZM(
        arg1: OGRGeometryH,
        iPoint: ::std::os::raw::c_int,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut f64,
    );
}
extern "C" {
    pub fn OGR_G_SetPointCount(hGeom: OGRGeometryH, nNewPointCount: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_G_SetPoint(
        arg1: OGRGeometryH,
        iPoint: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
        arg4: f64,
    );
}
extern "C" {
    pub fn OGR_G_SetPoint_2D(
        arg1: OGRGeometryH,
        iPoint: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
    );
}
extern "C" {
    pub fn OGR_G_SetPointM(
        arg1: OGRGeometryH,
        iPoint: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
        arg4: f64,
    );
}
extern "C" {
    pub fn OGR_G_SetPointZM(
        arg1: OGRGeometryH,
        iPoint: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
    );
}
extern "C" {
    pub fn OGR_G_AddPoint(arg1: OGRGeometryH, arg2: f64, arg3: f64, arg4: f64);
}
extern "C" {
    pub fn OGR_G_AddPoint_2D(arg1: OGRGeometryH, arg2: f64, arg3: f64);
}
extern "C" {
    pub fn OGR_G_AddPointM(arg1: OGRGeometryH, arg2: f64, arg3: f64, arg4: f64);
}
extern "C" {
    pub fn OGR_G_AddPointZM(arg1: OGRGeometryH, arg2: f64, arg3: f64, arg4: f64, arg5: f64);
}
extern "C" {
    pub fn OGR_G_SetPoints(
        hGeom: OGRGeometryH,
        nPointsIn: ::std::os::raw::c_int,
        pabyX: *const ::std::os::raw::c_void,
        nXStride: ::std::os::raw::c_int,
        pabyY: *const ::std::os::raw::c_void,
        nYStride: ::std::os::raw::c_int,
        pabyZ: *const ::std::os::raw::c_void,
        nZStride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OGR_G_SetPointsZM(
        hGeom: OGRGeometryH,
        nPointsIn: ::std::os::raw::c_int,
        pabyX: *const ::std::os::raw::c_void,
        nXStride: ::std::os::raw::c_int,
        pabyY: *const ::std::os::raw::c_void,
        nYStride: ::std::os::raw::c_int,
        pabyZ: *const ::std::os::raw::c_void,
        nZStride: ::std::os::raw::c_int,
        pabyM: *const ::std::os::raw::c_void,
        nMStride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OGR_G_SwapXY(hGeom: OGRGeometryH);
}
extern "C" {
    pub fn OGR_G_GetGeometryCount(arg1: OGRGeometryH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_GetGeometryRef(arg1: OGRGeometryH, arg2: ::std::os::raw::c_int) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_AddGeometry(arg1: OGRGeometryH, arg2: OGRGeometryH) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_AddGeometryDirectly(arg1: OGRGeometryH, arg2: OGRGeometryH) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_RemoveGeometry(
        arg1: OGRGeometryH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_G_HasCurveGeometry(
        arg1: OGRGeometryH,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_G_GetLinearGeometry(
        hGeom: OGRGeometryH,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_G_GetCurveGeometry(
        hGeom: OGRGeometryH,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> OGRGeometryH;
}
extern "C" {
    pub fn OGRBuildPolygonFromEdges(
        hLinesAsCollection: OGRGeometryH,
        bBestEffort: ::std::os::raw::c_int,
        bAutoClose: ::std::os::raw::c_int,
        dfTolerance: f64,
        peErr: *mut OGRErr,
    ) -> OGRGeometryH;
}
extern "C" {
    pub fn OGRSetGenerate_DB2_V72_BYTE_ORDER(
        bGenerate_DB2_V72_BYTE_ORDER: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGRGetGenerate_DB2_V72_BYTE_ORDER() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGRSetNonLinearGeometriesEnabledFlag(bFlag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGRGetNonLinearGeometriesEnabledFlag() -> ::std::os::raw::c_int;
}
pub type OGRFieldDefnH = *mut ::std::os::raw::c_void;
pub type OGRFeatureDefnH = *mut ::std::os::raw::c_void;
pub type OGRFeatureH = *mut ::std::os::raw::c_void;
pub type OGRStyleTableH = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRGeomFieldDefnHS {
    _unused: [u8; 0],
}
pub type OGRGeomFieldDefnH = *mut OGRGeomFieldDefnHS;
extern "C" {
    pub fn OGR_Fld_Create(arg1: *const ::std::os::raw::c_char, arg2: OGRFieldType)
        -> OGRFieldDefnH;
}
extern "C" {
    pub fn OGR_Fld_Destroy(arg1: OGRFieldDefnH);
}
extern "C" {
    pub fn OGR_Fld_SetName(arg1: OGRFieldDefnH, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn OGR_Fld_GetNameRef(arg1: OGRFieldDefnH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_Fld_SetAlternativeName(arg1: OGRFieldDefnH, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn OGR_Fld_GetAlternativeNameRef(arg1: OGRFieldDefnH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_Fld_GetType(arg1: OGRFieldDefnH) -> OGRFieldType;
}
extern "C" {
    pub fn OGR_Fld_SetType(arg1: OGRFieldDefnH, arg2: OGRFieldType);
}
extern "C" {
    pub fn OGR_Fld_GetSubType(arg1: OGRFieldDefnH) -> OGRFieldSubType;
}
extern "C" {
    pub fn OGR_Fld_SetSubType(arg1: OGRFieldDefnH, arg2: OGRFieldSubType);
}
extern "C" {
    pub fn OGR_Fld_GetJustify(arg1: OGRFieldDefnH) -> OGRJustification;
}
extern "C" {
    pub fn OGR_Fld_SetJustify(arg1: OGRFieldDefnH, arg2: OGRJustification);
}
extern "C" {
    pub fn OGR_Fld_GetWidth(arg1: OGRFieldDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_Fld_SetWidth(arg1: OGRFieldDefnH, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_Fld_GetPrecision(arg1: OGRFieldDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_Fld_SetPrecision(arg1: OGRFieldDefnH, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_Fld_Set(
        arg1: OGRFieldDefnH,
        arg2: *const ::std::os::raw::c_char,
        arg3: OGRFieldType,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: OGRJustification,
    );
}
extern "C" {
    pub fn OGR_Fld_IsIgnored(hDefn: OGRFieldDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_Fld_SetIgnored(hDefn: OGRFieldDefnH, arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_Fld_IsNullable(hDefn: OGRFieldDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_Fld_SetNullable(hDefn: OGRFieldDefnH, arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_Fld_IsUnique(hDefn: OGRFieldDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_Fld_SetUnique(hDefn: OGRFieldDefnH, arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_Fld_GetDefault(hDefn: OGRFieldDefnH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_Fld_SetDefault(hDefn: OGRFieldDefnH, arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn OGR_Fld_IsDefaultDriverSpecific(hDefn: OGRFieldDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_GetFieldTypeName(arg1: OGRFieldType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_GetFieldSubTypeName(arg1: OGRFieldSubType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_AreTypeSubTypeCompatible(
        eType: OGRFieldType,
        eSubType: OGRFieldSubType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_GFld_Create(
        arg1: *const ::std::os::raw::c_char,
        arg2: OGRwkbGeometryType,
    ) -> OGRGeomFieldDefnH;
}
extern "C" {
    pub fn OGR_GFld_Destroy(arg1: OGRGeomFieldDefnH);
}
extern "C" {
    pub fn OGR_GFld_SetName(arg1: OGRGeomFieldDefnH, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn OGR_GFld_GetNameRef(arg1: OGRGeomFieldDefnH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_GFld_GetType(arg1: OGRGeomFieldDefnH) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_GFld_SetType(arg1: OGRGeomFieldDefnH, arg2: OGRwkbGeometryType);
}
extern "C" {
    pub fn OGR_GFld_GetSpatialRef(arg1: OGRGeomFieldDefnH) -> OGRSpatialReferenceH;
}
extern "C" {
    pub fn OGR_GFld_SetSpatialRef(arg1: OGRGeomFieldDefnH, hSRS: OGRSpatialReferenceH);
}
extern "C" {
    pub fn OGR_GFld_IsNullable(hDefn: OGRGeomFieldDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_GFld_SetNullable(hDefn: OGRGeomFieldDefnH, arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_GFld_IsIgnored(hDefn: OGRGeomFieldDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_GFld_SetIgnored(hDefn: OGRGeomFieldDefnH, arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_FD_Create(arg1: *const ::std::os::raw::c_char) -> OGRFeatureDefnH;
}
extern "C" {
    pub fn OGR_FD_Destroy(arg1: OGRFeatureDefnH);
}
extern "C" {
    pub fn OGR_FD_Release(arg1: OGRFeatureDefnH);
}
extern "C" {
    pub fn OGR_FD_GetName(arg1: OGRFeatureDefnH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_FD_GetFieldCount(arg1: OGRFeatureDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_FD_GetFieldDefn(arg1: OGRFeatureDefnH, arg2: ::std::os::raw::c_int)
        -> OGRFieldDefnH;
}
extern "C" {
    pub fn OGR_FD_GetFieldIndex(
        arg1: OGRFeatureDefnH,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_FD_AddFieldDefn(arg1: OGRFeatureDefnH, arg2: OGRFieldDefnH);
}
extern "C" {
    pub fn OGR_FD_DeleteFieldDefn(hDefn: OGRFeatureDefnH, iField: ::std::os::raw::c_int) -> OGRErr;
}
extern "C" {
    pub fn OGR_FD_ReorderFieldDefns(
        hDefn: OGRFeatureDefnH,
        panMap: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_FD_GetGeomType(arg1: OGRFeatureDefnH) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_FD_SetGeomType(arg1: OGRFeatureDefnH, arg2: OGRwkbGeometryType);
}
extern "C" {
    pub fn OGR_FD_IsGeometryIgnored(arg1: OGRFeatureDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_FD_SetGeometryIgnored(arg1: OGRFeatureDefnH, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_FD_IsStyleIgnored(arg1: OGRFeatureDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_FD_SetStyleIgnored(arg1: OGRFeatureDefnH, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_FD_Reference(arg1: OGRFeatureDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_FD_Dereference(arg1: OGRFeatureDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_FD_GetReferenceCount(arg1: OGRFeatureDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_FD_GetGeomFieldCount(hFDefn: OGRFeatureDefnH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_FD_GetGeomFieldDefn(
        hFDefn: OGRFeatureDefnH,
        i: ::std::os::raw::c_int,
    ) -> OGRGeomFieldDefnH;
}
extern "C" {
    pub fn OGR_FD_GetGeomFieldIndex(
        hFDefn: OGRFeatureDefnH,
        pszName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_FD_AddGeomFieldDefn(hFDefn: OGRFeatureDefnH, hGFldDefn: OGRGeomFieldDefnH);
}
extern "C" {
    pub fn OGR_FD_DeleteGeomFieldDefn(
        hFDefn: OGRFeatureDefnH,
        iGeomField: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_FD_IsSame(
        hFDefn: OGRFeatureDefnH,
        hOtherFDefn: OGRFeatureDefnH,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_Create(arg1: OGRFeatureDefnH) -> OGRFeatureH;
}
extern "C" {
    pub fn OGR_F_Destroy(arg1: OGRFeatureH);
}
extern "C" {
    pub fn OGR_F_GetDefnRef(arg1: OGRFeatureH) -> OGRFeatureDefnH;
}
extern "C" {
    pub fn OGR_F_SetGeometryDirectly(arg1: OGRFeatureH, arg2: OGRGeometryH) -> OGRErr;
}
extern "C" {
    pub fn OGR_F_SetGeometry(arg1: OGRFeatureH, arg2: OGRGeometryH) -> OGRErr;
}
extern "C" {
    pub fn OGR_F_GetGeometryRef(arg1: OGRFeatureH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_F_StealGeometry(arg1: OGRFeatureH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_F_Clone(arg1: OGRFeatureH) -> OGRFeatureH;
}
extern "C" {
    pub fn OGR_F_Equal(arg1: OGRFeatureH, arg2: OGRFeatureH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_GetFieldCount(arg1: OGRFeatureH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_GetFieldDefnRef(arg1: OGRFeatureH, arg2: ::std::os::raw::c_int) -> OGRFieldDefnH;
}
extern "C" {
    pub fn OGR_F_GetFieldIndex(
        arg1: OGRFeatureH,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_IsFieldSet(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_UnsetField(arg1: OGRFeatureH, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_F_IsFieldNull(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_IsFieldSetAndNotNull(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_SetFieldNull(arg1: OGRFeatureH, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn OGR_F_GetRawFieldRef(arg1: OGRFeatureH, arg2: ::std::os::raw::c_int) -> *mut OGRField;
}
extern "C" {
    pub fn OGR_RawField_IsUnset(arg1: *const OGRField) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_RawField_IsNull(arg1: *const OGRField) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_RawField_SetUnset(arg1: *mut OGRField);
}
extern "C" {
    pub fn OGR_RawField_SetNull(arg1: *mut OGRField);
}
extern "C" {
    pub fn OGR_F_GetFieldAsInteger(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_GetFieldAsInteger64(arg1: OGRFeatureH, arg2: ::std::os::raw::c_int) -> GIntBig;
}
extern "C" {
    pub fn OGR_F_GetFieldAsDouble(arg1: OGRFeatureH, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn OGR_F_GetFieldAsString(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_F_GetFieldAsIntegerList(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_GetFieldAsInteger64List(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *const GIntBig;
}
extern "C" {
    pub fn OGR_F_GetFieldAsDoubleList(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn OGR_F_GetFieldAsStringList(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_F_GetFieldAsBinary(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut GByte;
}
extern "C" {
    pub fn OGR_F_GetFieldAsDateTime(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
        arg9: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_GetFieldAsDateTimeEx(
        hFeat: OGRFeatureH,
        iField: ::std::os::raw::c_int,
        pnYear: *mut ::std::os::raw::c_int,
        pnMonth: *mut ::std::os::raw::c_int,
        pnDay: *mut ::std::os::raw::c_int,
        pnHour: *mut ::std::os::raw::c_int,
        pnMinute: *mut ::std::os::raw::c_int,
        pfSecond: *mut f32,
        pnTZFlag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_SetFieldInteger(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OGR_F_SetFieldInteger64(arg1: OGRFeatureH, arg2: ::std::os::raw::c_int, arg3: GIntBig);
}
extern "C" {
    pub fn OGR_F_SetFieldDouble(arg1: OGRFeatureH, arg2: ::std::os::raw::c_int, arg3: f64);
}
extern "C" {
    pub fn OGR_F_SetFieldString(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OGR_F_SetFieldIntegerList(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OGR_F_SetFieldInteger64List(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const GIntBig,
    );
}
extern "C" {
    pub fn OGR_F_SetFieldDoubleList(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const f64,
    );
}
extern "C" {
    pub fn OGR_F_SetFieldStringList(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: CSLConstList,
    );
}
extern "C" {
    pub fn OGR_F_SetFieldRaw(arg1: OGRFeatureH, arg2: ::std::os::raw::c_int, arg3: *mut OGRField);
}
extern "C" {
    pub fn OGR_F_SetFieldBinary(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn OGR_F_SetFieldDateTime(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OGR_F_SetFieldDateTimeEx(
        arg1: OGRFeatureH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: f32,
        arg9: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OGR_F_GetGeomFieldCount(hFeat: OGRFeatureH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_GetGeomFieldDefnRef(
        hFeat: OGRFeatureH,
        iField: ::std::os::raw::c_int,
    ) -> OGRGeomFieldDefnH;
}
extern "C" {
    pub fn OGR_F_GetGeomFieldIndex(
        hFeat: OGRFeatureH,
        pszName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_F_GetGeomFieldRef(hFeat: OGRFeatureH, iField: ::std::os::raw::c_int)
        -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_F_SetGeomFieldDirectly(
        hFeat: OGRFeatureH,
        iField: ::std::os::raw::c_int,
        hGeom: OGRGeometryH,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_F_SetGeomField(
        hFeat: OGRFeatureH,
        iField: ::std::os::raw::c_int,
        hGeom: OGRGeometryH,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_F_GetFID(arg1: OGRFeatureH) -> GIntBig;
}
extern "C" {
    pub fn OGR_F_SetFID(arg1: OGRFeatureH, arg2: GIntBig) -> OGRErr;
}
extern "C" {
    pub fn OGR_F_DumpReadable(arg1: OGRFeatureH, arg2: *mut FILE);
}
extern "C" {
    pub fn OGR_F_SetFrom(
        arg1: OGRFeatureH,
        arg2: OGRFeatureH,
        arg3: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_F_SetFromWithMap(
        arg1: OGRFeatureH,
        arg2: OGRFeatureH,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_F_GetStyleString(arg1: OGRFeatureH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_F_SetStyleString(arg1: OGRFeatureH, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn OGR_F_SetStyleStringDirectly(arg1: OGRFeatureH, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn OGR_F_GetStyleTable(arg1: OGRFeatureH) -> OGRStyleTableH;
}
extern "C" {
    pub fn OGR_F_SetStyleTableDirectly(arg1: OGRFeatureH, arg2: OGRStyleTableH);
}
extern "C" {
    pub fn OGR_F_SetStyleTable(arg1: OGRFeatureH, arg2: OGRStyleTableH);
}
extern "C" {
    pub fn OGR_F_GetNativeData(arg1: OGRFeatureH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_F_SetNativeData(arg1: OGRFeatureH, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn OGR_F_GetNativeMediaType(arg1: OGRFeatureH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_F_SetNativeMediaType(arg1: OGRFeatureH, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn OGR_F_FillUnsetWithDefault(
        hFeat: OGRFeatureH,
        bNotNullableOnly: ::std::os::raw::c_int,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OGR_F_Validate(
        arg1: OGRFeatureH,
        nValidateFlags: ::std::os::raw::c_int,
        bEmitError: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type OGRLayerH = *mut ::std::os::raw::c_void;
pub type OGRDataSourceH = *mut ::std::os::raw::c_void;
pub type OGRSFDriverH = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn OGR_L_GetName(arg1: OGRLayerH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_L_GetGeomType(arg1: OGRLayerH) -> OGRwkbGeometryType;
}
extern "C" {
    pub fn OGR_L_GetSpatialFilter(arg1: OGRLayerH) -> OGRGeometryH;
}
extern "C" {
    pub fn OGR_L_SetSpatialFilter(arg1: OGRLayerH, arg2: OGRGeometryH);
}
extern "C" {
    pub fn OGR_L_SetSpatialFilterRect(arg1: OGRLayerH, arg2: f64, arg3: f64, arg4: f64, arg5: f64);
}
extern "C" {
    pub fn OGR_L_SetSpatialFilterEx(
        arg1: OGRLayerH,
        iGeomField: ::std::os::raw::c_int,
        hGeom: OGRGeometryH,
    );
}
extern "C" {
    pub fn OGR_L_SetSpatialFilterRectEx(
        arg1: OGRLayerH,
        iGeomField: ::std::os::raw::c_int,
        dfMinX: f64,
        dfMinY: f64,
        dfMaxX: f64,
        dfMaxY: f64,
    );
}
extern "C" {
    pub fn OGR_L_SetAttributeFilter(arg1: OGRLayerH, arg2: *const ::std::os::raw::c_char)
        -> OGRErr;
}
extern "C" {
    pub fn OGR_L_ResetReading(arg1: OGRLayerH);
}
extern "C" {
    pub fn OGR_L_GetNextFeature(arg1: OGRLayerH) -> OGRFeatureH;
}
extern "C" {
    pub fn OGR_L_SetNextByIndex(arg1: OGRLayerH, arg2: GIntBig) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_GetFeature(arg1: OGRLayerH, arg2: GIntBig) -> OGRFeatureH;
}
extern "C" {
    pub fn OGR_L_SetFeature(arg1: OGRLayerH, arg2: OGRFeatureH) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_CreateFeature(arg1: OGRLayerH, arg2: OGRFeatureH) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_DeleteFeature(arg1: OGRLayerH, arg2: GIntBig) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_GetLayerDefn(arg1: OGRLayerH) -> OGRFeatureDefnH;
}
extern "C" {
    pub fn OGR_L_GetSpatialRef(arg1: OGRLayerH) -> OGRSpatialReferenceH;
}
extern "C" {
    pub fn OGR_L_FindFieldIndex(
        arg1: OGRLayerH,
        arg2: *const ::std::os::raw::c_char,
        bExactMatch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_L_GetFeatureCount(arg1: OGRLayerH, arg2: ::std::os::raw::c_int) -> GIntBig;
}
extern "C" {
    pub fn OGR_L_GetExtent(
        arg1: OGRLayerH,
        arg2: *mut OGREnvelope,
        arg3: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_GetExtentEx(
        arg1: OGRLayerH,
        iGeomField: ::std::os::raw::c_int,
        psExtent: *mut OGREnvelope,
        bForce: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_TestCapability(
        arg1: OGRLayerH,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_L_CreateField(
        arg1: OGRLayerH,
        arg2: OGRFieldDefnH,
        arg3: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_CreateGeomField(
        hLayer: OGRLayerH,
        hFieldDefn: OGRGeomFieldDefnH,
        bForce: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_DeleteField(arg1: OGRLayerH, iField: ::std::os::raw::c_int) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_ReorderFields(arg1: OGRLayerH, panMap: *mut ::std::os::raw::c_int) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_ReorderField(
        arg1: OGRLayerH,
        iOldFieldPos: ::std::os::raw::c_int,
        iNewFieldPos: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_AlterFieldDefn(
        arg1: OGRLayerH,
        iField: ::std::os::raw::c_int,
        hNewFieldDefn: OGRFieldDefnH,
        nFlags: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_StartTransaction(arg1: OGRLayerH) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_CommitTransaction(arg1: OGRLayerH) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_RollbackTransaction(arg1: OGRLayerH) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_Reference(arg1: OGRLayerH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_L_Dereference(arg1: OGRLayerH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_L_GetRefCount(arg1: OGRLayerH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_L_SyncToDisk(arg1: OGRLayerH) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_GetFeaturesRead(arg1: OGRLayerH) -> GIntBig;
}
extern "C" {
    pub fn OGR_L_GetFIDColumn(arg1: OGRLayerH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_L_GetGeometryColumn(arg1: OGRLayerH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_L_GetStyleTable(arg1: OGRLayerH) -> OGRStyleTableH;
}
extern "C" {
    pub fn OGR_L_SetStyleTableDirectly(arg1: OGRLayerH, arg2: OGRStyleTableH);
}
extern "C" {
    pub fn OGR_L_SetStyleTable(arg1: OGRLayerH, arg2: OGRStyleTableH);
}
extern "C" {
    pub fn OGR_L_SetIgnoredFields(
        arg1: OGRLayerH,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_Intersection(
        arg1: OGRLayerH,
        arg2: OGRLayerH,
        arg3: OGRLayerH,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: GDALProgressFunc,
        arg6: *mut ::std::os::raw::c_void,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_Union(
        arg1: OGRLayerH,
        arg2: OGRLayerH,
        arg3: OGRLayerH,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: GDALProgressFunc,
        arg6: *mut ::std::os::raw::c_void,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_SymDifference(
        arg1: OGRLayerH,
        arg2: OGRLayerH,
        arg3: OGRLayerH,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: GDALProgressFunc,
        arg6: *mut ::std::os::raw::c_void,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_Identity(
        arg1: OGRLayerH,
        arg2: OGRLayerH,
        arg3: OGRLayerH,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: GDALProgressFunc,
        arg6: *mut ::std::os::raw::c_void,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_Update(
        arg1: OGRLayerH,
        arg2: OGRLayerH,
        arg3: OGRLayerH,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: GDALProgressFunc,
        arg6: *mut ::std::os::raw::c_void,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_Clip(
        arg1: OGRLayerH,
        arg2: OGRLayerH,
        arg3: OGRLayerH,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: GDALProgressFunc,
        arg6: *mut ::std::os::raw::c_void,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_L_Erase(
        arg1: OGRLayerH,
        arg2: OGRLayerH,
        arg3: OGRLayerH,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: GDALProgressFunc,
        arg6: *mut ::std::os::raw::c_void,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGR_DS_Destroy(arg1: OGRDataSourceH);
}
extern "C" {
    pub fn OGR_DS_GetName(arg1: OGRDataSourceH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_DS_GetLayerCount(arg1: OGRDataSourceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_DS_GetLayer(arg1: OGRDataSourceH, arg2: ::std::os::raw::c_int) -> OGRLayerH;
}
extern "C" {
    pub fn OGR_DS_GetLayerByName(
        arg1: OGRDataSourceH,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRLayerH;
}
extern "C" {
    pub fn OGR_DS_DeleteLayer(arg1: OGRDataSourceH, arg2: ::std::os::raw::c_int) -> OGRErr;
}
extern "C" {
    pub fn OGR_DS_GetDriver(arg1: OGRDataSourceH) -> OGRSFDriverH;
}
extern "C" {
    pub fn OGR_DS_CreateLayer(
        arg1: OGRDataSourceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: OGRSpatialReferenceH,
        arg4: OGRwkbGeometryType,
        arg5: *mut *mut ::std::os::raw::c_char,
    ) -> OGRLayerH;
}
extern "C" {
    pub fn OGR_DS_CopyLayer(
        arg1: OGRDataSourceH,
        arg2: OGRLayerH,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> OGRLayerH;
}
extern "C" {
    pub fn OGR_DS_TestCapability(
        arg1: OGRDataSourceH,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_DS_ExecuteSQL(
        arg1: OGRDataSourceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: OGRGeometryH,
        arg4: *const ::std::os::raw::c_char,
    ) -> OGRLayerH;
}
extern "C" {
    pub fn OGR_DS_ReleaseResultSet(arg1: OGRDataSourceH, arg2: OGRLayerH);
}
extern "C" {
    pub fn OGR_DS_Reference(arg1: OGRDataSourceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_DS_Dereference(arg1: OGRDataSourceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_DS_GetRefCount(arg1: OGRDataSourceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_DS_GetSummaryRefCount(arg1: OGRDataSourceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_DS_SyncToDisk(arg1: OGRDataSourceH) -> OGRErr;
}
extern "C" {
    pub fn OGR_DS_GetStyleTable(arg1: OGRDataSourceH) -> OGRStyleTableH;
}
extern "C" {
    pub fn OGR_DS_SetStyleTableDirectly(arg1: OGRDataSourceH, arg2: OGRStyleTableH);
}
extern "C" {
    pub fn OGR_DS_SetStyleTable(arg1: OGRDataSourceH, arg2: OGRStyleTableH);
}
extern "C" {
    pub fn OGR_Dr_GetName(arg1: OGRSFDriverH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_Dr_Open(
        arg1: OGRSFDriverH,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> OGRDataSourceH;
}
extern "C" {
    pub fn OGR_Dr_TestCapability(
        arg1: OGRSFDriverH,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_Dr_CreateDataSource(
        arg1: OGRSFDriverH,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> OGRDataSourceH;
}
extern "C" {
    pub fn OGR_Dr_CopyDataSource(
        arg1: OGRSFDriverH,
        arg2: OGRDataSourceH,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> OGRDataSourceH;
}
extern "C" {
    pub fn OGR_Dr_DeleteDataSource(
        arg1: OGRSFDriverH,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OGROpen(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut OGRSFDriverH,
    ) -> OGRDataSourceH;
}
extern "C" {
    pub fn OGROpenShared(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut OGRSFDriverH,
    ) -> OGRDataSourceH;
}
extern "C" {
    pub fn OGRReleaseDataSource(arg1: OGRDataSourceH) -> OGRErr;
}
extern "C" {
    pub fn OGRRegisterDriver(arg1: OGRSFDriverH);
}
extern "C" {
    pub fn OGRDeregisterDriver(arg1: OGRSFDriverH);
}
extern "C" {
    pub fn OGRGetDriverCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGRGetDriver(arg1: ::std::os::raw::c_int) -> OGRSFDriverH;
}
extern "C" {
    pub fn OGRGetDriverByName(arg1: *const ::std::os::raw::c_char) -> OGRSFDriverH;
}
extern "C" {
    pub fn OGRGetOpenDSCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGRGetOpenDS(iDS: ::std::os::raw::c_int) -> OGRDataSourceH;
}
extern "C" {
    pub fn OGRRegisterAll();
}
extern "C" {
    pub fn OGRCleanupAll();
}
pub type OGRStyleMgrH = *mut ::std::os::raw::c_void;
pub type OGRStyleToolH = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn OGR_SM_Create(hStyleTable: OGRStyleTableH) -> OGRStyleMgrH;
}
extern "C" {
    pub fn OGR_SM_Destroy(hSM: OGRStyleMgrH);
}
extern "C" {
    pub fn OGR_SM_InitFromFeature(
        hSM: OGRStyleMgrH,
        hFeat: OGRFeatureH,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_SM_InitStyleString(
        hSM: OGRStyleMgrH,
        pszStyleString: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_SM_GetPartCount(
        hSM: OGRStyleMgrH,
        pszStyleString: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_SM_GetPart(
        hSM: OGRStyleMgrH,
        nPartId: ::std::os::raw::c_int,
        pszStyleString: *const ::std::os::raw::c_char,
    ) -> OGRStyleToolH;
}
extern "C" {
    pub fn OGR_SM_AddPart(hSM: OGRStyleMgrH, hST: OGRStyleToolH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_SM_AddStyle(
        hSM: OGRStyleMgrH,
        pszStyleName: *const ::std::os::raw::c_char,
        pszStyleString: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_ST_Create(eClassId: OGRSTClassId) -> OGRStyleToolH;
}
extern "C" {
    pub fn OGR_ST_Destroy(hST: OGRStyleToolH);
}
extern "C" {
    pub fn OGR_ST_GetType(hST: OGRStyleToolH) -> OGRSTClassId;
}
extern "C" {
    pub fn OGR_ST_GetUnit(hST: OGRStyleToolH) -> OGRSTUnitId;
}
extern "C" {
    pub fn OGR_ST_SetUnit(hST: OGRStyleToolH, eUnit: OGRSTUnitId, dfGroundPaperScale: f64);
}
extern "C" {
    pub fn OGR_ST_GetParamStr(
        hST: OGRStyleToolH,
        eParam: ::std::os::raw::c_int,
        bValueIsNull: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_ST_GetParamNum(
        hST: OGRStyleToolH,
        eParam: ::std::os::raw::c_int,
        bValueIsNull: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_ST_GetParamDbl(
        hST: OGRStyleToolH,
        eParam: ::std::os::raw::c_int,
        bValueIsNull: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OGR_ST_SetParamStr(
        hST: OGRStyleToolH,
        eParam: ::std::os::raw::c_int,
        pszValue: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OGR_ST_SetParamNum(
        hST: OGRStyleToolH,
        eParam: ::std::os::raw::c_int,
        nValue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OGR_ST_SetParamDbl(hST: OGRStyleToolH, eParam: ::std::os::raw::c_int, dfValue: f64);
}
extern "C" {
    pub fn OGR_ST_GetStyleString(hST: OGRStyleToolH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_ST_GetRGBFromString(
        hST: OGRStyleToolH,
        pszColor: *const ::std::os::raw::c_char,
        pnRed: *mut ::std::os::raw::c_int,
        pnGreen: *mut ::std::os::raw::c_int,
        pnBlue: *mut ::std::os::raw::c_int,
        pnAlpha: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_STBL_Create() -> OGRStyleTableH;
}
extern "C" {
    pub fn OGR_STBL_Destroy(hSTBL: OGRStyleTableH);
}
extern "C" {
    pub fn OGR_STBL_AddStyle(
        hStyleTable: OGRStyleTableH,
        pszName: *const ::std::os::raw::c_char,
        pszStyleString: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_STBL_SaveStyleTable(
        hStyleTable: OGRStyleTableH,
        pszFilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_STBL_LoadStyleTable(
        hStyleTable: OGRStyleTableH,
        pszFilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OGR_STBL_Find(
        hStyleTable: OGRStyleTableH,
        pszName: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_STBL_ResetStyleStringReading(hStyleTable: OGRStyleTableH);
}
extern "C" {
    pub fn OGR_STBL_GetNextStyle(hStyleTable: OGRStyleTableH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OGR_STBL_GetLastStyleName(hStyleTable: OGRStyleTableH) -> *const ::std::os::raw::c_char;
}
pub const GDALDataType_GDT_Unknown: GDALDataType = 0;
pub const GDALDataType_GDT_Byte: GDALDataType = 1;
pub const GDALDataType_GDT_UInt16: GDALDataType = 2;
pub const GDALDataType_GDT_Int16: GDALDataType = 3;
pub const GDALDataType_GDT_UInt32: GDALDataType = 4;
pub const GDALDataType_GDT_Int32: GDALDataType = 5;
pub const GDALDataType_GDT_Float32: GDALDataType = 6;
pub const GDALDataType_GDT_Float64: GDALDataType = 7;
pub const GDALDataType_GDT_CInt16: GDALDataType = 8;
pub const GDALDataType_GDT_CInt32: GDALDataType = 9;
pub const GDALDataType_GDT_CFloat32: GDALDataType = 10;
pub const GDALDataType_GDT_CFloat64: GDALDataType = 11;
pub const GDALDataType_GDT_TypeCount: GDALDataType = 12;
pub type GDALDataType = ::std::os::raw::c_uint;
extern "C" {
    pub fn GDALGetDataTypeSize(arg1: GDALDataType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetDataTypeSizeBits(eDataType: GDALDataType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetDataTypeSizeBytes(arg1: GDALDataType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDataTypeIsComplex(arg1: GDALDataType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDataTypeIsInteger(arg1: GDALDataType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDataTypeIsFloating(arg1: GDALDataType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDataTypeIsSigned(arg1: GDALDataType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetDataTypeName(arg1: GDALDataType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGetDataTypeByName(arg1: *const ::std::os::raw::c_char) -> GDALDataType;
}
extern "C" {
    pub fn GDALDataTypeUnion(arg1: GDALDataType, arg2: GDALDataType) -> GDALDataType;
}
extern "C" {
    pub fn GDALDataTypeUnionWithValue(
        eDT: GDALDataType,
        dValue: f64,
        bComplex: ::std::os::raw::c_int,
    ) -> GDALDataType;
}
extern "C" {
    pub fn GDALFindDataType(
        nBits: ::std::os::raw::c_int,
        bSigned: ::std::os::raw::c_int,
        bFloating: ::std::os::raw::c_int,
        bComplex: ::std::os::raw::c_int,
    ) -> GDALDataType;
}
extern "C" {
    pub fn GDALFindDataTypeForValue(dValue: f64, bComplex: ::std::os::raw::c_int) -> GDALDataType;
}
extern "C" {
    pub fn GDALAdjustValueToDataType(
        eDT: GDALDataType,
        dfValue: f64,
        pbClamped: *mut ::std::os::raw::c_int,
        pbRounded: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn GDALGetNonComplexDataType(arg1: GDALDataType) -> GDALDataType;
}
extern "C" {
    pub fn GDALDataTypeIsConversionLossy(
        eTypeFrom: GDALDataType,
        eTypeTo: GDALDataType,
    ) -> ::std::os::raw::c_int;
}
pub const GDALAsyncStatusType_GARIO_PENDING: GDALAsyncStatusType = 0;
pub const GDALAsyncStatusType_GARIO_UPDATE: GDALAsyncStatusType = 1;
pub const GDALAsyncStatusType_GARIO_ERROR: GDALAsyncStatusType = 2;
pub const GDALAsyncStatusType_GARIO_COMPLETE: GDALAsyncStatusType = 3;
pub const GDALAsyncStatusType_GARIO_TypeCount: GDALAsyncStatusType = 4;
pub type GDALAsyncStatusType = ::std::os::raw::c_uint;
extern "C" {
    pub fn GDALGetAsyncStatusTypeName(arg1: GDALAsyncStatusType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGetAsyncStatusTypeByName(arg1: *const ::std::os::raw::c_char)
        -> GDALAsyncStatusType;
}
pub const GDALAccess_GA_ReadOnly: GDALAccess = 0;
pub const GDALAccess_GA_Update: GDALAccess = 1;
pub type GDALAccess = ::std::os::raw::c_uint;
pub const GDALRWFlag_GF_Read: GDALRWFlag = 0;
pub const GDALRWFlag_GF_Write: GDALRWFlag = 1;
pub type GDALRWFlag = ::std::os::raw::c_uint;
pub const GDALRIOResampleAlg_GRIORA_NearestNeighbour: GDALRIOResampleAlg = 0;
pub const GDALRIOResampleAlg_GRIORA_Bilinear: GDALRIOResampleAlg = 1;
pub const GDALRIOResampleAlg_GRIORA_Cubic: GDALRIOResampleAlg = 2;
pub const GDALRIOResampleAlg_GRIORA_CubicSpline: GDALRIOResampleAlg = 3;
pub const GDALRIOResampleAlg_GRIORA_Lanczos: GDALRIOResampleAlg = 4;
pub const GDALRIOResampleAlg_GRIORA_Average: GDALRIOResampleAlg = 5;
pub const GDALRIOResampleAlg_GRIORA_Mode: GDALRIOResampleAlg = 6;
pub const GDALRIOResampleAlg_GRIORA_Gauss: GDALRIOResampleAlg = 7;
pub const GDALRIOResampleAlg_GRIORA_LAST: GDALRIOResampleAlg = 7;
pub type GDALRIOResampleAlg = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALRasterIOExtraArg {
    pub nVersion: ::std::os::raw::c_int,
    pub eResampleAlg: GDALRIOResampleAlg,
    pub pfnProgress: GDALProgressFunc,
    pub pProgressData: *mut ::std::os::raw::c_void,
    pub bFloatingPointWindowValidity: ::std::os::raw::c_int,
    pub dfXOff: f64,
    pub dfYOff: f64,
    pub dfXSize: f64,
    pub dfYSize: f64,
}
#[test]
fn bindgen_test_layout_GDALRasterIOExtraArg() {
    assert_eq!(
        ::std::mem::size_of::<GDALRasterIOExtraArg>(),
        64usize,
        concat!("Size of: ", stringify!(GDALRasterIOExtraArg))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALRasterIOExtraArg>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALRasterIOExtraArg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRasterIOExtraArg>())).nVersion as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRasterIOExtraArg),
            "::",
            stringify!(nVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALRasterIOExtraArg>())).eResampleAlg as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRasterIOExtraArg),
            "::",
            stringify!(eResampleAlg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALRasterIOExtraArg>())).pfnProgress as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRasterIOExtraArg),
            "::",
            stringify!(pfnProgress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALRasterIOExtraArg>())).pProgressData as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRasterIOExtraArg),
            "::",
            stringify!(pProgressData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALRasterIOExtraArg>())).bFloatingPointWindowValidity
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRasterIOExtraArg),
            "::",
            stringify!(bFloatingPointWindowValidity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRasterIOExtraArg>())).dfXOff as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRasterIOExtraArg),
            "::",
            stringify!(dfXOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRasterIOExtraArg>())).dfYOff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRasterIOExtraArg),
            "::",
            stringify!(dfYOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRasterIOExtraArg>())).dfXSize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRasterIOExtraArg),
            "::",
            stringify!(dfXSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRasterIOExtraArg>())).dfYSize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRasterIOExtraArg),
            "::",
            stringify!(dfYSize)
        )
    );
}
pub const GDALColorInterp_GCI_Undefined: GDALColorInterp = 0;
pub const GDALColorInterp_GCI_GrayIndex: GDALColorInterp = 1;
pub const GDALColorInterp_GCI_PaletteIndex: GDALColorInterp = 2;
pub const GDALColorInterp_GCI_RedBand: GDALColorInterp = 3;
pub const GDALColorInterp_GCI_GreenBand: GDALColorInterp = 4;
pub const GDALColorInterp_GCI_BlueBand: GDALColorInterp = 5;
pub const GDALColorInterp_GCI_AlphaBand: GDALColorInterp = 6;
pub const GDALColorInterp_GCI_HueBand: GDALColorInterp = 7;
pub const GDALColorInterp_GCI_SaturationBand: GDALColorInterp = 8;
pub const GDALColorInterp_GCI_LightnessBand: GDALColorInterp = 9;
pub const GDALColorInterp_GCI_CyanBand: GDALColorInterp = 10;
pub const GDALColorInterp_GCI_MagentaBand: GDALColorInterp = 11;
pub const GDALColorInterp_GCI_YellowBand: GDALColorInterp = 12;
pub const GDALColorInterp_GCI_BlackBand: GDALColorInterp = 13;
pub const GDALColorInterp_GCI_YCbCr_YBand: GDALColorInterp = 14;
pub const GDALColorInterp_GCI_YCbCr_CbBand: GDALColorInterp = 15;
pub const GDALColorInterp_GCI_YCbCr_CrBand: GDALColorInterp = 16;
pub const GDALColorInterp_GCI_Max: GDALColorInterp = 16;
pub type GDALColorInterp = ::std::os::raw::c_uint;
extern "C" {
    pub fn GDALGetColorInterpretationName(arg1: GDALColorInterp) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGetColorInterpretationByName(
        pszName: *const ::std::os::raw::c_char,
    ) -> GDALColorInterp;
}
pub const GDALPaletteInterp_GPI_Gray: GDALPaletteInterp = 0;
pub const GDALPaletteInterp_GPI_RGB: GDALPaletteInterp = 1;
pub const GDALPaletteInterp_GPI_CMYK: GDALPaletteInterp = 2;
pub const GDALPaletteInterp_GPI_HLS: GDALPaletteInterp = 3;
pub type GDALPaletteInterp = ::std::os::raw::c_uint;
extern "C" {
    pub fn GDALGetPaletteInterpretationName(
        arg1: GDALPaletteInterp,
    ) -> *const ::std::os::raw::c_char;
}
pub type GDALMajorObjectH = *mut ::std::os::raw::c_void;
pub type GDALDatasetH = *mut ::std::os::raw::c_void;
pub type GDALRasterBandH = *mut ::std::os::raw::c_void;
pub type GDALDriverH = *mut ::std::os::raw::c_void;
pub type GDALColorTableH = *mut ::std::os::raw::c_void;
pub type GDALRasterAttributeTableH = *mut ::std::os::raw::c_void;
pub type GDALAsyncReaderH = *mut ::std::os::raw::c_void;
pub type GSpacing = GIntBig;
pub const GDALExtendedDataTypeClass_GEDTC_NUMERIC: GDALExtendedDataTypeClass = 0;
pub const GDALExtendedDataTypeClass_GEDTC_STRING: GDALExtendedDataTypeClass = 1;
pub const GDALExtendedDataTypeClass_GEDTC_COMPOUND: GDALExtendedDataTypeClass = 2;
pub type GDALExtendedDataTypeClass = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALExtendedDataTypeHS {
    _unused: [u8; 0],
}
pub type GDALExtendedDataTypeH = *mut GDALExtendedDataTypeHS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALEDTComponentHS {
    _unused: [u8; 0],
}
pub type GDALEDTComponentH = *mut GDALEDTComponentHS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALGroupHS {
    _unused: [u8; 0],
}
pub type GDALGroupH = *mut GDALGroupHS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALMDArrayHS {
    _unused: [u8; 0],
}
pub type GDALMDArrayH = *mut GDALMDArrayHS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALAttributeHS {
    _unused: [u8; 0],
}
pub type GDALAttributeH = *mut GDALAttributeHS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALDimensionHS {
    _unused: [u8; 0],
}
pub type GDALDimensionH = *mut GDALDimensionHS;
extern "C" {
    pub fn GDALAllRegister();
}
extern "C" {
    pub fn GDALCreate(
        hDriver: GDALDriverH,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: GDALDataType,
        arg6: CSLConstList,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALCreateCopy(
        arg1: GDALDriverH,
        arg2: *const ::std::os::raw::c_char,
        arg3: GDALDatasetH,
        arg4: ::std::os::raw::c_int,
        arg5: CSLConstList,
        arg6: GDALProgressFunc,
        arg7: *mut ::std::os::raw::c_void,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALIdentifyDriver(
        pszFilename: *const ::std::os::raw::c_char,
        papszFileList: CSLConstList,
    ) -> GDALDriverH;
}
extern "C" {
    pub fn GDALIdentifyDriverEx(
        pszFilename: *const ::std::os::raw::c_char,
        nIdentifyFlags: ::std::os::raw::c_uint,
        papszAllowedDrivers: *const *const ::std::os::raw::c_char,
        papszFileList: *const *const ::std::os::raw::c_char,
    ) -> GDALDriverH;
}
extern "C" {
    pub fn GDALOpen(
        pszFilename: *const ::std::os::raw::c_char,
        eAccess: GDALAccess,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALOpenShared(arg1: *const ::std::os::raw::c_char, arg2: GDALAccess) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALOpenEx(
        pszFilename: *const ::std::os::raw::c_char,
        nOpenFlags: ::std::os::raw::c_uint,
        papszAllowedDrivers: *const *const ::std::os::raw::c_char,
        papszOpenOptions: *const *const ::std::os::raw::c_char,
        papszSiblingFiles: *const *const ::std::os::raw::c_char,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALDumpOpenDatasets(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetDriverByName(arg1: *const ::std::os::raw::c_char) -> GDALDriverH;
}
extern "C" {
    pub fn GDALGetDriverCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetDriver(arg1: ::std::os::raw::c_int) -> GDALDriverH;
}
extern "C" {
    pub fn GDALCreateDriver() -> GDALDriverH;
}
extern "C" {
    pub fn GDALDestroyDriver(arg1: GDALDriverH);
}
extern "C" {
    pub fn GDALRegisterDriver(arg1: GDALDriverH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDeregisterDriver(arg1: GDALDriverH);
}
extern "C" {
    pub fn GDALDestroyDriverManager();
}
extern "C" {
    pub fn GDALDestroy();
}
extern "C" {
    pub fn GDALDeleteDataset(arg1: GDALDriverH, arg2: *const ::std::os::raw::c_char) -> CPLErr;
}
extern "C" {
    pub fn GDALRenameDataset(
        arg1: GDALDriverH,
        pszNewName: *const ::std::os::raw::c_char,
        pszOldName: *const ::std::os::raw::c_char,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALCopyDatasetFiles(
        arg1: GDALDriverH,
        pszNewName: *const ::std::os::raw::c_char,
        pszOldName: *const ::std::os::raw::c_char,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALValidateCreationOptions(
        arg1: GDALDriverH,
        papszCreationOptions: CSLConstList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetDriverShortName(arg1: GDALDriverH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGetDriverLongName(arg1: GDALDriverH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGetDriverHelpTopic(arg1: GDALDriverH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGetDriverCreationOptionList(arg1: GDALDriverH) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDAL_GCP {
    pub pszId: *mut ::std::os::raw::c_char,
    pub pszInfo: *mut ::std::os::raw::c_char,
    pub dfGCPPixel: f64,
    pub dfGCPLine: f64,
    pub dfGCPX: f64,
    pub dfGCPY: f64,
    pub dfGCPZ: f64,
}
#[test]
fn bindgen_test_layout_GDAL_GCP() {
    assert_eq!(
        ::std::mem::size_of::<GDAL_GCP>(),
        56usize,
        concat!("Size of: ", stringify!(GDAL_GCP))
    );
    assert_eq!(
        ::std::mem::align_of::<GDAL_GCP>(),
        8usize,
        concat!("Alignment of ", stringify!(GDAL_GCP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDAL_GCP>())).pszId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDAL_GCP),
            "::",
            stringify!(pszId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDAL_GCP>())).pszInfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDAL_GCP),
            "::",
            stringify!(pszInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDAL_GCP>())).dfGCPPixel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDAL_GCP),
            "::",
            stringify!(dfGCPPixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDAL_GCP>())).dfGCPLine as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDAL_GCP),
            "::",
            stringify!(dfGCPLine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDAL_GCP>())).dfGCPX as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDAL_GCP),
            "::",
            stringify!(dfGCPX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDAL_GCP>())).dfGCPY as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDAL_GCP),
            "::",
            stringify!(dfGCPY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDAL_GCP>())).dfGCPZ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDAL_GCP),
            "::",
            stringify!(dfGCPZ)
        )
    );
}
extern "C" {
    pub fn GDALInitGCPs(arg1: ::std::os::raw::c_int, arg2: *mut GDAL_GCP);
}
extern "C" {
    pub fn GDALDeinitGCPs(arg1: ::std::os::raw::c_int, arg2: *mut GDAL_GCP);
}
extern "C" {
    pub fn GDALDuplicateGCPs(arg1: ::std::os::raw::c_int, arg2: *const GDAL_GCP) -> *mut GDAL_GCP;
}
extern "C" {
    pub fn GDALGCPsToGeoTransform(
        nGCPCount: ::std::os::raw::c_int,
        pasGCPs: *const GDAL_GCP,
        padfGeoTransform: *mut f64,
        bApproxOK: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALInvGeoTransform(
        padfGeoTransformIn: *mut f64,
        padfInvGeoTransformOut: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALApplyGeoTransform(
        arg1: *mut f64,
        arg2: f64,
        arg3: f64,
        arg4: *mut f64,
        arg5: *mut f64,
    );
}
extern "C" {
    pub fn GDALComposeGeoTransforms(
        padfGeoTransform1: *const f64,
        padfGeoTransform2: *const f64,
        padfGeoTransformOut: *mut f64,
    );
}
extern "C" {
    pub fn GDALGetMetadataDomainList(hObject: GDALMajorObjectH)
        -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGetMetadata(
        arg1: GDALMajorObjectH,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALSetMetadata(
        arg1: GDALMajorObjectH,
        arg2: CSLConstList,
        arg3: *const ::std::os::raw::c_char,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetMetadataItem(
        arg1: GDALMajorObjectH,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALSetMetadataItem(
        arg1: GDALMajorObjectH,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetDescription(arg1: GDALMajorObjectH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALSetDescription(arg1: GDALMajorObjectH, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn GDALGetDatasetDriver(arg1: GDALDatasetH) -> GDALDriverH;
}
extern "C" {
    pub fn GDALGetFileList(arg1: GDALDatasetH) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALClose(arg1: GDALDatasetH);
}
extern "C" {
    pub fn GDALGetRasterXSize(arg1: GDALDatasetH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetRasterYSize(arg1: GDALDatasetH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetRasterCount(arg1: GDALDatasetH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetRasterBand(arg1: GDALDatasetH, arg2: ::std::os::raw::c_int) -> GDALRasterBandH;
}
extern "C" {
    pub fn GDALAddBand(
        hDS: GDALDatasetH,
        eType: GDALDataType,
        papszOptions: CSLConstList,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALBeginAsyncReader(
        hDS: GDALDatasetH,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        pBuf: *mut ::std::os::raw::c_void,
        nBufXSize: ::std::os::raw::c_int,
        nBufYSize: ::std::os::raw::c_int,
        eBufType: GDALDataType,
        nBandCount: ::std::os::raw::c_int,
        panBandMap: *mut ::std::os::raw::c_int,
        nPixelSpace: ::std::os::raw::c_int,
        nLineSpace: ::std::os::raw::c_int,
        nBandSpace: ::std::os::raw::c_int,
        papszOptions: CSLConstList,
    ) -> GDALAsyncReaderH;
}
extern "C" {
    pub fn GDALEndAsyncReader(hDS: GDALDatasetH, hAsynchReaderH: GDALAsyncReaderH);
}
extern "C" {
    pub fn GDALDatasetRasterIO(
        hDS: GDALDatasetH,
        eRWFlag: GDALRWFlag,
        nDSXOff: ::std::os::raw::c_int,
        nDSYOff: ::std::os::raw::c_int,
        nDSXSize: ::std::os::raw::c_int,
        nDSYSize: ::std::os::raw::c_int,
        pBuffer: *mut ::std::os::raw::c_void,
        nBXSize: ::std::os::raw::c_int,
        nBYSize: ::std::os::raw::c_int,
        eBDataType: GDALDataType,
        nBandCount: ::std::os::raw::c_int,
        panBandCount: *mut ::std::os::raw::c_int,
        nPixelSpace: ::std::os::raw::c_int,
        nLineSpace: ::std::os::raw::c_int,
        nBandSpace: ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALDatasetRasterIOEx(
        hDS: GDALDatasetH,
        eRWFlag: GDALRWFlag,
        nDSXOff: ::std::os::raw::c_int,
        nDSYOff: ::std::os::raw::c_int,
        nDSXSize: ::std::os::raw::c_int,
        nDSYSize: ::std::os::raw::c_int,
        pBuffer: *mut ::std::os::raw::c_void,
        nBXSize: ::std::os::raw::c_int,
        nBYSize: ::std::os::raw::c_int,
        eBDataType: GDALDataType,
        nBandCount: ::std::os::raw::c_int,
        panBandCount: *mut ::std::os::raw::c_int,
        nPixelSpace: GSpacing,
        nLineSpace: GSpacing,
        nBandSpace: GSpacing,
        psExtraArg: *mut GDALRasterIOExtraArg,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALDatasetAdviseRead(
        hDS: GDALDatasetH,
        nDSXOff: ::std::os::raw::c_int,
        nDSYOff: ::std::os::raw::c_int,
        nDSXSize: ::std::os::raw::c_int,
        nDSYSize: ::std::os::raw::c_int,
        nBXSize: ::std::os::raw::c_int,
        nBYSize: ::std::os::raw::c_int,
        eBDataType: GDALDataType,
        nBandCount: ::std::os::raw::c_int,
        panBandCount: *mut ::std::os::raw::c_int,
        papszOptions: CSLConstList,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetProjectionRef(arg1: GDALDatasetH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGetSpatialRef(arg1: GDALDatasetH) -> OGRSpatialReferenceH;
}
extern "C" {
    pub fn GDALSetProjection(arg1: GDALDatasetH, arg2: *const ::std::os::raw::c_char) -> CPLErr;
}
extern "C" {
    pub fn GDALSetSpatialRef(arg1: GDALDatasetH, arg2: OGRSpatialReferenceH) -> CPLErr;
}
extern "C" {
    pub fn GDALGetGeoTransform(arg1: GDALDatasetH, arg2: *mut f64) -> CPLErr;
}
extern "C" {
    pub fn GDALSetGeoTransform(arg1: GDALDatasetH, arg2: *mut f64) -> CPLErr;
}
extern "C" {
    pub fn GDALGetGCPCount(arg1: GDALDatasetH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetGCPProjection(arg1: GDALDatasetH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGetGCPSpatialRef(arg1: GDALDatasetH) -> OGRSpatialReferenceH;
}
extern "C" {
    pub fn GDALGetGCPs(arg1: GDALDatasetH) -> *const GDAL_GCP;
}
extern "C" {
    pub fn GDALSetGCPs(
        arg1: GDALDatasetH,
        arg2: ::std::os::raw::c_int,
        arg3: *const GDAL_GCP,
        arg4: *const ::std::os::raw::c_char,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALSetGCPs2(
        arg1: GDALDatasetH,
        arg2: ::std::os::raw::c_int,
        arg3: *const GDAL_GCP,
        arg4: OGRSpatialReferenceH,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetInternalHandle(
        arg1: GDALDatasetH,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALReferenceDataset(arg1: GDALDatasetH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDereferenceDataset(arg1: GDALDatasetH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALReleaseDataset(arg1: GDALDatasetH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALBuildOverviews(
        arg1: GDALDatasetH,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: GDALProgressFunc,
        arg8: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetOpenDatasets(hDS: *mut *mut GDALDatasetH, pnCount: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn GDALGetAccess(hDS: GDALDatasetH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALFlushCache(hDS: GDALDatasetH);
}
extern "C" {
    pub fn GDALCreateDatasetMaskBand(hDS: GDALDatasetH, nFlags: ::std::os::raw::c_int) -> CPLErr;
}
extern "C" {
    pub fn GDALDatasetCopyWholeRaster(
        hSrcDS: GDALDatasetH,
        hDstDS: GDALDatasetH,
        papszOptions: CSLConstList,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRasterBandCopyWholeRaster(
        hSrcBand: GDALRasterBandH,
        hDstBand: GDALRasterBandH,
        constpapszOptions: *const *const ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRegenerateOverviews(
        hSrcBand: GDALRasterBandH,
        nOverviewCount: ::std::os::raw::c_int,
        pahOverviewBands: *mut GDALRasterBandH,
        pszResampling: *const ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALDatasetGetLayerCount(arg1: GDALDatasetH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDatasetGetLayer(arg1: GDALDatasetH, arg2: ::std::os::raw::c_int) -> OGRLayerH;
}
extern "C" {
    pub fn GDALDatasetGetLayerByName(
        arg1: GDALDatasetH,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRLayerH;
}
extern "C" {
    pub fn GDALDatasetDeleteLayer(arg1: GDALDatasetH, arg2: ::std::os::raw::c_int) -> OGRErr;
}
extern "C" {
    pub fn GDALDatasetCreateLayer(
        arg1: GDALDatasetH,
        arg2: *const ::std::os::raw::c_char,
        arg3: OGRSpatialReferenceH,
        arg4: OGRwkbGeometryType,
        arg5: CSLConstList,
    ) -> OGRLayerH;
}
extern "C" {
    pub fn GDALDatasetCopyLayer(
        arg1: GDALDatasetH,
        arg2: OGRLayerH,
        arg3: *const ::std::os::raw::c_char,
        arg4: CSLConstList,
    ) -> OGRLayerH;
}
extern "C" {
    pub fn GDALDatasetResetReading(arg1: GDALDatasetH);
}
extern "C" {
    pub fn GDALDatasetGetNextFeature(
        hDS: GDALDatasetH,
        phBelongingLayer: *mut OGRLayerH,
        pdfProgressPct: *mut f64,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> OGRFeatureH;
}
extern "C" {
    pub fn GDALDatasetTestCapability(
        arg1: GDALDatasetH,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDatasetExecuteSQL(
        arg1: GDALDatasetH,
        arg2: *const ::std::os::raw::c_char,
        arg3: OGRGeometryH,
        arg4: *const ::std::os::raw::c_char,
    ) -> OGRLayerH;
}
extern "C" {
    pub fn GDALDatasetReleaseResultSet(arg1: GDALDatasetH, arg2: OGRLayerH);
}
extern "C" {
    pub fn GDALDatasetGetStyleTable(arg1: GDALDatasetH) -> OGRStyleTableH;
}
extern "C" {
    pub fn GDALDatasetSetStyleTableDirectly(arg1: GDALDatasetH, arg2: OGRStyleTableH);
}
extern "C" {
    pub fn GDALDatasetSetStyleTable(arg1: GDALDatasetH, arg2: OGRStyleTableH);
}
extern "C" {
    pub fn GDALDatasetStartTransaction(hDS: GDALDatasetH, bForce: ::std::os::raw::c_int) -> OGRErr;
}
extern "C" {
    pub fn GDALDatasetCommitTransaction(hDS: GDALDatasetH) -> OGRErr;
}
extern "C" {
    pub fn GDALDatasetRollbackTransaction(hDS: GDALDatasetH) -> OGRErr;
}
pub type GDALDerivedPixelFunc = ::std::option::Option<
    unsafe extern "C" fn(
        papoSources: *mut *mut ::std::os::raw::c_void,
        nSources: ::std::os::raw::c_int,
        pData: *mut ::std::os::raw::c_void,
        nBufXSize: ::std::os::raw::c_int,
        nBufYSize: ::std::os::raw::c_int,
        eSrcType: GDALDataType,
        eBufType: GDALDataType,
        nPixelSpace: ::std::os::raw::c_int,
        nLineSpace: ::std::os::raw::c_int,
    ) -> CPLErr,
>;
extern "C" {
    pub fn GDALGetRasterDataType(arg1: GDALRasterBandH) -> GDALDataType;
}
extern "C" {
    pub fn GDALGetBlockSize(
        arg1: GDALRasterBandH,
        pnXSize: *mut ::std::os::raw::c_int,
        pnYSize: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GDALGetActualBlockSize(
        arg1: GDALRasterBandH,
        nXBlockOff: ::std::os::raw::c_int,
        nYBlockOff: ::std::os::raw::c_int,
        pnXValid: *mut ::std::os::raw::c_int,
        pnYValid: *mut ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRasterAdviseRead(
        hRB: GDALRasterBandH,
        nDSXOff: ::std::os::raw::c_int,
        nDSYOff: ::std::os::raw::c_int,
        nDSXSize: ::std::os::raw::c_int,
        nDSYSize: ::std::os::raw::c_int,
        nBXSize: ::std::os::raw::c_int,
        nBYSize: ::std::os::raw::c_int,
        eBDataType: GDALDataType,
        papszOptions: CSLConstList,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRasterIO(
        hRBand: GDALRasterBandH,
        eRWFlag: GDALRWFlag,
        nDSXOff: ::std::os::raw::c_int,
        nDSYOff: ::std::os::raw::c_int,
        nDSXSize: ::std::os::raw::c_int,
        nDSYSize: ::std::os::raw::c_int,
        pBuffer: *mut ::std::os::raw::c_void,
        nBXSize: ::std::os::raw::c_int,
        nBYSize: ::std::os::raw::c_int,
        eBDataType: GDALDataType,
        nPixelSpace: ::std::os::raw::c_int,
        nLineSpace: ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRasterIOEx(
        hRBand: GDALRasterBandH,
        eRWFlag: GDALRWFlag,
        nDSXOff: ::std::os::raw::c_int,
        nDSYOff: ::std::os::raw::c_int,
        nDSXSize: ::std::os::raw::c_int,
        nDSYSize: ::std::os::raw::c_int,
        pBuffer: *mut ::std::os::raw::c_void,
        nBXSize: ::std::os::raw::c_int,
        nBYSize: ::std::os::raw::c_int,
        eBDataType: GDALDataType,
        nPixelSpace: GSpacing,
        nLineSpace: GSpacing,
        psExtraArg: *mut GDALRasterIOExtraArg,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALReadBlock(
        arg1: GDALRasterBandH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALWriteBlock(
        arg1: GDALRasterBandH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetRasterBandXSize(arg1: GDALRasterBandH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetRasterBandYSize(arg1: GDALRasterBandH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetRasterAccess(arg1: GDALRasterBandH) -> GDALAccess;
}
extern "C" {
    pub fn GDALGetBandNumber(arg1: GDALRasterBandH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetBandDataset(arg1: GDALRasterBandH) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALGetRasterColorInterpretation(arg1: GDALRasterBandH) -> GDALColorInterp;
}
extern "C" {
    pub fn GDALSetRasterColorInterpretation(arg1: GDALRasterBandH, arg2: GDALColorInterp)
        -> CPLErr;
}
extern "C" {
    pub fn GDALGetRasterColorTable(arg1: GDALRasterBandH) -> GDALColorTableH;
}
extern "C" {
    pub fn GDALSetRasterColorTable(arg1: GDALRasterBandH, arg2: GDALColorTableH) -> CPLErr;
}
extern "C" {
    pub fn GDALHasArbitraryOverviews(arg1: GDALRasterBandH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetOverviewCount(arg1: GDALRasterBandH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetOverview(arg1: GDALRasterBandH, arg2: ::std::os::raw::c_int) -> GDALRasterBandH;
}
extern "C" {
    pub fn GDALGetRasterNoDataValue(arg1: GDALRasterBandH, arg2: *mut ::std::os::raw::c_int)
        -> f64;
}
extern "C" {
    pub fn GDALSetRasterNoDataValue(arg1: GDALRasterBandH, arg2: f64) -> CPLErr;
}
extern "C" {
    pub fn GDALDeleteRasterNoDataValue(arg1: GDALRasterBandH) -> CPLErr;
}
extern "C" {
    pub fn GDALGetRasterCategoryNames(arg1: GDALRasterBandH) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALSetRasterCategoryNames(arg1: GDALRasterBandH, arg2: CSLConstList) -> CPLErr;
}
extern "C" {
    pub fn GDALGetRasterMinimum(
        arg1: GDALRasterBandH,
        pbSuccess: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn GDALGetRasterMaximum(
        arg1: GDALRasterBandH,
        pbSuccess: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn GDALGetRasterStatistics(
        arg1: GDALRasterBandH,
        bApproxOK: ::std::os::raw::c_int,
        bForce: ::std::os::raw::c_int,
        pdfMin: *mut f64,
        pdfMax: *mut f64,
        pdfMean: *mut f64,
        pdfStdDev: *mut f64,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALComputeRasterStatistics(
        arg1: GDALRasterBandH,
        bApproxOK: ::std::os::raw::c_int,
        pdfMin: *mut f64,
        pdfMax: *mut f64,
        pdfMean: *mut f64,
        pdfStdDev: *mut f64,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALSetRasterStatistics(
        hBand: GDALRasterBandH,
        dfMin: f64,
        dfMax: f64,
        dfMean: f64,
        dfStdDev: f64,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRasterBandAsMDArray(arg1: GDALRasterBandH) -> GDALMDArrayH;
}
extern "C" {
    pub fn GDALGetRasterUnitType(arg1: GDALRasterBandH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALSetRasterUnitType(
        hBand: GDALRasterBandH,
        pszNewValue: *const ::std::os::raw::c_char,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetRasterOffset(arg1: GDALRasterBandH, pbSuccess: *mut ::std::os::raw::c_int)
        -> f64;
}
extern "C" {
    pub fn GDALSetRasterOffset(hBand: GDALRasterBandH, dfNewOffset: f64) -> CPLErr;
}
extern "C" {
    pub fn GDALGetRasterScale(arg1: GDALRasterBandH, pbSuccess: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn GDALSetRasterScale(hBand: GDALRasterBandH, dfNewOffset: f64) -> CPLErr;
}
extern "C" {
    pub fn GDALComputeRasterMinMax(
        hBand: GDALRasterBandH,
        bApproxOK: ::std::os::raw::c_int,
        adfMinMax: *mut f64,
    );
}
extern "C" {
    pub fn GDALFlushRasterCache(hBand: GDALRasterBandH) -> CPLErr;
}
extern "C" {
    pub fn GDALGetRasterHistogram(
        hBand: GDALRasterBandH,
        dfMin: f64,
        dfMax: f64,
        nBuckets: ::std::os::raw::c_int,
        panHistogram: *mut ::std::os::raw::c_int,
        bIncludeOutOfRange: ::std::os::raw::c_int,
        bApproxOK: ::std::os::raw::c_int,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetRasterHistogramEx(
        hBand: GDALRasterBandH,
        dfMin: f64,
        dfMax: f64,
        nBuckets: ::std::os::raw::c_int,
        panHistogram: *mut GUIntBig,
        bIncludeOutOfRange: ::std::os::raw::c_int,
        bApproxOK: ::std::os::raw::c_int,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetDefaultHistogram(
        hBand: GDALRasterBandH,
        pdfMin: *mut f64,
        pdfMax: *mut f64,
        pnBuckets: *mut ::std::os::raw::c_int,
        ppanHistogram: *mut *mut ::std::os::raw::c_int,
        bForce: ::std::os::raw::c_int,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetDefaultHistogramEx(
        hBand: GDALRasterBandH,
        pdfMin: *mut f64,
        pdfMax: *mut f64,
        pnBuckets: *mut ::std::os::raw::c_int,
        ppanHistogram: *mut *mut GUIntBig,
        bForce: ::std::os::raw::c_int,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALSetDefaultHistogram(
        hBand: GDALRasterBandH,
        dfMin: f64,
        dfMax: f64,
        nBuckets: ::std::os::raw::c_int,
        panHistogram: *mut ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALSetDefaultHistogramEx(
        hBand: GDALRasterBandH,
        dfMin: f64,
        dfMax: f64,
        nBuckets: ::std::os::raw::c_int,
        panHistogram: *mut GUIntBig,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetRandomRasterSample(
        arg1: GDALRasterBandH,
        arg2: ::std::os::raw::c_int,
        arg3: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetRasterSampleOverview(
        arg1: GDALRasterBandH,
        arg2: ::std::os::raw::c_int,
    ) -> GDALRasterBandH;
}
extern "C" {
    pub fn GDALGetRasterSampleOverviewEx(arg1: GDALRasterBandH, arg2: GUIntBig) -> GDALRasterBandH;
}
extern "C" {
    pub fn GDALFillRaster(
        hBand: GDALRasterBandH,
        dfRealValue: f64,
        dfImaginaryValue: f64,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALComputeBandStats(
        hBand: GDALRasterBandH,
        nSampleStep: ::std::os::raw::c_int,
        pdfMean: *mut f64,
        pdfStdDev: *mut f64,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALOverviewMagnitudeCorrection(
        hBaseBand: GDALRasterBandH,
        nOverviewCount: ::std::os::raw::c_int,
        pahOverviews: *mut GDALRasterBandH,
        pfnProgress: GDALProgressFunc,
        pProgressData: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetDefaultRAT(hBand: GDALRasterBandH) -> GDALRasterAttributeTableH;
}
extern "C" {
    pub fn GDALSetDefaultRAT(arg1: GDALRasterBandH, arg2: GDALRasterAttributeTableH) -> CPLErr;
}
extern "C" {
    pub fn GDALAddDerivedBandPixelFunc(
        pszName: *const ::std::os::raw::c_char,
        pfnPixelFunc: GDALDerivedPixelFunc,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALGetMaskBand(hBand: GDALRasterBandH) -> GDALRasterBandH;
}
extern "C" {
    pub fn GDALGetMaskFlags(hBand: GDALRasterBandH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALCreateMaskBand(hBand: GDALRasterBandH, nFlags: ::std::os::raw::c_int) -> CPLErr;
}
extern "C" {
    pub fn GDALGetDataCoverageStatus(
        hBand: GDALRasterBandH,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        nMaskFlagStop: ::std::os::raw::c_int,
        pdfDataPct: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALARGetNextUpdatedRegion(
        hARIO: GDALAsyncReaderH,
        dfTimeout: f64,
        pnXBufOff: *mut ::std::os::raw::c_int,
        pnYBufOff: *mut ::std::os::raw::c_int,
        pnXBufSize: *mut ::std::os::raw::c_int,
        pnYBufSize: *mut ::std::os::raw::c_int,
    ) -> GDALAsyncStatusType;
}
extern "C" {
    pub fn GDALARLockBuffer(hARIO: GDALAsyncReaderH, dfTimeout: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALARUnlockBuffer(hARIO: GDALAsyncReaderH);
}
extern "C" {
    pub fn GDALGeneralCmdLineProcessor(
        nArgc: ::std::os::raw::c_int,
        ppapszArgv: *mut *mut *mut ::std::os::raw::c_char,
        nOptions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALSwapWords(
        pData: *mut ::std::os::raw::c_void,
        nWordSize: ::std::os::raw::c_int,
        nWordCount: ::std::os::raw::c_int,
        nWordSkip: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GDALSwapWordsEx(
        pData: *mut ::std::os::raw::c_void,
        nWordSize: ::std::os::raw::c_int,
        nWordCount: size_t,
        nWordSkip: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GDALCopyWords(
        pSrcData: *const ::std::os::raw::c_void,
        eSrcType: GDALDataType,
        nSrcPixelOffset: ::std::os::raw::c_int,
        pDstData: *mut ::std::os::raw::c_void,
        eDstType: GDALDataType,
        nDstPixelOffset: ::std::os::raw::c_int,
        nWordCount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GDALCopyWords64(
        pSrcData: *const ::std::os::raw::c_void,
        eSrcType: GDALDataType,
        nSrcPixelOffset: ::std::os::raw::c_int,
        pDstData: *mut ::std::os::raw::c_void,
        eDstType: GDALDataType,
        nDstPixelOffset: ::std::os::raw::c_int,
        nWordCount: GPtrDiff_t,
    );
}
extern "C" {
    pub fn GDALCopyBits(
        pabySrcData: *const GByte,
        nSrcOffset: ::std::os::raw::c_int,
        nSrcStep: ::std::os::raw::c_int,
        pabyDstData: *mut GByte,
        nDstOffset: ::std::os::raw::c_int,
        nDstStep: ::std::os::raw::c_int,
        nBitCount: ::std::os::raw::c_int,
        nStepCount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GDALLoadWorldFile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALReadWorldFile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALWriteWorldFile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALLoadTabFile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut f64,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut *mut GDAL_GCP,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALReadTabFile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut f64,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut *mut GDAL_GCP,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALLoadOziMapFile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut f64,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut *mut GDAL_GCP,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALReadOziMapFile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut f64,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut *mut GDAL_GCP,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDecToDMS(
        arg1: f64,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALPackedDMSToDec(arg1: f64) -> f64;
}
extern "C" {
    pub fn GDALDecToPackedDMS(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALRPCInfo {
    pub dfLINE_OFF: f64,
    pub dfSAMP_OFF: f64,
    pub dfLAT_OFF: f64,
    pub dfLONG_OFF: f64,
    pub dfHEIGHT_OFF: f64,
    pub dfLINE_SCALE: f64,
    pub dfSAMP_SCALE: f64,
    pub dfLAT_SCALE: f64,
    pub dfLONG_SCALE: f64,
    pub dfHEIGHT_SCALE: f64,
    pub adfLINE_NUM_COEFF: [f64; 20usize],
    pub adfLINE_DEN_COEFF: [f64; 20usize],
    pub adfSAMP_NUM_COEFF: [f64; 20usize],
    pub adfSAMP_DEN_COEFF: [f64; 20usize],
    pub dfMIN_LONG: f64,
    pub dfMIN_LAT: f64,
    pub dfMAX_LONG: f64,
    pub dfMAX_LAT: f64,
}
#[test]
fn bindgen_test_layout_GDALRPCInfo() {
    assert_eq!(
        ::std::mem::size_of::<GDALRPCInfo>(),
        752usize,
        concat!("Size of: ", stringify!(GDALRPCInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALRPCInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALRPCInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfLINE_OFF as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfLINE_OFF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfSAMP_OFF as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfSAMP_OFF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfLAT_OFF as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfLAT_OFF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfLONG_OFF as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfLONG_OFF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfHEIGHT_OFF as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfHEIGHT_OFF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfLINE_SCALE as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfLINE_SCALE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfSAMP_SCALE as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfSAMP_SCALE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfLAT_SCALE as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfLAT_SCALE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfLONG_SCALE as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfLONG_SCALE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfHEIGHT_SCALE as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfHEIGHT_SCALE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).adfLINE_NUM_COEFF as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(adfLINE_NUM_COEFF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).adfLINE_DEN_COEFF as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(adfLINE_DEN_COEFF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).adfSAMP_NUM_COEFF as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(adfSAMP_NUM_COEFF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).adfSAMP_DEN_COEFF as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(adfSAMP_DEN_COEFF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfMIN_LONG as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfMIN_LONG)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfMIN_LAT as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfMIN_LAT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfMAX_LONG as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfMAX_LONG)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALRPCInfo>())).dfMAX_LAT as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALRPCInfo),
            "::",
            stringify!(dfMAX_LAT)
        )
    );
}
extern "C" {
    pub fn GDALExtractRPCInfo(arg1: CSLConstList, arg2: *mut GDALRPCInfo) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALColorEntry {
    pub c1: ::std::os::raw::c_short,
    pub c2: ::std::os::raw::c_short,
    pub c3: ::std::os::raw::c_short,
    pub c4: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_GDALColorEntry() {
    assert_eq!(
        ::std::mem::size_of::<GDALColorEntry>(),
        8usize,
        concat!("Size of: ", stringify!(GDALColorEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALColorEntry>(),
        2usize,
        concat!("Alignment of ", stringify!(GDALColorEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALColorEntry>())).c1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALColorEntry),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALColorEntry>())).c2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALColorEntry),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALColorEntry>())).c3 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALColorEntry),
            "::",
            stringify!(c3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALColorEntry>())).c4 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALColorEntry),
            "::",
            stringify!(c4)
        )
    );
}
extern "C" {
    pub fn GDALCreateColorTable(arg1: GDALPaletteInterp) -> GDALColorTableH;
}
extern "C" {
    pub fn GDALDestroyColorTable(arg1: GDALColorTableH);
}
extern "C" {
    pub fn GDALCloneColorTable(arg1: GDALColorTableH) -> GDALColorTableH;
}
extern "C" {
    pub fn GDALGetPaletteInterpretation(arg1: GDALColorTableH) -> GDALPaletteInterp;
}
extern "C" {
    pub fn GDALGetColorEntryCount(arg1: GDALColorTableH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetColorEntry(
        arg1: GDALColorTableH,
        arg2: ::std::os::raw::c_int,
    ) -> *const GDALColorEntry;
}
extern "C" {
    pub fn GDALGetColorEntryAsRGB(
        arg1: GDALColorTableH,
        arg2: ::std::os::raw::c_int,
        arg3: *mut GDALColorEntry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALSetColorEntry(
        arg1: GDALColorTableH,
        arg2: ::std::os::raw::c_int,
        arg3: *const GDALColorEntry,
    );
}
extern "C" {
    pub fn GDALCreateColorRamp(
        hTable: GDALColorTableH,
        nStartIndex: ::std::os::raw::c_int,
        psStartColor: *const GDALColorEntry,
        nEndIndex: ::std::os::raw::c_int,
        psEndColor: *const GDALColorEntry,
    );
}
pub const GDALRATFieldType_GFT_Integer: GDALRATFieldType = 0;
pub const GDALRATFieldType_GFT_Real: GDALRATFieldType = 1;
pub const GDALRATFieldType_GFT_String: GDALRATFieldType = 2;
pub type GDALRATFieldType = ::std::os::raw::c_uint;
pub const GDALRATFieldUsage_GFU_Generic: GDALRATFieldUsage = 0;
pub const GDALRATFieldUsage_GFU_PixelCount: GDALRATFieldUsage = 1;
pub const GDALRATFieldUsage_GFU_Name: GDALRATFieldUsage = 2;
pub const GDALRATFieldUsage_GFU_Min: GDALRATFieldUsage = 3;
pub const GDALRATFieldUsage_GFU_Max: GDALRATFieldUsage = 4;
pub const GDALRATFieldUsage_GFU_MinMax: GDALRATFieldUsage = 5;
pub const GDALRATFieldUsage_GFU_Red: GDALRATFieldUsage = 6;
pub const GDALRATFieldUsage_GFU_Green: GDALRATFieldUsage = 7;
pub const GDALRATFieldUsage_GFU_Blue: GDALRATFieldUsage = 8;
pub const GDALRATFieldUsage_GFU_Alpha: GDALRATFieldUsage = 9;
pub const GDALRATFieldUsage_GFU_RedMin: GDALRATFieldUsage = 10;
pub const GDALRATFieldUsage_GFU_GreenMin: GDALRATFieldUsage = 11;
pub const GDALRATFieldUsage_GFU_BlueMin: GDALRATFieldUsage = 12;
pub const GDALRATFieldUsage_GFU_AlphaMin: GDALRATFieldUsage = 13;
pub const GDALRATFieldUsage_GFU_RedMax: GDALRATFieldUsage = 14;
pub const GDALRATFieldUsage_GFU_GreenMax: GDALRATFieldUsage = 15;
pub const GDALRATFieldUsage_GFU_BlueMax: GDALRATFieldUsage = 16;
pub const GDALRATFieldUsage_GFU_AlphaMax: GDALRATFieldUsage = 17;
pub const GDALRATFieldUsage_GFU_MaxCount: GDALRATFieldUsage = 18;
pub type GDALRATFieldUsage = ::std::os::raw::c_uint;
pub const GDALRATTableType_GRTT_THEMATIC: GDALRATTableType = 0;
pub const GDALRATTableType_GRTT_ATHEMATIC: GDALRATTableType = 1;
pub type GDALRATTableType = ::std::os::raw::c_uint;
extern "C" {
    pub fn GDALCreateRasterAttributeTable() -> GDALRasterAttributeTableH;
}
extern "C" {
    pub fn GDALDestroyRasterAttributeTable(arg1: GDALRasterAttributeTableH);
}
extern "C" {
    pub fn GDALRATGetColumnCount(arg1: GDALRasterAttributeTableH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALRATGetNameOfCol(
        arg1: GDALRasterAttributeTableH,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALRATGetUsageOfCol(
        arg1: GDALRasterAttributeTableH,
        arg2: ::std::os::raw::c_int,
    ) -> GDALRATFieldUsage;
}
extern "C" {
    pub fn GDALRATGetTypeOfCol(
        arg1: GDALRasterAttributeTableH,
        arg2: ::std::os::raw::c_int,
    ) -> GDALRATFieldType;
}
extern "C" {
    pub fn GDALRATGetColOfUsage(
        arg1: GDALRasterAttributeTableH,
        arg2: GDALRATFieldUsage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALRATGetRowCount(arg1: GDALRasterAttributeTableH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALRATGetValueAsString(
        arg1: GDALRasterAttributeTableH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALRATGetValueAsInt(
        arg1: GDALRasterAttributeTableH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALRATGetValueAsDouble(
        arg1: GDALRasterAttributeTableH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn GDALRATSetValueAsString(
        arg1: GDALRasterAttributeTableH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn GDALRATSetValueAsInt(
        arg1: GDALRasterAttributeTableH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GDALRATSetValueAsDouble(
        arg1: GDALRasterAttributeTableH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: f64,
    );
}
extern "C" {
    pub fn GDALRATChangesAreWrittenToFile(hRAT: GDALRasterAttributeTableH)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALRATValuesIOAsDouble(
        hRAT: GDALRasterAttributeTableH,
        eRWFlag: GDALRWFlag,
        iField: ::std::os::raw::c_int,
        iStartRow: ::std::os::raw::c_int,
        iLength: ::std::os::raw::c_int,
        pdfData: *mut f64,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRATValuesIOAsInteger(
        hRAT: GDALRasterAttributeTableH,
        eRWFlag: GDALRWFlag,
        iField: ::std::os::raw::c_int,
        iStartRow: ::std::os::raw::c_int,
        iLength: ::std::os::raw::c_int,
        pnData: *mut ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRATValuesIOAsString(
        hRAT: GDALRasterAttributeTableH,
        eRWFlag: GDALRWFlag,
        iField: ::std::os::raw::c_int,
        iStartRow: ::std::os::raw::c_int,
        iLength: ::std::os::raw::c_int,
        papszStrList: CSLConstList,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRATSetRowCount(arg1: GDALRasterAttributeTableH, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn GDALRATCreateColumn(
        arg1: GDALRasterAttributeTableH,
        arg2: *const ::std::os::raw::c_char,
        arg3: GDALRATFieldType,
        arg4: GDALRATFieldUsage,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRATSetLinearBinning(arg1: GDALRasterAttributeTableH, arg2: f64, arg3: f64)
        -> CPLErr;
}
extern "C" {
    pub fn GDALRATGetLinearBinning(
        arg1: GDALRasterAttributeTableH,
        arg2: *mut f64,
        arg3: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALRATSetTableType(
        hRAT: GDALRasterAttributeTableH,
        eInTableType: GDALRATTableType,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRATGetTableType(hRAT: GDALRasterAttributeTableH) -> GDALRATTableType;
}
extern "C" {
    pub fn GDALRATInitializeFromColorTable(
        arg1: GDALRasterAttributeTableH,
        arg2: GDALColorTableH,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRATTranslateToColorTable(
        arg1: GDALRasterAttributeTableH,
        nEntryCount: ::std::os::raw::c_int,
    ) -> GDALColorTableH;
}
extern "C" {
    pub fn GDALRATDumpReadable(arg1: GDALRasterAttributeTableH, arg2: *mut FILE);
}
extern "C" {
    pub fn GDALRATClone(arg1: GDALRasterAttributeTableH) -> GDALRasterAttributeTableH;
}
extern "C" {
    pub fn GDALRATSerializeJSON(arg1: GDALRasterAttributeTableH) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALRATGetRowOfValue(
        arg1: GDALRasterAttributeTableH,
        arg2: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALRATRemoveStatistics(arg1: GDALRasterAttributeTableH);
}
extern "C" {
    pub fn GDALSetCacheMax(nBytes: ::std::os::raw::c_int);
}
extern "C" {
    pub fn GDALGetCacheMax() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALGetCacheUsed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALSetCacheMax64(nBytes: GIntBig);
}
extern "C" {
    pub fn GDALGetCacheMax64() -> GIntBig;
}
extern "C" {
    pub fn GDALGetCacheUsed64() -> GIntBig;
}
extern "C" {
    pub fn GDALFlushCacheBlock() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDatasetGetVirtualMem(
        hDS: GDALDatasetH,
        eRWFlag: GDALRWFlag,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        nBufXSize: ::std::os::raw::c_int,
        nBufYSize: ::std::os::raw::c_int,
        eBufType: GDALDataType,
        nBandCount: ::std::os::raw::c_int,
        panBandMap: *mut ::std::os::raw::c_int,
        nPixelSpace: ::std::os::raw::c_int,
        nLineSpace: GIntBig,
        nBandSpace: GIntBig,
        nCacheSize: size_t,
        nPageSizeHint: size_t,
        bSingleThreadUsage: ::std::os::raw::c_int,
        papszOptions: CSLConstList,
    ) -> *mut CPLVirtualMem;
}
extern "C" {
    pub fn GDALRasterBandGetVirtualMem(
        hBand: GDALRasterBandH,
        eRWFlag: GDALRWFlag,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        nBufXSize: ::std::os::raw::c_int,
        nBufYSize: ::std::os::raw::c_int,
        eBufType: GDALDataType,
        nPixelSpace: ::std::os::raw::c_int,
        nLineSpace: GIntBig,
        nCacheSize: size_t,
        nPageSizeHint: size_t,
        bSingleThreadUsage: ::std::os::raw::c_int,
        papszOptions: CSLConstList,
    ) -> *mut CPLVirtualMem;
}
extern "C" {
    pub fn GDALGetVirtualMemAuto(
        hBand: GDALRasterBandH,
        eRWFlag: GDALRWFlag,
        pnPixelSpace: *mut ::std::os::raw::c_int,
        pnLineSpace: *mut GIntBig,
        papszOptions: CSLConstList,
    ) -> *mut CPLVirtualMem;
}
pub const GDALTileOrganization_GTO_TIP: GDALTileOrganization = 0;
pub const GDALTileOrganization_GTO_BIT: GDALTileOrganization = 1;
pub const GDALTileOrganization_GTO_BSQ: GDALTileOrganization = 2;
pub type GDALTileOrganization = ::std::os::raw::c_uint;
extern "C" {
    pub fn GDALDatasetGetTiledVirtualMem(
        hDS: GDALDatasetH,
        eRWFlag: GDALRWFlag,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        nTileXSize: ::std::os::raw::c_int,
        nTileYSize: ::std::os::raw::c_int,
        eBufType: GDALDataType,
        nBandCount: ::std::os::raw::c_int,
        panBandMap: *mut ::std::os::raw::c_int,
        eTileOrganization: GDALTileOrganization,
        nCacheSize: size_t,
        bSingleThreadUsage: ::std::os::raw::c_int,
        papszOptions: CSLConstList,
    ) -> *mut CPLVirtualMem;
}
extern "C" {
    pub fn GDALRasterBandGetTiledVirtualMem(
        hBand: GDALRasterBandH,
        eRWFlag: GDALRWFlag,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        nTileXSize: ::std::os::raw::c_int,
        nTileYSize: ::std::os::raw::c_int,
        eBufType: GDALDataType,
        nCacheSize: size_t,
        bSingleThreadUsage: ::std::os::raw::c_int,
        papszOptions: CSLConstList,
    ) -> *mut CPLVirtualMem;
}
extern "C" {
    pub fn GDALCreatePansharpenedVRT(
        pszXML: *const ::std::os::raw::c_char,
        hPanchroBand: GDALRasterBandH,
        nInputSpectralBands: ::std::os::raw::c_int,
        pahInputSpectralBands: *mut GDALRasterBandH,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALGetJPEG2000Structure(
        pszFilename: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn GDALCreateMultiDimensional(
        hDriver: GDALDriverH,
        pszName: *const ::std::os::raw::c_char,
        papszRootGroupOptions: CSLConstList,
        papszOptions: CSLConstList,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALExtendedDataTypeCreate(eType: GDALDataType) -> GDALExtendedDataTypeH;
}
extern "C" {
    pub fn GDALExtendedDataTypeCreateString(nMaxStringLength: size_t) -> GDALExtendedDataTypeH;
}
extern "C" {
    pub fn GDALExtendedDataTypeCreateCompound(
        pszName: *const ::std::os::raw::c_char,
        nTotalSize: size_t,
        nComponents: size_t,
        comps: *const GDALEDTComponentH,
    ) -> GDALExtendedDataTypeH;
}
extern "C" {
    pub fn GDALExtendedDataTypeRelease(hEDT: GDALExtendedDataTypeH);
}
extern "C" {
    pub fn GDALExtendedDataTypeGetName(
        hEDT: GDALExtendedDataTypeH,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALExtendedDataTypeGetClass(hEDT: GDALExtendedDataTypeH) -> GDALExtendedDataTypeClass;
}
extern "C" {
    pub fn GDALExtendedDataTypeGetNumericDataType(hEDT: GDALExtendedDataTypeH) -> GDALDataType;
}
extern "C" {
    pub fn GDALExtendedDataTypeGetSize(hEDT: GDALExtendedDataTypeH) -> size_t;
}
extern "C" {
    pub fn GDALExtendedDataTypeGetMaxStringLength(hEDT: GDALExtendedDataTypeH) -> size_t;
}
extern "C" {
    pub fn GDALExtendedDataTypeGetComponents(
        hEDT: GDALExtendedDataTypeH,
        pnCount: *mut size_t,
    ) -> *mut GDALEDTComponentH;
}
extern "C" {
    pub fn GDALExtendedDataTypeFreeComponents(components: *mut GDALEDTComponentH, nCount: size_t);
}
extern "C" {
    pub fn GDALExtendedDataTypeCanConvertTo(
        hSourceEDT: GDALExtendedDataTypeH,
        hTargetEDT: GDALExtendedDataTypeH,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALExtendedDataTypeEquals(
        hFirstEDT: GDALExtendedDataTypeH,
        hSecondEDT: GDALExtendedDataTypeH,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALEDTComponentCreate(
        pszName: *const ::std::os::raw::c_char,
        nOffset: size_t,
        hType: GDALExtendedDataTypeH,
    ) -> GDALEDTComponentH;
}
extern "C" {
    pub fn GDALEDTComponentRelease(hComp: GDALEDTComponentH);
}
extern "C" {
    pub fn GDALEDTComponentGetName(hComp: GDALEDTComponentH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALEDTComponentGetOffset(hComp: GDALEDTComponentH) -> size_t;
}
extern "C" {
    pub fn GDALEDTComponentGetType(hComp: GDALEDTComponentH) -> GDALExtendedDataTypeH;
}
extern "C" {
    pub fn GDALDatasetGetRootGroup(hDS: GDALDatasetH) -> GDALGroupH;
}
extern "C" {
    pub fn GDALGroupRelease(hGroup: GDALGroupH);
}
extern "C" {
    pub fn GDALGroupGetName(hGroup: GDALGroupH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGroupGetFullName(hGroup: GDALGroupH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGroupGetMDArrayNames(
        hGroup: GDALGroupH,
        papszOptions: CSLConstList,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGroupOpenMDArray(
        hGroup: GDALGroupH,
        pszMDArrayName: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> GDALMDArrayH;
}
extern "C" {
    pub fn GDALGroupOpenMDArrayFromFullname(
        hGroup: GDALGroupH,
        pszMDArrayName: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> GDALMDArrayH;
}
extern "C" {
    pub fn GDALGroupResolveMDArray(
        hGroup: GDALGroupH,
        pszName: *const ::std::os::raw::c_char,
        pszStartingPoint: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> GDALMDArrayH;
}
extern "C" {
    pub fn GDALGroupGetGroupNames(
        hGroup: GDALGroupH,
        papszOptions: CSLConstList,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALGroupOpenGroup(
        hGroup: GDALGroupH,
        pszSubGroupName: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> GDALGroupH;
}
extern "C" {
    pub fn GDALGroupOpenGroupFromFullname(
        hGroup: GDALGroupH,
        pszMDArrayName: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> GDALGroupH;
}
extern "C" {
    pub fn GDALGroupGetDimensions(
        hGroup: GDALGroupH,
        pnCount: *mut size_t,
        papszOptions: CSLConstList,
    ) -> *mut GDALDimensionH;
}
extern "C" {
    pub fn GDALGroupGetAttribute(
        hGroup: GDALGroupH,
        pszName: *const ::std::os::raw::c_char,
    ) -> GDALAttributeH;
}
extern "C" {
    pub fn GDALGroupGetAttributes(
        hGroup: GDALGroupH,
        pnCount: *mut size_t,
        papszOptions: CSLConstList,
    ) -> *mut GDALAttributeH;
}
extern "C" {
    pub fn GDALGroupGetStructuralInfo(hGroup: GDALGroupH) -> CSLConstList;
}
extern "C" {
    pub fn GDALGroupCreateGroup(
        hGroup: GDALGroupH,
        pszSubGroupName: *const ::std::os::raw::c_char,
        papszOptions: CSLConstList,
    ) -> GDALGroupH;
}
extern "C" {
    pub fn GDALGroupCreateDimension(
        hGroup: GDALGroupH,
        pszName: *const ::std::os::raw::c_char,
        pszType: *const ::std::os::raw::c_char,
        pszDirection: *const ::std::os::raw::c_char,
        nSize: GUInt64,
        papszOptions: CSLConstList,
    ) -> GDALDimensionH;
}
extern "C" {
    pub fn GDALGroupCreateMDArray(
        hGroup: GDALGroupH,
        pszName: *const ::std::os::raw::c_char,
        nDimensions: size_t,
        pahDimensions: *mut GDALDimensionH,
        hEDT: GDALExtendedDataTypeH,
        papszOptions: CSLConstList,
    ) -> GDALMDArrayH;
}
extern "C" {
    pub fn GDALGroupCreateAttribute(
        hGroup: GDALGroupH,
        pszName: *const ::std::os::raw::c_char,
        nDimensions: size_t,
        panDimensions: *const GUInt64,
        hEDT: GDALExtendedDataTypeH,
        papszOptions: CSLConstList,
    ) -> GDALAttributeH;
}
extern "C" {
    pub fn GDALMDArrayRelease(hMDArray: GDALMDArrayH);
}
extern "C" {
    pub fn GDALMDArrayGetName(hArray: GDALMDArrayH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALMDArrayGetFullName(hArray: GDALMDArrayH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALMDArrayGetTotalElementsCount(hArray: GDALMDArrayH) -> GUInt64;
}
extern "C" {
    pub fn GDALMDArrayGetDimensionCount(hArray: GDALMDArrayH) -> size_t;
}
extern "C" {
    pub fn GDALMDArrayGetDimensions(
        hArray: GDALMDArrayH,
        pnCount: *mut size_t,
    ) -> *mut GDALDimensionH;
}
extern "C" {
    pub fn GDALMDArrayGetDataType(hArray: GDALMDArrayH) -> GDALExtendedDataTypeH;
}
extern "C" {
    pub fn GDALMDArrayRead(
        hArray: GDALMDArrayH,
        arrayStartIdx: *const GUInt64,
        count: *const size_t,
        arrayStep: *const GInt64,
        bufferStride: *const GPtrDiff_t,
        bufferDatatype: GDALExtendedDataTypeH,
        pDstBuffer: *mut ::std::os::raw::c_void,
        pDstBufferAllocStart: *const ::std::os::raw::c_void,
        nDstBufferllocSize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALMDArrayWrite(
        hArray: GDALMDArrayH,
        arrayStartIdx: *const GUInt64,
        count: *const size_t,
        arrayStep: *const GInt64,
        bufferStride: *const GPtrDiff_t,
        bufferDatatype: GDALExtendedDataTypeH,
        pSrcBuffer: *const ::std::os::raw::c_void,
        psrcBufferAllocStart: *const ::std::os::raw::c_void,
        nSrcBufferllocSize: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALMDArrayGetAttribute(
        hArray: GDALMDArrayH,
        pszName: *const ::std::os::raw::c_char,
    ) -> GDALAttributeH;
}
extern "C" {
    pub fn GDALMDArrayGetAttributes(
        hArray: GDALMDArrayH,
        pnCount: *mut size_t,
        papszOptions: CSLConstList,
    ) -> *mut GDALAttributeH;
}
extern "C" {
    pub fn GDALMDArrayCreateAttribute(
        hArray: GDALMDArrayH,
        pszName: *const ::std::os::raw::c_char,
        nDimensions: size_t,
        panDimensions: *const GUInt64,
        hEDT: GDALExtendedDataTypeH,
        papszOptions: CSLConstList,
    ) -> GDALAttributeH;
}
extern "C" {
    pub fn GDALMDArrayGetRawNoDataValue(hArray: GDALMDArrayH) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALMDArrayGetNoDataValueAsDouble(
        hArray: GDALMDArrayH,
        pbHasNoDataValue: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn GDALMDArraySetRawNoDataValue(
        hArray: GDALMDArrayH,
        arg1: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALMDArraySetNoDataValueAsDouble(
        hArray: GDALMDArrayH,
        dfNoDataValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALMDArraySetScale(hArray: GDALMDArrayH, dfScale: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALMDArrayGetScale(hArray: GDALMDArrayH, pbHasValue: *mut ::std::os::raw::c_int)
        -> f64;
}
extern "C" {
    pub fn GDALMDArraySetOffset(hArray: GDALMDArrayH, dfOffset: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALMDArrayGetOffset(
        hArray: GDALMDArrayH,
        pbHasValue: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn GDALMDArrayGetBlockSize(hArray: GDALMDArrayH, pnCount: *mut size_t) -> *mut GUInt64;
}
extern "C" {
    pub fn GDALMDArraySetUnit(
        hArray: GDALMDArrayH,
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALMDArrayGetUnit(hArray: GDALMDArrayH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALMDArraySetSpatialRef(
        arg1: GDALMDArrayH,
        arg2: OGRSpatialReferenceH,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALMDArrayGetSpatialRef(hArray: GDALMDArrayH) -> OGRSpatialReferenceH;
}
extern "C" {
    pub fn GDALMDArrayGetProcessingChunkSize(
        hArray: GDALMDArrayH,
        pnCount: *mut size_t,
        nMaxChunkMemory: size_t,
    ) -> *mut size_t;
}
extern "C" {
    pub fn GDALMDArrayGetStructuralInfo(hArray: GDALMDArrayH) -> CSLConstList;
}
extern "C" {
    pub fn GDALMDArrayGetView(
        hArray: GDALMDArrayH,
        pszViewExpr: *const ::std::os::raw::c_char,
    ) -> GDALMDArrayH;
}
extern "C" {
    pub fn GDALMDArrayTranspose(
        hArray: GDALMDArrayH,
        nNewAxisCount: size_t,
        panMapNewAxisToOldAxis: *const ::std::os::raw::c_int,
    ) -> GDALMDArrayH;
}
extern "C" {
    pub fn GDALMDArrayGetUnscaled(hArray: GDALMDArrayH) -> GDALMDArrayH;
}
extern "C" {
    pub fn GDALMDArrayGetMask(hArray: GDALMDArrayH, papszOptions: CSLConstList) -> GDALMDArrayH;
}
extern "C" {
    pub fn GDALMDArrayAsClassicDataset(
        hArray: GDALMDArrayH,
        iXDim: size_t,
        iYDim: size_t,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALAttributeRelease(hAttr: GDALAttributeH);
}
extern "C" {
    pub fn GDALReleaseAttributes(attributes: *mut GDALAttributeH, nCount: size_t);
}
extern "C" {
    pub fn GDALAttributeGetName(hAttr: GDALAttributeH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALAttributeGetFullName(hAttr: GDALAttributeH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALAttributeGetTotalElementsCount(hAttr: GDALAttributeH) -> GUInt64;
}
extern "C" {
    pub fn GDALAttributeGetDimensionCount(hAttr: GDALAttributeH) -> size_t;
}
extern "C" {
    pub fn GDALAttributeGetDimensionsSize(
        hAttr: GDALAttributeH,
        pnCount: *mut size_t,
    ) -> *mut GUInt64;
}
extern "C" {
    pub fn GDALAttributeGetDataType(hAttr: GDALAttributeH) -> GDALExtendedDataTypeH;
}
extern "C" {
    pub fn GDALAttributeReadAsRaw(hAttr: GDALAttributeH, pnSize: *mut size_t) -> *mut GByte;
}
extern "C" {
    pub fn GDALAttributeFreeRawResult(hAttr: GDALAttributeH, raw: *mut GByte, nSize: size_t);
}
extern "C" {
    pub fn GDALAttributeReadAsString(hAttr: GDALAttributeH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALAttributeReadAsInt(hAttr: GDALAttributeH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALAttributeReadAsDouble(hAttr: GDALAttributeH) -> f64;
}
extern "C" {
    pub fn GDALAttributeReadAsStringArray(
        hAttr: GDALAttributeH,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALAttributeReadAsIntArray(
        hAttr: GDALAttributeH,
        pnCount: *mut size_t,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALAttributeReadAsDoubleArray(hAttr: GDALAttributeH, pnCount: *mut size_t) -> *mut f64;
}
extern "C" {
    pub fn GDALAttributeWriteRaw(
        hAttr: GDALAttributeH,
        arg1: *const ::std::os::raw::c_void,
        arg2: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALAttributeWriteString(
        hAttr: GDALAttributeH,
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALAttributeWriteStringArray(
        hAttr: GDALAttributeH,
        arg1: CSLConstList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALAttributeWriteInt(
        hAttr: GDALAttributeH,
        arg1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALAttributeWriteDouble(hAttr: GDALAttributeH, arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALAttributeWriteDoubleArray(
        hAttr: GDALAttributeH,
        arg1: *const f64,
        arg2: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDimensionRelease(hDim: GDALDimensionH);
}
extern "C" {
    pub fn GDALReleaseDimensions(dims: *mut GDALDimensionH, nCount: size_t);
}
extern "C" {
    pub fn GDALDimensionGetName(hDim: GDALDimensionH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALDimensionGetFullName(hDim: GDALDimensionH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALDimensionGetType(hDim: GDALDimensionH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALDimensionGetDirection(hDim: GDALDimensionH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALDimensionGetSize(hDim: GDALDimensionH) -> GUInt64;
}
extern "C" {
    pub fn GDALDimensionGetIndexingVariable(hDim: GDALDimensionH) -> GDALMDArrayH;
}
extern "C" {
    pub fn GDALDimensionSetIndexingVariable(
        hDim: GDALDimensionH,
        hArray: GDALMDArrayH,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALComputeMedianCutPCT(
        hRed: GDALRasterBandH,
        hGreen: GDALRasterBandH,
        hBlue: GDALRasterBandH,
        pfnIncludePixel: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        nColors: ::std::os::raw::c_int,
        hColorTable: GDALColorTableH,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALDitherRGB2PCT(
        hRed: GDALRasterBandH,
        hGreen: GDALRasterBandH,
        hBlue: GDALRasterBandH,
        hTarget: GDALRasterBandH,
        hColorTable: GDALColorTableH,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALChecksumImage(
        hBand: GDALRasterBandH,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALComputeProximity(
        hSrcBand: GDALRasterBandH,
        hProximityBand: GDALRasterBandH,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALFillNodata(
        hTargetBand: GDALRasterBandH,
        hMaskBand: GDALRasterBandH,
        dfMaxSearchDist: f64,
        bDeprecatedOption: ::std::os::raw::c_int,
        nSmoothingIterations: ::std::os::raw::c_int,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALPolygonize(
        hSrcBand: GDALRasterBandH,
        hMaskBand: GDALRasterBandH,
        hOutLayer: OGRLayerH,
        iPixValField: ::std::os::raw::c_int,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALFPolygonize(
        hSrcBand: GDALRasterBandH,
        hMaskBand: GDALRasterBandH,
        hOutLayer: OGRLayerH,
        iPixValField: ::std::os::raw::c_int,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALSieveFilter(
        hSrcBand: GDALRasterBandH,
        hMaskBand: GDALRasterBandH,
        hDstBand: GDALRasterBandH,
        nSizeThreshold: ::std::os::raw::c_int,
        nConnectedness: ::std::os::raw::c_int,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
pub type GDALTransformerFunc = ::std::option::Option<
    unsafe extern "C" fn(
        pTransformerArg: *mut ::std::os::raw::c_void,
        bDstToSrc: ::std::os::raw::c_int,
        nPointCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        panSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALTransformerInfo {
    pub abySignature: [GByte; 4usize],
    pub pszClassName: *const ::std::os::raw::c_char,
    pub pfnTransform: GDALTransformerFunc,
    pub pfnCleanup:
        ::std::option::Option<unsafe extern "C" fn(pTransformerArg: *mut ::std::os::raw::c_void)>,
    pub pfnSerialize: ::std::option::Option<
        unsafe extern "C" fn(pTransformerArg: *mut ::std::os::raw::c_void) -> *mut CPLXMLNode,
    >,
    pub pfnCreateSimilar: ::std::option::Option<
        unsafe extern "C" fn(
            pTransformerArg: *mut ::std::os::raw::c_void,
            dfSrcRatioX: f64,
            dfSrcRatioY: f64,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_GDALTransformerInfo() {
    assert_eq!(
        ::std::mem::size_of::<GDALTransformerInfo>(),
        48usize,
        concat!("Size of: ", stringify!(GDALTransformerInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALTransformerInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALTransformerInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTransformerInfo>())).abySignature as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTransformerInfo),
            "::",
            stringify!(abySignature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTransformerInfo>())).pszClassName as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTransformerInfo),
            "::",
            stringify!(pszClassName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTransformerInfo>())).pfnTransform as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTransformerInfo),
            "::",
            stringify!(pfnTransform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALTransformerInfo>())).pfnCleanup as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTransformerInfo),
            "::",
            stringify!(pfnCleanup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTransformerInfo>())).pfnSerialize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTransformerInfo),
            "::",
            stringify!(pfnSerialize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTransformerInfo>())).pfnCreateSimilar as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTransformerInfo),
            "::",
            stringify!(pfnCreateSimilar)
        )
    );
}
extern "C" {
    pub fn GDALDestroyTransformer(pTransformerArg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn GDALUseTransformer(
        pTransformerArg: *mut ::std::os::raw::c_void,
        bDstToSrc: ::std::os::raw::c_int,
        nPointCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        panSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALCreateSimilarTransformer(
        psTransformerArg: *mut ::std::os::raw::c_void,
        dfSrcRatioX: f64,
        dfSrcRatioY: f64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALCreateGenImgProjTransformer(
        hSrcDS: GDALDatasetH,
        pszSrcWKT: *const ::std::os::raw::c_char,
        hDstDS: GDALDatasetH,
        pszDstWKT: *const ::std::os::raw::c_char,
        bGCPUseOK: ::std::os::raw::c_int,
        dfGCPErrorThreshold: f64,
        nOrder: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALCreateGenImgProjTransformer2(
        hSrcDS: GDALDatasetH,
        hDstDS: GDALDatasetH,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALCreateGenImgProjTransformer3(
        pszSrcWKT: *const ::std::os::raw::c_char,
        padfSrcGeoTransform: *const f64,
        pszDstWKT: *const ::std::os::raw::c_char,
        padfDstGeoTransform: *const f64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALCreateGenImgProjTransformer4(
        hSrcSRS: OGRSpatialReferenceH,
        padfSrcGeoTransform: *const f64,
        hDstSRS: OGRSpatialReferenceH,
        padfDstGeoTransform: *const f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALSetGenImgProjTransformerDstGeoTransform(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const f64,
    );
}
extern "C" {
    pub fn GDALDestroyGenImgProjTransformer(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn GDALGenImgProjTransform(
        pTransformArg: *mut ::std::os::raw::c_void,
        bDstToSrc: ::std::os::raw::c_int,
        nPointCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        panSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALSetTransformerDstGeoTransform(arg1: *mut ::std::os::raw::c_void, arg2: *const f64);
}
extern "C" {
    pub fn GDALGetTransformerDstGeoTransform(arg1: *mut ::std::os::raw::c_void, arg2: *mut f64);
}
extern "C" {
    pub fn GDALCreateReprojectionTransformer(
        pszSrcWKT: *const ::std::os::raw::c_char,
        pszDstWKT: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALCreateReprojectionTransformerEx(
        hSrcSRS: OGRSpatialReferenceH,
        hDstSRS: OGRSpatialReferenceH,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALDestroyReprojectionTransformer(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn GDALReprojectionTransform(
        pTransformArg: *mut ::std::os::raw::c_void,
        bDstToSrc: ::std::os::raw::c_int,
        nPointCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        panSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALCreateGCPTransformer(
        nGCPCount: ::std::os::raw::c_int,
        pasGCPList: *const GDAL_GCP,
        nReqOrder: ::std::os::raw::c_int,
        bReversed: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALCreateGCPRefineTransformer(
        nGCPCount: ::std::os::raw::c_int,
        pasGCPList: *const GDAL_GCP,
        nReqOrder: ::std::os::raw::c_int,
        bReversed: ::std::os::raw::c_int,
        tolerance: f64,
        minimumGcps: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALDestroyGCPTransformer(pTransformArg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn GDALGCPTransform(
        pTransformArg: *mut ::std::os::raw::c_void,
        bDstToSrc: ::std::os::raw::c_int,
        nPointCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        panSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALCreateTPSTransformer(
        nGCPCount: ::std::os::raw::c_int,
        pasGCPList: *const GDAL_GCP,
        bReversed: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALDestroyTPSTransformer(pTransformArg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn GDALTPSTransform(
        pTransformArg: *mut ::std::os::raw::c_void,
        bDstToSrc: ::std::os::raw::c_int,
        nPointCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        panSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RPCInfoToMD(psRPCInfo: *mut GDALRPCInfo) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn GDALCreateRPCTransformer(
        psRPC: *mut GDALRPCInfo,
        bReversed: ::std::os::raw::c_int,
        dfPixErrThreshold: f64,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALDestroyRPCTransformer(pTransformArg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn GDALRPCTransform(
        pTransformArg: *mut ::std::os::raw::c_void,
        bDstToSrc: ::std::os::raw::c_int,
        nPointCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        panSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALCreateGeoLocTransformer(
        hBaseDS: GDALDatasetH,
        papszGeolocationInfo: *mut *mut ::std::os::raw::c_char,
        bReversed: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALDestroyGeoLocTransformer(pTransformArg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn GDALGeoLocTransform(
        pTransformArg: *mut ::std::os::raw::c_void,
        bDstToSrc: ::std::os::raw::c_int,
        nPointCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        panSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALCreateApproxTransformer(
        pfnRawTransformer: GDALTransformerFunc,
        pRawTransformerArg: *mut ::std::os::raw::c_void,
        dfMaxError: f64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn GDALApproxTransformerOwnsSubtransformer(
        pCBData: *mut ::std::os::raw::c_void,
        bOwnFlag: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GDALDestroyApproxTransformer(pApproxArg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn GDALApproxTransform(
        pTransformArg: *mut ::std::os::raw::c_void,
        bDstToSrc: ::std::os::raw::c_int,
        nPointCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        panSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALSimpleImageWarp(
        hSrcDS: GDALDatasetH,
        hDstDS: GDALDatasetH,
        nBandCount: ::std::os::raw::c_int,
        panBandList: *mut ::std::os::raw::c_int,
        pfnTransform: GDALTransformerFunc,
        pTransformArg: *mut ::std::os::raw::c_void,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
        papszWarpOptions: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALSuggestedWarpOutput(
        hSrcDS: GDALDatasetH,
        pfnTransformer: GDALTransformerFunc,
        pTransformArg: *mut ::std::os::raw::c_void,
        padfGeoTransformOut: *mut f64,
        pnPixels: *mut ::std::os::raw::c_int,
        pnLines: *mut ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALSuggestedWarpOutput2(
        hSrcDS: GDALDatasetH,
        pfnTransformer: GDALTransformerFunc,
        pTransformArg: *mut ::std::os::raw::c_void,
        padfGeoTransformOut: *mut f64,
        pnPixels: *mut ::std::os::raw::c_int,
        pnLines: *mut ::std::os::raw::c_int,
        padfExtents: *mut f64,
        nOptions: ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALSerializeTransformer(
        pfnFunc: GDALTransformerFunc,
        pTransformArg: *mut ::std::os::raw::c_void,
    ) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn GDALDeserializeTransformer(
        psTree: *mut CPLXMLNode,
        ppfnFunc: *mut GDALTransformerFunc,
        ppTransformArg: *mut *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALTransformGeolocations(
        hXBand: GDALRasterBandH,
        hYBand: GDALRasterBandH,
        hZBand: GDALRasterBandH,
        pfnTransformer: GDALTransformerFunc,
        pTransformArg: *mut ::std::os::raw::c_void,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    ) -> CPLErr;
}
pub type GDALContourWriter = ::std::option::Option<
    unsafe extern "C" fn(
        dfLevel: f64,
        nPoints: ::std::os::raw::c_int,
        padfX: *mut f64,
        padfY: *mut f64,
        arg1: *mut ::std::os::raw::c_void,
    ) -> CPLErr,
>;
pub type GDALContourGeneratorH = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn GDAL_CG_Create(
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        bNoDataSet: ::std::os::raw::c_int,
        dfNoDataValue: f64,
        dfContourInterval: f64,
        dfContourBase: f64,
        pfnWriter: GDALContourWriter,
        pCBData: *mut ::std::os::raw::c_void,
    ) -> GDALContourGeneratorH;
}
extern "C" {
    pub fn GDAL_CG_FeedLine(hCG: GDALContourGeneratorH, padfScanline: *mut f64) -> CPLErr;
}
extern "C" {
    pub fn GDAL_CG_Destroy(hCG: GDALContourGeneratorH);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRContourWriterInfo {
    pub hLayer: *mut ::std::os::raw::c_void,
    pub adfGeoTransform: [f64; 6usize],
    pub nElevField: ::std::os::raw::c_int,
    pub nElevFieldMin: ::std::os::raw::c_int,
    pub nElevFieldMax: ::std::os::raw::c_int,
    pub nIDField: ::std::os::raw::c_int,
    pub nNextID: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OGRContourWriterInfo() {
    assert_eq!(
        ::std::mem::size_of::<OGRContourWriterInfo>(),
        80usize,
        concat!("Size of: ", stringify!(OGRContourWriterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRContourWriterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRContourWriterInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRContourWriterInfo>())).hLayer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRContourWriterInfo),
            "::",
            stringify!(hLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OGRContourWriterInfo>())).adfGeoTransform as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRContourWriterInfo),
            "::",
            stringify!(adfGeoTransform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRContourWriterInfo>())).nElevField as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRContourWriterInfo),
            "::",
            stringify!(nElevField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OGRContourWriterInfo>())).nElevFieldMin as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRContourWriterInfo),
            "::",
            stringify!(nElevFieldMin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OGRContourWriterInfo>())).nElevFieldMax as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRContourWriterInfo),
            "::",
            stringify!(nElevFieldMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRContourWriterInfo>())).nIDField as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRContourWriterInfo),
            "::",
            stringify!(nIDField)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRContourWriterInfo>())).nNextID as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRContourWriterInfo),
            "::",
            stringify!(nNextID)
        )
    );
}
extern "C" {
    pub fn OGRContourWriter(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut f64,
        arg4: *mut f64,
        pInfo: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALContourGenerate(
        hBand: GDALRasterBandH,
        dfContourInterval: f64,
        dfContourBase: f64,
        nFixedLevelCount: ::std::os::raw::c_int,
        padfFixedLevels: *mut f64,
        bUseNoData: ::std::os::raw::c_int,
        dfNoDataValue: f64,
        hLayer: *mut ::std::os::raw::c_void,
        iIDField: ::std::os::raw::c_int,
        iElevField: ::std::os::raw::c_int,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALContourGenerateEx(
        hBand: GDALRasterBandH,
        hLayer: *mut ::std::os::raw::c_void,
        options: CSLConstList,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
pub const GDALViewshedMode_GVM_Diagonal: GDALViewshedMode = 1;
pub const GDALViewshedMode_GVM_Edge: GDALViewshedMode = 2;
pub const GDALViewshedMode_GVM_Max: GDALViewshedMode = 3;
pub const GDALViewshedMode_GVM_Min: GDALViewshedMode = 4;
pub type GDALViewshedMode = ::std::os::raw::c_uint;
pub const GDALViewshedOutputType_GVOT_NORMAL: GDALViewshedOutputType = 1;
pub const GDALViewshedOutputType_GVOT_MIN_TARGET_HEIGHT_FROM_DEM: GDALViewshedOutputType = 2;
pub const GDALViewshedOutputType_GVOT_MIN_TARGET_HEIGHT_FROM_GROUND: GDALViewshedOutputType = 3;
pub type GDALViewshedOutputType = ::std::os::raw::c_uint;
extern "C" {
    pub fn GDALViewshedGenerate(
        hBand: GDALRasterBandH,
        pszDriverName: *const ::std::os::raw::c_char,
        pszTargetRasterName: *const ::std::os::raw::c_char,
        papszCreationOptions: CSLConstList,
        dfObserverX: f64,
        dfObserverY: f64,
        dfObserverHeight: f64,
        dfTargetHeight: f64,
        dfVisibleVal: f64,
        dfInvisibleVal: f64,
        dfOutOfRangeVal: f64,
        dfNoDataVal: f64,
        dfCurvCoeff: f64,
        eMode: GDALViewshedMode,
        dfMaxDistance: f64,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
        heightMode: GDALViewshedOutputType,
        papszExtraOptions: CSLConstList,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALRasterizeGeometries(
        hDS: GDALDatasetH,
        nBandCount: ::std::os::raw::c_int,
        panBandList: *mut ::std::os::raw::c_int,
        nGeomCount: ::std::os::raw::c_int,
        pahGeometries: *mut OGRGeometryH,
        pfnTransformer: GDALTransformerFunc,
        pTransformArg: *mut ::std::os::raw::c_void,
        padfGeomBurnValue: *mut f64,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRasterizeLayers(
        hDS: GDALDatasetH,
        nBandCount: ::std::os::raw::c_int,
        panBandList: *mut ::std::os::raw::c_int,
        nLayerCount: ::std::os::raw::c_int,
        pahLayers: *mut OGRLayerH,
        pfnTransformer: GDALTransformerFunc,
        pTransformArg: *mut ::std::os::raw::c_void,
        padfLayerBurnValues: *mut f64,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALRasterizeLayersBuf(
        pData: *mut ::std::os::raw::c_void,
        nBufXSize: ::std::os::raw::c_int,
        nBufYSize: ::std::os::raw::c_int,
        eBufType: GDALDataType,
        nPixelSpace: ::std::os::raw::c_int,
        nLineSpace: ::std::os::raw::c_int,
        nLayerCount: ::std::os::raw::c_int,
        pahLayers: *mut OGRLayerH,
        pszDstProjection: *const ::std::os::raw::c_char,
        padfDstGeoTransform: *mut f64,
        pfnTransformer: GDALTransformerFunc,
        pTransformArg: *mut ::std::os::raw::c_void,
        dfBurnValue: f64,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
pub const GDALGridAlgorithm_GGA_InverseDistanceToAPower: GDALGridAlgorithm = 1;
pub const GDALGridAlgorithm_GGA_MovingAverage: GDALGridAlgorithm = 2;
pub const GDALGridAlgorithm_GGA_NearestNeighbor: GDALGridAlgorithm = 3;
pub const GDALGridAlgorithm_GGA_MetricMinimum: GDALGridAlgorithm = 4;
pub const GDALGridAlgorithm_GGA_MetricMaximum: GDALGridAlgorithm = 5;
pub const GDALGridAlgorithm_GGA_MetricRange: GDALGridAlgorithm = 6;
pub const GDALGridAlgorithm_GGA_MetricCount: GDALGridAlgorithm = 7;
pub const GDALGridAlgorithm_GGA_MetricAverageDistance: GDALGridAlgorithm = 8;
pub const GDALGridAlgorithm_GGA_MetricAverageDistancePts: GDALGridAlgorithm = 9;
pub const GDALGridAlgorithm_GGA_Linear: GDALGridAlgorithm = 10;
pub const GDALGridAlgorithm_GGA_InverseDistanceToAPowerNearestNeighbor: GDALGridAlgorithm = 11;
pub type GDALGridAlgorithm = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALGridInverseDistanceToAPowerOptions {
    pub dfPower: f64,
    pub dfSmoothing: f64,
    pub dfAnisotropyRatio: f64,
    pub dfAnisotropyAngle: f64,
    pub dfRadius1: f64,
    pub dfRadius2: f64,
    pub dfAngle: f64,
    pub nMaxPoints: GUInt32,
    pub nMinPoints: GUInt32,
    pub dfNoDataValue: f64,
}
#[test]
fn bindgen_test_layout_GDALGridInverseDistanceToAPowerOptions() {
    assert_eq!(
        ::std::mem::size_of::<GDALGridInverseDistanceToAPowerOptions>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GDALGridInverseDistanceToAPowerOptions>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GDALGridInverseDistanceToAPowerOptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerOptions>())).dfPower as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions),
            "::",
            stringify!(dfPower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerOptions>())).dfSmoothing
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions),
            "::",
            stringify!(dfSmoothing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerOptions>())).dfAnisotropyRatio
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions),
            "::",
            stringify!(dfAnisotropyRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerOptions>())).dfAnisotropyAngle
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions),
            "::",
            stringify!(dfAnisotropyAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerOptions>())).dfRadius1 as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions),
            "::",
            stringify!(dfRadius1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerOptions>())).dfRadius2 as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions),
            "::",
            stringify!(dfRadius2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerOptions>())).dfAngle as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions),
            "::",
            stringify!(dfAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerOptions>())).nMaxPoints
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions),
            "::",
            stringify!(nMaxPoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerOptions>())).nMinPoints
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions),
            "::",
            stringify!(nMinPoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerOptions>())).dfNoDataValue
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerOptions),
            "::",
            stringify!(dfNoDataValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALGridInverseDistanceToAPowerNearestNeighborOptions {
    pub dfPower: f64,
    pub dfRadius: f64,
    pub dfSmoothing: f64,
    pub nMaxPoints: GUInt32,
    pub nMinPoints: GUInt32,
    pub dfNoDataValue: f64,
}
#[test]
fn bindgen_test_layout_GDALGridInverseDistanceToAPowerNearestNeighborOptions() {
    assert_eq!(
        ::std::mem::size_of::<GDALGridInverseDistanceToAPowerNearestNeighborOptions>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(GDALGridInverseDistanceToAPowerNearestNeighborOptions)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GDALGridInverseDistanceToAPowerNearestNeighborOptions>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GDALGridInverseDistanceToAPowerNearestNeighborOptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerNearestNeighborOptions>()))
                .dfPower as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerNearestNeighborOptions),
            "::",
            stringify!(dfPower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerNearestNeighborOptions>()))
                .dfRadius as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerNearestNeighborOptions),
            "::",
            stringify!(dfRadius)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerNearestNeighborOptions>()))
                .dfSmoothing as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerNearestNeighborOptions),
            "::",
            stringify!(dfSmoothing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerNearestNeighborOptions>()))
                .nMaxPoints as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerNearestNeighborOptions),
            "::",
            stringify!(nMaxPoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerNearestNeighborOptions>()))
                .nMinPoints as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerNearestNeighborOptions),
            "::",
            stringify!(nMinPoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridInverseDistanceToAPowerNearestNeighborOptions>()))
                .dfNoDataValue as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridInverseDistanceToAPowerNearestNeighborOptions),
            "::",
            stringify!(dfNoDataValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALGridMovingAverageOptions {
    pub dfRadius1: f64,
    pub dfRadius2: f64,
    pub dfAngle: f64,
    pub nMinPoints: GUInt32,
    pub dfNoDataValue: f64,
}
#[test]
fn bindgen_test_layout_GDALGridMovingAverageOptions() {
    assert_eq!(
        ::std::mem::size_of::<GDALGridMovingAverageOptions>(),
        40usize,
        concat!("Size of: ", stringify!(GDALGridMovingAverageOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALGridMovingAverageOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALGridMovingAverageOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridMovingAverageOptions>())).dfRadius1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridMovingAverageOptions),
            "::",
            stringify!(dfRadius1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridMovingAverageOptions>())).dfRadius2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridMovingAverageOptions),
            "::",
            stringify!(dfRadius2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridMovingAverageOptions>())).dfAngle as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridMovingAverageOptions),
            "::",
            stringify!(dfAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridMovingAverageOptions>())).nMinPoints as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridMovingAverageOptions),
            "::",
            stringify!(nMinPoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridMovingAverageOptions>())).dfNoDataValue as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridMovingAverageOptions),
            "::",
            stringify!(dfNoDataValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALGridNearestNeighborOptions {
    pub dfRadius1: f64,
    pub dfRadius2: f64,
    pub dfAngle: f64,
    pub dfNoDataValue: f64,
}
#[test]
fn bindgen_test_layout_GDALGridNearestNeighborOptions() {
    assert_eq!(
        ::std::mem::size_of::<GDALGridNearestNeighborOptions>(),
        32usize,
        concat!("Size of: ", stringify!(GDALGridNearestNeighborOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALGridNearestNeighborOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALGridNearestNeighborOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridNearestNeighborOptions>())).dfRadius1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridNearestNeighborOptions),
            "::",
            stringify!(dfRadius1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridNearestNeighborOptions>())).dfRadius2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridNearestNeighborOptions),
            "::",
            stringify!(dfRadius2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridNearestNeighborOptions>())).dfAngle as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridNearestNeighborOptions),
            "::",
            stringify!(dfAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridNearestNeighborOptions>())).dfNoDataValue as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridNearestNeighborOptions),
            "::",
            stringify!(dfNoDataValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALGridDataMetricsOptions {
    pub dfRadius1: f64,
    pub dfRadius2: f64,
    pub dfAngle: f64,
    pub nMinPoints: GUInt32,
    pub dfNoDataValue: f64,
}
#[test]
fn bindgen_test_layout_GDALGridDataMetricsOptions() {
    assert_eq!(
        ::std::mem::size_of::<GDALGridDataMetricsOptions>(),
        40usize,
        concat!("Size of: ", stringify!(GDALGridDataMetricsOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALGridDataMetricsOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALGridDataMetricsOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridDataMetricsOptions>())).dfRadius1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridDataMetricsOptions),
            "::",
            stringify!(dfRadius1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridDataMetricsOptions>())).dfRadius2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridDataMetricsOptions),
            "::",
            stringify!(dfRadius2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridDataMetricsOptions>())).dfAngle as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridDataMetricsOptions),
            "::",
            stringify!(dfAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridDataMetricsOptions>())).nMinPoints as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridDataMetricsOptions),
            "::",
            stringify!(nMinPoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridDataMetricsOptions>())).dfNoDataValue as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridDataMetricsOptions),
            "::",
            stringify!(dfNoDataValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALGridLinearOptions {
    pub dfRadius: f64,
    pub dfNoDataValue: f64,
}
#[test]
fn bindgen_test_layout_GDALGridLinearOptions() {
    assert_eq!(
        ::std::mem::size_of::<GDALGridLinearOptions>(),
        16usize,
        concat!("Size of: ", stringify!(GDALGridLinearOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALGridLinearOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALGridLinearOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALGridLinearOptions>())).dfRadius as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridLinearOptions),
            "::",
            stringify!(dfRadius)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALGridLinearOptions>())).dfNoDataValue as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALGridLinearOptions),
            "::",
            stringify!(dfNoDataValue)
        )
    );
}
extern "C" {
    pub fn GDALGridCreate(
        arg1: GDALGridAlgorithm,
        arg2: *const ::std::os::raw::c_void,
        arg3: GUInt32,
        arg4: *const f64,
        arg5: *const f64,
        arg6: *const f64,
        arg7: f64,
        arg8: f64,
        arg9: f64,
        arg10: f64,
        arg11: GUInt32,
        arg12: GUInt32,
        arg13: GDALDataType,
        arg14: *mut ::std::os::raw::c_void,
        arg15: GDALProgressFunc,
        arg16: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALGridContext {
    _unused: [u8; 0],
}
extern "C" {
    pub fn GDALGridContextCreate(
        eAlgorithm: GDALGridAlgorithm,
        poOptions: *const ::std::os::raw::c_void,
        nPoints: GUInt32,
        padfX: *const f64,
        padfY: *const f64,
        padfZ: *const f64,
        bCallerWillKeepPointArraysAlive: ::std::os::raw::c_int,
    ) -> *mut GDALGridContext;
}
extern "C" {
    pub fn GDALGridContextFree(psContext: *mut GDALGridContext);
}
extern "C" {
    pub fn GDALGridContextProcess(
        psContext: *mut GDALGridContext,
        dfXMin: f64,
        dfXMax: f64,
        dfYMin: f64,
        dfYMax: f64,
        nXSize: GUInt32,
        nYSize: GUInt32,
        eType: GDALDataType,
        pData: *mut ::std::os::raw::c_void,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALComputeMatchingPoints(
        hFirstImage: GDALDatasetH,
        hSecondImage: GDALDatasetH,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pnGCPCount: *mut ::std::os::raw::c_int,
    ) -> *mut GDAL_GCP;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALTriFacet {
    pub anVertexIdx: [::std::os::raw::c_int; 3usize],
    pub anNeighborIdx: [::std::os::raw::c_int; 3usize],
}
#[test]
fn bindgen_test_layout_GDALTriFacet() {
    assert_eq!(
        ::std::mem::size_of::<GDALTriFacet>(),
        24usize,
        concat!("Size of: ", stringify!(GDALTriFacet))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALTriFacet>(),
        4usize,
        concat!("Alignment of ", stringify!(GDALTriFacet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALTriFacet>())).anVertexIdx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriFacet),
            "::",
            stringify!(anVertexIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALTriFacet>())).anNeighborIdx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriFacet),
            "::",
            stringify!(anNeighborIdx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALTriBarycentricCoefficients {
    pub dfMul1X: f64,
    pub dfMul1Y: f64,
    pub dfMul2X: f64,
    pub dfMul2Y: f64,
    pub dfCstX: f64,
    pub dfCstY: f64,
}
#[test]
fn bindgen_test_layout_GDALTriBarycentricCoefficients() {
    assert_eq!(
        ::std::mem::size_of::<GDALTriBarycentricCoefficients>(),
        48usize,
        concat!("Size of: ", stringify!(GDALTriBarycentricCoefficients))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALTriBarycentricCoefficients>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALTriBarycentricCoefficients))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTriBarycentricCoefficients>())).dfMul1X as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriBarycentricCoefficients),
            "::",
            stringify!(dfMul1X)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTriBarycentricCoefficients>())).dfMul1Y as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriBarycentricCoefficients),
            "::",
            stringify!(dfMul1Y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTriBarycentricCoefficients>())).dfMul2X as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriBarycentricCoefficients),
            "::",
            stringify!(dfMul2X)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTriBarycentricCoefficients>())).dfMul2Y as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriBarycentricCoefficients),
            "::",
            stringify!(dfMul2Y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTriBarycentricCoefficients>())).dfCstX as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriBarycentricCoefficients),
            "::",
            stringify!(dfCstX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTriBarycentricCoefficients>())).dfCstY as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriBarycentricCoefficients),
            "::",
            stringify!(dfCstY)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALTriangulation {
    pub nFacets: ::std::os::raw::c_int,
    pub pasFacets: *mut GDALTriFacet,
    pub pasFacetCoefficients: *mut GDALTriBarycentricCoefficients,
}
#[test]
fn bindgen_test_layout_GDALTriangulation() {
    assert_eq!(
        ::std::mem::size_of::<GDALTriangulation>(),
        24usize,
        concat!("Size of: ", stringify!(GDALTriangulation))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALTriangulation>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALTriangulation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALTriangulation>())).nFacets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriangulation),
            "::",
            stringify!(nFacets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALTriangulation>())).pasFacets as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriangulation),
            "::",
            stringify!(pasFacets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALTriangulation>())).pasFacetCoefficients as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALTriangulation),
            "::",
            stringify!(pasFacetCoefficients)
        )
    );
}
extern "C" {
    pub fn GDALHasTriangulation() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALTriangulationCreateDelaunay(
        nPoints: ::std::os::raw::c_int,
        padfX: *const f64,
        padfY: *const f64,
    ) -> *mut GDALTriangulation;
}
extern "C" {
    pub fn GDALTriangulationComputeBarycentricCoefficients(
        psDT: *mut GDALTriangulation,
        padfX: *const f64,
        padfY: *const f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALTriangulationComputeBarycentricCoordinates(
        psDT: *const GDALTriangulation,
        nFacetIdx: ::std::os::raw::c_int,
        dfX: f64,
        dfY: f64,
        pdfL1: *mut f64,
        pdfL2: *mut f64,
        pdfL3: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALTriangulationFindFacetBruteForce(
        psDT: *const GDALTriangulation,
        dfX: f64,
        dfY: f64,
        panOutputFacetIdx: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALTriangulationFindFacetDirected(
        psDT: *const GDALTriangulation,
        nFacetIdx: ::std::os::raw::c_int,
        dfX: f64,
        dfY: f64,
        panOutputFacetIdx: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GDALTriangulationFree(psDT: *mut GDALTriangulation);
}
extern "C" {
    pub fn GDALTriangulationTerminate();
}
extern "C" {
    pub fn GDALOpenVerticalShiftGrid(
        pszProj4Geoidgrids: *const ::std::os::raw::c_char,
        pbError: *mut ::std::os::raw::c_int,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALApplyVerticalShiftGrid(
        hSrcDataset: GDALDatasetH,
        hGridDataset: GDALDatasetH,
        bInverse: ::std::os::raw::c_int,
        dfSrcUnitToMeter: f64,
        dfDstUnitToMeter: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> GDALDatasetH;
}
pub type CPLThreadFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn CPLLockFile(
        pszPath: *const ::std::os::raw::c_char,
        dfWaitInSeconds: f64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLUnlockFile(hLock: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CPLCreateMutex() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLCreateMutexEx(nOptions: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLCreateOrAcquireMutex(
        arg1: *mut *mut ::std::os::raw::c_void,
        dfWaitInSeconds: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLCreateOrAcquireMutexEx(
        arg1: *mut *mut ::std::os::raw::c_void,
        dfWaitInSeconds: f64,
        nOptions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLAcquireMutex(
        hMutex: *mut ::std::os::raw::c_void,
        dfWaitInSeconds: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLReleaseMutex(hMutex: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CPLDestroyMutex(hMutex: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CPLCleanupMasterMutex();
}
extern "C" {
    pub fn CPLCreateCond() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLCondWait(hCond: *mut ::std::os::raw::c_void, hMutex: *mut ::std::os::raw::c_void);
}
pub const CPLCondTimedWaitReason_COND_TIMED_WAIT_COND: CPLCondTimedWaitReason = 0;
pub const CPLCondTimedWaitReason_COND_TIMED_WAIT_TIME_OUT: CPLCondTimedWaitReason = 1;
pub const CPLCondTimedWaitReason_COND_TIMED_WAIT_OTHER: CPLCondTimedWaitReason = 2;
pub type CPLCondTimedWaitReason = ::std::os::raw::c_uint;
extern "C" {
    pub fn CPLCondTimedWait(
        hCond: *mut ::std::os::raw::c_void,
        hMutex: *mut ::std::os::raw::c_void,
        dfWaitInSeconds: f64,
    ) -> CPLCondTimedWaitReason;
}
extern "C" {
    pub fn CPLCondSignal(hCond: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CPLCondBroadcast(hCond: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CPLDestroyCond(hCond: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CPLGetPID() -> GIntBig;
}
extern "C" {
    pub fn CPLGetCurrentProcessID() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLCreateThread(
        pfnMain: CPLThreadFunc,
        pArg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLCreateJoinableThread(
        pfnMain: CPLThreadFunc,
        pArg: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLJoinThread(hJoinableThread: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CPLSleep(dfWaitInSeconds: f64);
}
extern "C" {
    pub fn CPLGetThreadingModel() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLGetNumCPUs() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CPLLock {
    _unused: [u8; 0],
}
pub type CPLLock = _CPLLock;
pub const CPLLockType_LOCK_RECURSIVE_MUTEX: CPLLockType = 0;
pub const CPLLockType_LOCK_ADAPTIVE_MUTEX: CPLLockType = 1;
pub const CPLLockType_LOCK_SPIN: CPLLockType = 2;
pub type CPLLockType = ::std::os::raw::c_uint;
extern "C" {
    pub fn CPLCreateLock(eType: CPLLockType) -> *mut CPLLock;
}
extern "C" {
    pub fn CPLCreateOrAcquireLock(
        arg1: *mut *mut CPLLock,
        eType: CPLLockType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLAcquireLock(arg1: *mut CPLLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLReleaseLock(arg1: *mut CPLLock);
}
extern "C" {
    pub fn CPLDestroyLock(arg1: *mut CPLLock);
}
extern "C" {
    pub fn CPLLockSetDebugPerf(arg1: *mut CPLLock, bEnableIn: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug)]
pub struct CPLMutexHolder {
    pub hMutex: *mut ::std::os::raw::c_void,
    pub pszFile: *const ::std::os::raw::c_char,
    pub nLine: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CPLMutexHolder() {
    assert_eq!(
        ::std::mem::size_of::<CPLMutexHolder>(),
        24usize,
        concat!("Size of: ", stringify!(CPLMutexHolder))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLMutexHolder>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLMutexHolder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLMutexHolder>())).hMutex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLMutexHolder),
            "::",
            stringify!(hMutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLMutexHolder>())).pszFile as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLMutexHolder),
            "::",
            stringify!(pszFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLMutexHolder>())).nLine as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLMutexHolder),
            "::",
            stringify!(nLine)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14CPLMutexHolderC1EPPvdPKcii"]
    pub fn CPLMutexHolder_CPLMutexHolder(
        this: *mut CPLMutexHolder,
        phMutex: *mut *mut ::std::os::raw::c_void,
        dfWaitInSeconds: f64,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
        nOptions: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14CPLMutexHolderC1EPvdPKci"]
    pub fn CPLMutexHolder_CPLMutexHolder1(
        this: *mut CPLMutexHolder,
        hMutex: *mut ::std::os::raw::c_void,
        dfWaitInSeconds: f64,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14CPLMutexHolderD1Ev"]
    pub fn CPLMutexHolder_CPLMutexHolder_destructor(this: *mut CPLMutexHolder);
}
impl CPLMutexHolder {
    #[inline]
    pub unsafe fn new(
        phMutex: *mut *mut ::std::os::raw::c_void,
        dfWaitInSeconds: f64,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
        nOptions: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLMutexHolder_CPLMutexHolder(
            __bindgen_tmp.as_mut_ptr(),
            phMutex,
            dfWaitInSeconds,
            pszFile,
            nLine,
            nOptions,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        hMutex: *mut ::std::os::raw::c_void,
        dfWaitInSeconds: f64,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLMutexHolder_CPLMutexHolder1(
            __bindgen_tmp.as_mut_ptr(),
            hMutex,
            dfWaitInSeconds,
            pszFile,
            nLine,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        CPLMutexHolder_CPLMutexHolder_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct CPLLockHolder {
    pub hLock: *mut CPLLock,
    pub pszFile: *const ::std::os::raw::c_char,
    pub nLine: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CPLLockHolder() {
    assert_eq!(
        ::std::mem::size_of::<CPLLockHolder>(),
        24usize,
        concat!("Size of: ", stringify!(CPLLockHolder))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLLockHolder>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLLockHolder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLLockHolder>())).hLock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLLockHolder),
            "::",
            stringify!(hLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLLockHolder>())).pszFile as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLLockHolder),
            "::",
            stringify!(pszFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLLockHolder>())).nLine as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLLockHolder),
            "::",
            stringify!(nLine)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLLockHolderC1EPP8_CPLLock11CPLLockTypePKci"]
    pub fn CPLLockHolder_CPLLockHolder(
        this: *mut CPLLockHolder,
        phSpin: *mut *mut CPLLock,
        eType: CPLLockType,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLLockHolderC1EP8_CPLLockPKci"]
    pub fn CPLLockHolder_CPLLockHolder1(
        this: *mut CPLLockHolder,
        hSpin: *mut CPLLock,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLLockHolderD1Ev"]
    pub fn CPLLockHolder_CPLLockHolder_destructor(this: *mut CPLLockHolder);
}
impl CPLLockHolder {
    #[inline]
    pub unsafe fn new(
        phSpin: *mut *mut CPLLock,
        eType: CPLLockType,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLLockHolder_CPLLockHolder(__bindgen_tmp.as_mut_ptr(), phSpin, eType, pszFile, nLine);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        hSpin: *mut CPLLock,
        pszFile: *const ::std::os::raw::c_char,
        nLine: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLLockHolder_CPLLockHolder1(__bindgen_tmp.as_mut_ptr(), hSpin, pszFile, nLine);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        CPLLockHolder_CPLLockHolder_destructor(self)
    }
}
extern "C" {
    pub fn CPLGetTLS(nIndex: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLGetTLSEx(
        nIndex: ::std::os::raw::c_int,
        pbMemoryErrorOccurred: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CPLSetTLS(
        nIndex: ::std::os::raw::c_int,
        pData: *mut ::std::os::raw::c_void,
        bFreeOnExit: ::std::os::raw::c_int,
    );
}
pub type CPLTLSFreeFunc =
    ::std::option::Option<unsafe extern "C" fn(pData: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn CPLSetTLSWithFreeFunc(
        nIndex: ::std::os::raw::c_int,
        pData: *mut ::std::os::raw::c_void,
        pfnFree: CPLTLSFreeFunc,
    );
}
extern "C" {
    pub fn CPLSetTLSWithFreeFuncEx(
        nIndex: ::std::os::raw::c_int,
        pData: *mut ::std::os::raw::c_void,
        pfnFree: CPLTLSFreeFunc,
        pbMemoryErrorOccurred: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CPLCleanupTLS();
}
pub const GDALResampleAlg_GRA_NearestNeighbour: GDALResampleAlg = 0;
pub const GDALResampleAlg_GRA_Bilinear: GDALResampleAlg = 1;
pub const GDALResampleAlg_GRA_Cubic: GDALResampleAlg = 2;
pub const GDALResampleAlg_GRA_CubicSpline: GDALResampleAlg = 3;
pub const GDALResampleAlg_GRA_Lanczos: GDALResampleAlg = 4;
pub const GDALResampleAlg_GRA_Average: GDALResampleAlg = 5;
pub const GDALResampleAlg_GRA_Mode: GDALResampleAlg = 6;
pub const GDALResampleAlg_GRA_Max: GDALResampleAlg = 8;
pub const GDALResampleAlg_GRA_Min: GDALResampleAlg = 9;
pub const GDALResampleAlg_GRA_Med: GDALResampleAlg = 10;
pub const GDALResampleAlg_GRA_Q1: GDALResampleAlg = 11;
pub const GDALResampleAlg_GRA_Q3: GDALResampleAlg = 12;
pub const GDALResampleAlg_GRA_Sum: GDALResampleAlg = 13;
pub type GDALResampleAlg = ::std::os::raw::c_uint;
pub const GWKAverageOrModeAlg_GWKAOM_Average: GWKAverageOrModeAlg = 1;
pub const GWKAverageOrModeAlg_GWKAOM_Fmode: GWKAverageOrModeAlg = 2;
pub const GWKAverageOrModeAlg_GWKAOM_Imode: GWKAverageOrModeAlg = 3;
pub const GWKAverageOrModeAlg_GWKAOM_Max: GWKAverageOrModeAlg = 4;
pub const GWKAverageOrModeAlg_GWKAOM_Min: GWKAverageOrModeAlg = 5;
pub const GWKAverageOrModeAlg_GWKAOM_Quant: GWKAverageOrModeAlg = 6;
pub const GWKAverageOrModeAlg_GWKAOM_Sum: GWKAverageOrModeAlg = 7;
pub type GWKAverageOrModeAlg = ::std::os::raw::c_uint;
pub type GDALMaskFunc = ::std::option::Option<
    unsafe extern "C" fn(
        pMaskFuncArg: *mut ::std::os::raw::c_void,
        nBandCount: ::std::os::raw::c_int,
        eType: GDALDataType,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        papabyImageData: *mut *mut GByte,
        bMaskIsFloat: ::std::os::raw::c_int,
        pMask: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn GDALWarpNoDataMasker(
        pMaskFuncArg: *mut ::std::os::raw::c_void,
        nBandCount: ::std::os::raw::c_int,
        eType: GDALDataType,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        papabyImageData: *mut *mut GByte,
        bMaskIsFloat: ::std::os::raw::c_int,
        pValidityMask: *mut ::std::os::raw::c_void,
        pbOutAllValid: *mut ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALWarpDstAlphaMasker(
        pMaskFuncArg: *mut ::std::os::raw::c_void,
        nBandCount: ::std::os::raw::c_int,
        eType: GDALDataType,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        arg1: *mut *mut GByte,
        bMaskIsFloat: ::std::os::raw::c_int,
        pValidityMask: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALWarpSrcAlphaMasker(
        pMaskFuncArg: *mut ::std::os::raw::c_void,
        nBandCount: ::std::os::raw::c_int,
        eType: GDALDataType,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        arg1: *mut *mut GByte,
        bMaskIsFloat: ::std::os::raw::c_int,
        pValidityMask: *mut ::std::os::raw::c_void,
        pbOutAllOpaque: *mut ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALWarpSrcMaskMasker(
        pMaskFuncArg: *mut ::std::os::raw::c_void,
        nBandCount: ::std::os::raw::c_int,
        eType: GDALDataType,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        arg1: *mut *mut GByte,
        bMaskIsFloat: ::std::os::raw::c_int,
        pValidityMask: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALWarpCutlineMasker(
        pMaskFuncArg: *mut ::std::os::raw::c_void,
        nBandCount: ::std::os::raw::c_int,
        eType: GDALDataType,
        nXOff: ::std::os::raw::c_int,
        nYOff: ::std::os::raw::c_int,
        nXSize: ::std::os::raw::c_int,
        nYSize: ::std::os::raw::c_int,
        arg1: *mut *mut GByte,
        bMaskIsFloat: ::std::os::raw::c_int,
        pValidityMask: *mut ::std::os::raw::c_void,
    ) -> CPLErr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDALWarpOptions {
    pub papszWarpOptions: *mut *mut ::std::os::raw::c_char,
    pub dfWarpMemoryLimit: f64,
    pub eResampleAlg: GDALResampleAlg,
    pub eWorkingDataType: GDALDataType,
    pub hSrcDS: GDALDatasetH,
    pub hDstDS: GDALDatasetH,
    pub nBandCount: ::std::os::raw::c_int,
    pub panSrcBands: *mut ::std::os::raw::c_int,
    pub panDstBands: *mut ::std::os::raw::c_int,
    pub nSrcAlphaBand: ::std::os::raw::c_int,
    pub nDstAlphaBand: ::std::os::raw::c_int,
    pub padfSrcNoDataReal: *mut f64,
    pub padfSrcNoDataImag: *mut f64,
    pub padfDstNoDataReal: *mut f64,
    pub padfDstNoDataImag: *mut f64,
    pub pfnProgress: GDALProgressFunc,
    pub pProgressArg: *mut ::std::os::raw::c_void,
    pub pfnTransformer: GDALTransformerFunc,
    pub pTransformerArg: *mut ::std::os::raw::c_void,
    pub papfnSrcPerBandValidityMaskFunc: *mut GDALMaskFunc,
    pub papSrcPerBandValidityMaskFuncArg: *mut *mut ::std::os::raw::c_void,
    pub pfnSrcValidityMaskFunc: GDALMaskFunc,
    pub pSrcValidityMaskFuncArg: *mut ::std::os::raw::c_void,
    pub pfnSrcDensityMaskFunc: GDALMaskFunc,
    pub pSrcDensityMaskFuncArg: *mut ::std::os::raw::c_void,
    pub pfnDstDensityMaskFunc: GDALMaskFunc,
    pub pDstDensityMaskFuncArg: *mut ::std::os::raw::c_void,
    pub pfnDstValidityMaskFunc: GDALMaskFunc,
    pub pDstValidityMaskFuncArg: *mut ::std::os::raw::c_void,
    pub pfnPreWarpChunkProcessor: ::std::option::Option<
        unsafe extern "C" fn(
            pKern: *mut ::std::os::raw::c_void,
            pArg: *mut ::std::os::raw::c_void,
        ) -> CPLErr,
    >,
    pub pPreWarpProcessorArg: *mut ::std::os::raw::c_void,
    pub pfnPostWarpChunkProcessor: ::std::option::Option<
        unsafe extern "C" fn(
            pKern: *mut ::std::os::raw::c_void,
            pArg: *mut ::std::os::raw::c_void,
        ) -> CPLErr,
    >,
    pub pPostWarpProcessorArg: *mut ::std::os::raw::c_void,
    pub hCutline: *mut ::std::os::raw::c_void,
    pub dfCutlineBlendDist: f64,
}
#[test]
fn bindgen_test_layout_GDALWarpOptions() {
    assert_eq!(
        ::std::mem::size_of::<GDALWarpOptions>(),
        264usize,
        concat!("Size of: ", stringify!(GDALWarpOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALWarpOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALWarpOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).papszWarpOptions as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(papszWarpOptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).dfWarpMemoryLimit as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(dfWarpMemoryLimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).eResampleAlg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(eResampleAlg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).eWorkingDataType as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(eWorkingDataType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).hSrcDS as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(hSrcDS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).hDstDS as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(hDstDS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).nBandCount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(nBandCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).panSrcBands as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(panSrcBands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).panDstBands as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(panDstBands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).nSrcAlphaBand as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(nSrcAlphaBand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).nDstAlphaBand as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(nDstAlphaBand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).padfSrcNoDataReal as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(padfSrcNoDataReal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).padfSrcNoDataImag as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(padfSrcNoDataImag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).padfDstNoDataReal as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(padfDstNoDataReal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).padfDstNoDataImag as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(padfDstNoDataImag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).pfnProgress as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pfnProgress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).pProgressArg as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pProgressArg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).pfnTransformer as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pfnTransformer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).pTransformerArg as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pTransformerArg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).papfnSrcPerBandValidityMaskFunc as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(papfnSrcPerBandValidityMaskFunc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).papSrcPerBandValidityMaskFuncArg as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(papSrcPerBandValidityMaskFuncArg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pfnSrcValidityMaskFunc as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pfnSrcValidityMaskFunc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pSrcValidityMaskFuncArg as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pSrcValidityMaskFuncArg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pfnSrcDensityMaskFunc as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pfnSrcDensityMaskFunc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pSrcDensityMaskFuncArg as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pSrcDensityMaskFuncArg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pfnDstDensityMaskFunc as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pfnDstDensityMaskFunc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pDstDensityMaskFuncArg as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pDstDensityMaskFuncArg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pfnDstValidityMaskFunc as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pfnDstValidityMaskFunc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pDstValidityMaskFuncArg as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pDstValidityMaskFuncArg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pfnPreWarpChunkProcessor as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pfnPreWarpChunkProcessor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pPreWarpProcessorArg as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pPreWarpProcessorArg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pfnPostWarpChunkProcessor as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pfnPostWarpChunkProcessor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).pPostWarpProcessorArg as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(pPostWarpProcessorArg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOptions>())).hCutline as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(hCutline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOptions>())).dfCutlineBlendDist as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOptions),
            "::",
            stringify!(dfCutlineBlendDist)
        )
    );
}
extern "C" {
    pub fn GDALCreateWarpOptions() -> *mut GDALWarpOptions;
}
extern "C" {
    pub fn GDALDestroyWarpOptions(arg1: *mut GDALWarpOptions);
}
extern "C" {
    pub fn GDALCloneWarpOptions(arg1: *const GDALWarpOptions) -> *mut GDALWarpOptions;
}
extern "C" {
    pub fn GDALWarpInitDstNoDataReal(arg1: *mut GDALWarpOptions, dNoDataReal: f64);
}
extern "C" {
    pub fn GDALWarpInitSrcNoDataReal(arg1: *mut GDALWarpOptions, dNoDataReal: f64);
}
extern "C" {
    pub fn GDALWarpInitNoDataReal(arg1: *mut GDALWarpOptions, dNoDataReal: f64);
}
extern "C" {
    pub fn GDALWarpInitDstNoDataImag(arg1: *mut GDALWarpOptions, dNoDataImag: f64);
}
extern "C" {
    pub fn GDALWarpInitSrcNoDataImag(arg1: *mut GDALWarpOptions, dNoDataImag: f64);
}
extern "C" {
    pub fn GDALWarpResolveWorkingDataType(arg1: *mut GDALWarpOptions);
}
extern "C" {
    pub fn GDALWarpInitDefaultBandMapping(
        arg1: *mut GDALWarpOptions,
        nBandCount: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GDALSerializeWarpOptions(arg1: *const GDALWarpOptions) -> *mut CPLXMLNode;
}
extern "C" {
    pub fn GDALDeserializeWarpOptions(arg1: *mut CPLXMLNode) -> *mut GDALWarpOptions;
}
extern "C" {
    pub fn GDALReprojectImage(
        hSrcDS: GDALDatasetH,
        pszSrcWKT: *const ::std::os::raw::c_char,
        hDstDS: GDALDatasetH,
        pszDstWKT: *const ::std::os::raw::c_char,
        eResampleAlg: GDALResampleAlg,
        dfWarpMemoryLimit: f64,
        dfMaxError: f64,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
        psOptions: *mut GDALWarpOptions,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALCreateAndReprojectImage(
        hSrcDS: GDALDatasetH,
        pszSrcWKT: *const ::std::os::raw::c_char,
        pszDstFilename: *const ::std::os::raw::c_char,
        pszDstWKT: *const ::std::os::raw::c_char,
        hDstDriver: GDALDriverH,
        papszCreateOptions: *mut *mut ::std::os::raw::c_char,
        eResampleAlg: GDALResampleAlg,
        dfWarpMemoryLimit: f64,
        dfMaxError: f64,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
        psOptions: *mut GDALWarpOptions,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALAutoCreateWarpedVRT(
        hSrcDS: GDALDatasetH,
        pszSrcWKT: *const ::std::os::raw::c_char,
        pszDstWKT: *const ::std::os::raw::c_char,
        eResampleAlg: GDALResampleAlg,
        dfMaxError: f64,
        psOptions: *const GDALWarpOptions,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALAutoCreateWarpedVRTEx(
        hSrcDS: GDALDatasetH,
        pszSrcWKT: *const ::std::os::raw::c_char,
        pszDstWKT: *const ::std::os::raw::c_char,
        eResampleAlg: GDALResampleAlg,
        dfMaxError: f64,
        psOptions: *const GDALWarpOptions,
        papszTransformerOptions: CSLConstList,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALCreateWarpedVRT(
        hSrcDS: GDALDatasetH,
        nPixels: ::std::os::raw::c_int,
        nLines: ::std::os::raw::c_int,
        padfGeoTransform: *mut f64,
        psOptions: *mut GDALWarpOptions,
    ) -> GDALDatasetH;
}
extern "C" {
    pub fn GDALInitializeWarpedVRT(hDS: GDALDatasetH, psWO: *mut GDALWarpOptions) -> CPLErr;
}
#[repr(C)]
pub struct GDALWarpKernel__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GDALWarpKernel {
    pub vtable_: *const GDALWarpKernel__bindgen_vtable,
    pub papszWarpOptions: *mut *mut ::std::os::raw::c_char,
    pub eResample: GDALResampleAlg,
    pub eWorkingDataType: GDALDataType,
    pub nBands: ::std::os::raw::c_int,
    pub nSrcXSize: ::std::os::raw::c_int,
    pub nSrcYSize: ::std::os::raw::c_int,
    pub dfSrcXExtraSize: f64,
    pub dfSrcYExtraSize: f64,
    pub papabySrcImage: *mut *mut GByte,
    pub papanBandSrcValid: *mut *mut GUInt32,
    pub panUnifiedSrcValid: *mut GUInt32,
    pub pafUnifiedSrcDensity: *mut f32,
    pub nDstXSize: ::std::os::raw::c_int,
    pub nDstYSize: ::std::os::raw::c_int,
    pub papabyDstImage: *mut *mut GByte,
    pub panDstValid: *mut GUInt32,
    pub pafDstDensity: *mut f32,
    pub dfXScale: f64,
    pub dfYScale: f64,
    pub dfXFilter: f64,
    pub dfYFilter: f64,
    pub nXRadius: ::std::os::raw::c_int,
    pub nYRadius: ::std::os::raw::c_int,
    pub nFiltInitX: ::std::os::raw::c_int,
    pub nFiltInitY: ::std::os::raw::c_int,
    pub nSrcXOff: ::std::os::raw::c_int,
    pub nSrcYOff: ::std::os::raw::c_int,
    pub nDstXOff: ::std::os::raw::c_int,
    pub nDstYOff: ::std::os::raw::c_int,
    pub pfnTransformer: GDALTransformerFunc,
    pub pTransformerArg: *mut ::std::os::raw::c_void,
    pub pfnProgress: GDALProgressFunc,
    pub pProgress: *mut ::std::os::raw::c_void,
    pub dfProgressBase: f64,
    pub dfProgressScale: f64,
    pub padfDstNoDataReal: *mut f64,
    pub psThreadData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_GDALWarpKernel() {
    assert_eq!(
        ::std::mem::size_of::<GDALWarpKernel>(),
        248usize,
        concat!("Size of: ", stringify!(GDALWarpKernel))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALWarpKernel>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALWarpKernel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).papszWarpOptions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(papszWarpOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).eResample as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(eResample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).eWorkingDataType as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(eWorkingDataType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nBands as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nBands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nSrcXSize as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nSrcXSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nSrcYSize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nSrcYSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).dfSrcXExtraSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(dfSrcXExtraSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).dfSrcYExtraSize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(dfSrcYExtraSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).papabySrcImage as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(papabySrcImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpKernel>())).papanBandSrcValid as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(papanBandSrcValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpKernel>())).panUnifiedSrcValid as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(panUnifiedSrcValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpKernel>())).pafUnifiedSrcDensity as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(pafUnifiedSrcDensity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nDstXSize as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nDstXSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nDstYSize as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nDstYSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).papabyDstImage as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(papabyDstImage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).panDstValid as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(panDstValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).pafDstDensity as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(pafDstDensity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).dfXScale as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(dfXScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).dfYScale as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(dfYScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).dfXFilter as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(dfXFilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).dfYFilter as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(dfYFilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nXRadius as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nXRadius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nYRadius as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nYRadius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nFiltInitX as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nFiltInitX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nFiltInitY as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nFiltInitY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nSrcXOff as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nSrcXOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nSrcYOff as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nSrcYOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nDstXOff as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nDstXOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).nDstYOff as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(nDstYOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).pfnTransformer as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(pfnTransformer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).pTransformerArg as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(pTransformerArg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).pfnProgress as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(pfnProgress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).pProgress as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(pProgress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).dfProgressBase as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(dfProgressBase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).dfProgressScale as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(dfProgressScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpKernel>())).padfDstNoDataReal as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(padfDstNoDataReal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpKernel>())).psThreadData as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpKernel),
            "::",
            stringify!(psThreadData)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14GDALWarpKernel8ValidateEv"]
    pub fn GDALWarpKernel_Validate(this: *mut GDALWarpKernel) -> CPLErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN14GDALWarpKernel11PerformWarpEv"]
    pub fn GDALWarpKernel_PerformWarp(this: *mut GDALWarpKernel) -> CPLErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN14GDALWarpKernelC1Ev"]
    pub fn GDALWarpKernel_GDALWarpKernel(this: *mut GDALWarpKernel);
}
impl GDALWarpKernel {
    #[inline]
    pub unsafe fn Validate(&mut self) -> CPLErr {
        GDALWarpKernel_Validate(self)
    }
    #[inline]
    pub unsafe fn PerformWarp(&mut self) -> CPLErr {
        GDALWarpKernel_PerformWarp(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GDALWarpKernel_GDALWarpKernel(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN14GDALWarpKernelD1Ev"]
    pub fn GDALWarpKernel_GDALWarpKernel_destructor(this: *mut GDALWarpKernel);
}
extern "C" {
    #[link_name = "\u{1}_Z16GWKThreadsCreatePPcPFiPviiPdS2_S2_PiES1_"]
    pub fn GWKThreadsCreate(
        papszWarpOptions: *mut *mut ::std::os::raw::c_char,
        pfnTransformer: GDALTransformerFunc,
        pTransformerArg: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z13GWKThreadsEndPv"]
    pub fn GWKThreadsEnd(psThreadDataIn: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDALWarpChunk {
    _unused: [u8; 0],
}
pub type GDALWarpChunk = _GDALWarpChunk;
#[repr(C)]
pub struct GDALWarpOperation__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GDALWarpOperation {
    pub vtable_: *const GDALWarpOperation__bindgen_vtable,
    pub psOptions: *mut GDALWarpOptions,
    pub hIOMutex: *mut ::std::os::raw::c_void,
    pub hWarpMutex: *mut ::std::os::raw::c_void,
    pub nChunkListCount: ::std::os::raw::c_int,
    pub nChunkListMax: ::std::os::raw::c_int,
    pub pasChunkList: *mut GDALWarpChunk,
    pub bReportTimings: ::std::os::raw::c_int,
    pub nLastTimeReported: ::std::os::raw::c_ulong,
    pub psThreadData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_GDALWarpOperation() {
    assert_eq!(
        ::std::mem::size_of::<GDALWarpOperation>(),
        72usize,
        concat!("Size of: ", stringify!(GDALWarpOperation))
    );
    assert_eq!(
        ::std::mem::align_of::<GDALWarpOperation>(),
        8usize,
        concat!("Alignment of ", stringify!(GDALWarpOperation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOperation>())).psOptions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOperation),
            "::",
            stringify!(psOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOperation>())).hIOMutex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOperation),
            "::",
            stringify!(hIOMutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOperation>())).hWarpMutex as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOperation),
            "::",
            stringify!(hWarpMutex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOperation>())).nChunkListCount as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOperation),
            "::",
            stringify!(nChunkListCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOperation>())).nChunkListMax as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOperation),
            "::",
            stringify!(nChunkListMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOperation>())).pasChunkList as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOperation),
            "::",
            stringify!(pasChunkList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOperation>())).bReportTimings as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOperation),
            "::",
            stringify!(bReportTimings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GDALWarpOperation>())).nLastTimeReported as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOperation),
            "::",
            stringify!(nLastTimeReported)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GDALWarpOperation>())).psThreadData as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GDALWarpOperation),
            "::",
            stringify!(psThreadData)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperation10InitializeEPK15GDALWarpOptions"]
    pub fn GDALWarpOperation_Initialize(
        this: *mut GDALWarpOperation,
        psNewOptions: *const GDALWarpOptions,
    ) -> CPLErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperation23CreateDestinationBufferEiiPi"]
    pub fn GDALWarpOperation_CreateDestinationBuffer(
        this: *mut GDALWarpOperation,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
        pbWasInitialized: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperation24DestroyDestinationBufferEPv"]
    pub fn GDALWarpOperation_DestroyDestinationBuffer(pDstBuffer: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperation10GetOptionsEv"]
    pub fn GDALWarpOperation_GetOptions(this: *mut GDALWarpOperation) -> *const GDALWarpOptions;
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperation17ChunkAndWarpImageEiiii"]
    pub fn GDALWarpOperation_ChunkAndWarpImage(
        this: *mut GDALWarpOperation,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperation17ChunkAndWarpMultiEiiii"]
    pub fn GDALWarpOperation_ChunkAndWarpMulti(
        this: *mut GDALWarpOperation,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperation10WarpRegionEiiiiiiiidd"]
    pub fn GDALWarpOperation_WarpRegion(
        this: *mut GDALWarpOperation,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
        nSrcXOff: ::std::os::raw::c_int,
        nSrcYOff: ::std::os::raw::c_int,
        nSrcXSize: ::std::os::raw::c_int,
        nSrcYSize: ::std::os::raw::c_int,
        dfProgressBase: f64,
        dfProgressScale: f64,
    ) -> CPLErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperation10WarpRegionEiiiiiiiidddd"]
    pub fn GDALWarpOperation_WarpRegion1(
        this: *mut GDALWarpOperation,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
        nSrcXOff: ::std::os::raw::c_int,
        nSrcYOff: ::std::os::raw::c_int,
        nSrcXSize: ::std::os::raw::c_int,
        nSrcYSize: ::std::os::raw::c_int,
        dfSrcXExtraSize: f64,
        dfSrcYExtraSize: f64,
        dfProgressBase: f64,
        dfProgressScale: f64,
    ) -> CPLErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperation18WarpRegionToBufferEiiiiPv12GDALDataTypeiiiidd"]
    pub fn GDALWarpOperation_WarpRegionToBuffer(
        this: *mut GDALWarpOperation,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
        pDataBuf: *mut ::std::os::raw::c_void,
        eBufDataType: GDALDataType,
        nSrcXOff: ::std::os::raw::c_int,
        nSrcYOff: ::std::os::raw::c_int,
        nSrcXSize: ::std::os::raw::c_int,
        nSrcYSize: ::std::os::raw::c_int,
        dfProgressBase: f64,
        dfProgressScale: f64,
    ) -> CPLErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperation18WarpRegionToBufferEiiiiPv12GDALDataTypeiiiidddd"]
    pub fn GDALWarpOperation_WarpRegionToBuffer1(
        this: *mut GDALWarpOperation,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
        pDataBuf: *mut ::std::os::raw::c_void,
        eBufDataType: GDALDataType,
        nSrcXOff: ::std::os::raw::c_int,
        nSrcYOff: ::std::os::raw::c_int,
        nSrcXSize: ::std::os::raw::c_int,
        nSrcYSize: ::std::os::raw::c_int,
        dfSrcXExtraSize: f64,
        dfSrcYExtraSize: f64,
        dfProgressBase: f64,
        dfProgressScale: f64,
    ) -> CPLErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperationC1Ev"]
    pub fn GDALWarpOperation_GDALWarpOperation(this: *mut GDALWarpOperation);
}
impl GDALWarpOperation {
    #[inline]
    pub unsafe fn Initialize(&mut self, psNewOptions: *const GDALWarpOptions) -> CPLErr {
        GDALWarpOperation_Initialize(self, psNewOptions)
    }
    #[inline]
    pub unsafe fn CreateDestinationBuffer(
        &mut self,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
        pbWasInitialized: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void {
        GDALWarpOperation_CreateDestinationBuffer(self, nDstXSize, nDstYSize, pbWasInitialized)
    }
    #[inline]
    pub unsafe fn DestroyDestinationBuffer(pDstBuffer: *mut ::std::os::raw::c_void) {
        GDALWarpOperation_DestroyDestinationBuffer(pDstBuffer)
    }
    #[inline]
    pub unsafe fn GetOptions(&mut self) -> *const GDALWarpOptions {
        GDALWarpOperation_GetOptions(self)
    }
    #[inline]
    pub unsafe fn ChunkAndWarpImage(
        &mut self,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
    ) -> CPLErr {
        GDALWarpOperation_ChunkAndWarpImage(self, nDstXOff, nDstYOff, nDstXSize, nDstYSize)
    }
    #[inline]
    pub unsafe fn ChunkAndWarpMulti(
        &mut self,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
    ) -> CPLErr {
        GDALWarpOperation_ChunkAndWarpMulti(self, nDstXOff, nDstYOff, nDstXSize, nDstYSize)
    }
    #[inline]
    pub unsafe fn WarpRegion(
        &mut self,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
        nSrcXOff: ::std::os::raw::c_int,
        nSrcYOff: ::std::os::raw::c_int,
        nSrcXSize: ::std::os::raw::c_int,
        nSrcYSize: ::std::os::raw::c_int,
        dfProgressBase: f64,
        dfProgressScale: f64,
    ) -> CPLErr {
        GDALWarpOperation_WarpRegion(
            self,
            nDstXOff,
            nDstYOff,
            nDstXSize,
            nDstYSize,
            nSrcXOff,
            nSrcYOff,
            nSrcXSize,
            nSrcYSize,
            dfProgressBase,
            dfProgressScale,
        )
    }
    #[inline]
    pub unsafe fn WarpRegion1(
        &mut self,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
        nSrcXOff: ::std::os::raw::c_int,
        nSrcYOff: ::std::os::raw::c_int,
        nSrcXSize: ::std::os::raw::c_int,
        nSrcYSize: ::std::os::raw::c_int,
        dfSrcXExtraSize: f64,
        dfSrcYExtraSize: f64,
        dfProgressBase: f64,
        dfProgressScale: f64,
    ) -> CPLErr {
        GDALWarpOperation_WarpRegion1(
            self,
            nDstXOff,
            nDstYOff,
            nDstXSize,
            nDstYSize,
            nSrcXOff,
            nSrcYOff,
            nSrcXSize,
            nSrcYSize,
            dfSrcXExtraSize,
            dfSrcYExtraSize,
            dfProgressBase,
            dfProgressScale,
        )
    }
    #[inline]
    pub unsafe fn WarpRegionToBuffer(
        &mut self,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
        pDataBuf: *mut ::std::os::raw::c_void,
        eBufDataType: GDALDataType,
        nSrcXOff: ::std::os::raw::c_int,
        nSrcYOff: ::std::os::raw::c_int,
        nSrcXSize: ::std::os::raw::c_int,
        nSrcYSize: ::std::os::raw::c_int,
        dfProgressBase: f64,
        dfProgressScale: f64,
    ) -> CPLErr {
        GDALWarpOperation_WarpRegionToBuffer(
            self,
            nDstXOff,
            nDstYOff,
            nDstXSize,
            nDstYSize,
            pDataBuf,
            eBufDataType,
            nSrcXOff,
            nSrcYOff,
            nSrcXSize,
            nSrcYSize,
            dfProgressBase,
            dfProgressScale,
        )
    }
    #[inline]
    pub unsafe fn WarpRegionToBuffer1(
        &mut self,
        nDstXOff: ::std::os::raw::c_int,
        nDstYOff: ::std::os::raw::c_int,
        nDstXSize: ::std::os::raw::c_int,
        nDstYSize: ::std::os::raw::c_int,
        pDataBuf: *mut ::std::os::raw::c_void,
        eBufDataType: GDALDataType,
        nSrcXOff: ::std::os::raw::c_int,
        nSrcYOff: ::std::os::raw::c_int,
        nSrcXSize: ::std::os::raw::c_int,
        nSrcYSize: ::std::os::raw::c_int,
        dfSrcXExtraSize: f64,
        dfSrcYExtraSize: f64,
        dfProgressBase: f64,
        dfProgressScale: f64,
    ) -> CPLErr {
        GDALWarpOperation_WarpRegionToBuffer1(
            self,
            nDstXOff,
            nDstYOff,
            nDstXSize,
            nDstYSize,
            pDataBuf,
            eBufDataType,
            nSrcXOff,
            nSrcYOff,
            nSrcXSize,
            nSrcYSize,
            dfSrcXExtraSize,
            dfSrcYExtraSize,
            dfProgressBase,
            dfProgressScale,
        )
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GDALWarpOperation_GDALWarpOperation(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN17GDALWarpOperationD1Ev"]
    pub fn GDALWarpOperation_GDALWarpOperation_destructor(this: *mut GDALWarpOperation);
}
pub type GDALWarpOperationH = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn GDALCreateWarpOperation(arg1: *const GDALWarpOptions) -> GDALWarpOperationH;
}
extern "C" {
    pub fn GDALDestroyWarpOperation(arg1: GDALWarpOperationH);
}
extern "C" {
    pub fn GDALChunkAndWarpImage(
        arg1: GDALWarpOperationH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALChunkAndWarpMulti(
        arg1: GDALWarpOperationH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALWarpRegion(
        arg1: GDALWarpOperationH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GDALWarpRegionToBuffer(
        arg1: GDALWarpOperationH,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_void,
        arg7: GDALDataType,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
    ) -> CPLErr;
}
extern "C" {
    pub fn GWKGetFilterRadius(eResampleAlg: GDALResampleAlg) -> ::std::os::raw::c_int;
}
pub type FilterFuncType = ::std::option::Option<unsafe extern "C" fn(dfX: f64) -> f64>;
extern "C" {
    pub fn GWKGetFilterFunc(eResampleAlg: GDALResampleAlg) -> FilterFuncType;
}
pub type FilterFunc4ValuesType =
    ::std::option::Option<unsafe extern "C" fn(padfVals: *mut f64) -> f64>;
extern "C" {
    pub fn GWKGetFilterFunc4Values(eResampleAlg: GDALResampleAlg) -> FilterFunc4ValuesType;
}
pub const OGRAxisOrientation_OAO_Other: OGRAxisOrientation = 0;
pub const OGRAxisOrientation_OAO_North: OGRAxisOrientation = 1;
pub const OGRAxisOrientation_OAO_South: OGRAxisOrientation = 2;
pub const OGRAxisOrientation_OAO_East: OGRAxisOrientation = 3;
pub const OGRAxisOrientation_OAO_West: OGRAxisOrientation = 4;
pub const OGRAxisOrientation_OAO_Up: OGRAxisOrientation = 5;
pub const OGRAxisOrientation_OAO_Down: OGRAxisOrientation = 6;
pub type OGRAxisOrientation = ::std::os::raw::c_uint;
extern "C" {
    pub fn OSRAxisEnumToName(eOrientation: OGRAxisOrientation) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OSRSetPROJSearchPaths(papszPaths: *const *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn OSRGetPROJSearchPaths() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OSRGetPROJVersion(
        pnMajor: *mut ::std::os::raw::c_int,
        pnMinor: *mut ::std::os::raw::c_int,
        pnPatch: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OSRNewSpatialReference(arg1: *const ::std::os::raw::c_char) -> OGRSpatialReferenceH;
}
extern "C" {
    pub fn OSRCloneGeogCS(arg1: OGRSpatialReferenceH) -> OGRSpatialReferenceH;
}
extern "C" {
    pub fn OSRClone(arg1: OGRSpatialReferenceH) -> OGRSpatialReferenceH;
}
extern "C" {
    pub fn OSRDestroySpatialReference(arg1: OGRSpatialReferenceH);
}
extern "C" {
    pub fn OSRReference(arg1: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRDereference(arg1: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRRelease(arg1: OGRSpatialReferenceH);
}
extern "C" {
    pub fn OSRValidate(arg1: OGRSpatialReferenceH) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromEPSG(arg1: OGRSpatialReferenceH, arg2: ::std::os::raw::c_int) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromEPSGA(arg1: OGRSpatialReferenceH, arg2: ::std::os::raw::c_int) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromWkt(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromProj4(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromESRI(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromPCI(
        hSRS: OGRSpatialReferenceH,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromUSGS(
        arg1: OGRSpatialReferenceH,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: *mut f64,
        arg5: ::std::os::raw::c_long,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromXML(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromDict(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromPanorama(
        arg1: OGRSpatialReferenceH,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *mut f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromOzi(
        arg1: OGRSpatialReferenceH,
        arg2: *const *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromMICoordSys(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromERM(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRImportFromUrl(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToWkt(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToWktEx(
        arg1: OGRSpatialReferenceH,
        ppszResult: *mut *mut ::std::os::raw::c_char,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToPrettyWkt(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToPROJJSON(
        hSRS: OGRSpatialReferenceH,
        ppszReturn: *mut *mut ::std::os::raw::c_char,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToProj4(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToPCI(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToUSGS(
        arg1: OGRSpatialReferenceH,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut *mut f64,
        arg5: *mut ::std::os::raw::c_long,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToXML(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToPanorama(
        arg1: OGRSpatialReferenceH,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut ::std::os::raw::c_long,
        arg6: *mut f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToMICoordSys(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRExportToERM(
        arg1: OGRSpatialReferenceH,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRMorphToESRI(arg1: OGRSpatialReferenceH) -> OGRErr;
}
extern "C" {
    pub fn OSRMorphFromESRI(arg1: OGRSpatialReferenceH) -> OGRErr;
}
extern "C" {
    pub fn OSRConvertToOtherProjection(
        hSRS: OGRSpatialReferenceH,
        pszTargetProjection: *const ::std::os::raw::c_char,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> OGRSpatialReferenceH;
}
extern "C" {
    pub fn OSRGetName(hSRS: OGRSpatialReferenceH) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OSRSetAttrValue(
        hSRS: OGRSpatialReferenceH,
        pszNodePath: *const ::std::os::raw::c_char,
        pszNewNodeValue: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRGetAttrValue(
        hSRS: OGRSpatialReferenceH,
        pszName: *const ::std::os::raw::c_char,
        iChild: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OSRSetAngularUnits(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRGetAngularUnits(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn OSRSetLinearUnits(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetTargetLinearUnits(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetLinearUnitsAndUpdateParameters(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRGetLinearUnits(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn OSRGetTargetLinearUnits(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn OSRGetPrimeMeridian(
        arg1: OGRSpatialReferenceH,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn OSRIsGeographic(arg1: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRIsDerivedGeographic(arg1: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRIsLocal(arg1: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRIsProjected(arg1: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRIsCompound(arg1: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRIsGeocentric(arg1: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRIsVertical(arg1: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRIsSameGeogCS(
        arg1: OGRSpatialReferenceH,
        arg2: OGRSpatialReferenceH,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRIsSameVertCS(
        arg1: OGRSpatialReferenceH,
        arg2: OGRSpatialReferenceH,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRIsSame(
        arg1: OGRSpatialReferenceH,
        arg2: OGRSpatialReferenceH,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRIsSameEx(
        arg1: OGRSpatialReferenceH,
        arg2: OGRSpatialReferenceH,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRSetLocalCS(
        hSRS: OGRSpatialReferenceH,
        pszName: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetProjCS(
        hSRS: OGRSpatialReferenceH,
        pszName: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetGeocCS(
        hSRS: OGRSpatialReferenceH,
        pszName: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetWellKnownGeogCS(
        hSRS: OGRSpatialReferenceH,
        pszName: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetFromUserInput(
        hSRS: OGRSpatialReferenceH,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRCopyGeogCSFrom(hSRS: OGRSpatialReferenceH, hSrcSRS: OGRSpatialReferenceH) -> OGRErr;
}
extern "C" {
    pub fn OSRSetTOWGS84(
        hSRS: OGRSpatialReferenceH,
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRGetTOWGS84(
        hSRS: OGRSpatialReferenceH,
        arg1: *mut f64,
        arg2: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRAddGuessedTOWGS84(hSRS: OGRSpatialReferenceH) -> OGRErr;
}
extern "C" {
    pub fn OSRSetCompoundCS(
        hSRS: OGRSpatialReferenceH,
        pszName: *const ::std::os::raw::c_char,
        hHorizSRS: OGRSpatialReferenceH,
        hVertSRS: OGRSpatialReferenceH,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRPromoteTo3D(
        hSRS: OGRSpatialReferenceH,
        pszName: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetGeogCS(
        hSRS: OGRSpatialReferenceH,
        pszGeogName: *const ::std::os::raw::c_char,
        pszDatumName: *const ::std::os::raw::c_char,
        pszEllipsoidName: *const ::std::os::raw::c_char,
        dfSemiMajor: f64,
        dfInvFlattening: f64,
        pszPMName: *const ::std::os::raw::c_char,
        dfPMOffset: f64,
        pszUnits: *const ::std::os::raw::c_char,
        dfConvertToRadians: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetVertCS(
        hSRS: OGRSpatialReferenceH,
        pszVertCSName: *const ::std::os::raw::c_char,
        pszVertDatumName: *const ::std::os::raw::c_char,
        nVertDatumType: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRGetSemiMajor(arg1: OGRSpatialReferenceH, arg2: *mut OGRErr) -> f64;
}
extern "C" {
    pub fn OSRGetSemiMinor(arg1: OGRSpatialReferenceH, arg2: *mut OGRErr) -> f64;
}
extern "C" {
    pub fn OSRGetInvFlattening(arg1: OGRSpatialReferenceH, arg2: *mut OGRErr) -> f64;
}
extern "C" {
    pub fn OSRSetAuthority(
        hSRS: OGRSpatialReferenceH,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszAuthority: *const ::std::os::raw::c_char,
        nCode: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRGetAuthorityCode(
        hSRS: OGRSpatialReferenceH,
        pszTargetKey: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OSRGetAuthorityName(
        hSRS: OGRSpatialReferenceH,
        pszTargetKey: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OSRGetAreaOfUse(
        hSRS: OGRSpatialReferenceH,
        pdfWestLongitudeDeg: *mut f64,
        pdfSouthLatitudeDeg: *mut f64,
        pdfEastLongitudeDeg: *mut f64,
        pdfNorthLatitudeDeg: *mut f64,
        ppszAreaName: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRSetProjection(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetProjParm(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRGetProjParm(
        hSRS: OGRSpatialReferenceH,
        pszParmName: *const ::std::os::raw::c_char,
        dfDefault: f64,
        arg1: *mut OGRErr,
    ) -> f64;
}
extern "C" {
    pub fn OSRSetNormProjParm(
        arg1: OGRSpatialReferenceH,
        arg2: *const ::std::os::raw::c_char,
        arg3: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRGetNormProjParm(
        hSRS: OGRSpatialReferenceH,
        pszParmName: *const ::std::os::raw::c_char,
        dfDefault: f64,
        arg1: *mut OGRErr,
    ) -> f64;
}
extern "C" {
    pub fn OSRSetUTM(
        hSRS: OGRSpatialReferenceH,
        nZone: ::std::os::raw::c_int,
        bNorth: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRGetUTMZone(
        hSRS: OGRSpatialReferenceH,
        pbNorth: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRSetStatePlane(
        hSRS: OGRSpatialReferenceH,
        nZone: ::std::os::raw::c_int,
        bNAD83: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetStatePlaneWithUnits(
        hSRS: OGRSpatialReferenceH,
        nZone: ::std::os::raw::c_int,
        bNAD83: ::std::os::raw::c_int,
        pszOverrideUnitName: *const ::std::os::raw::c_char,
        dfOverrideUnit: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRAutoIdentifyEPSG(hSRS: OGRSpatialReferenceH) -> OGRErr;
}
extern "C" {
    pub fn OSRFindMatches(
        hSRS: OGRSpatialReferenceH,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pnEntries: *mut ::std::os::raw::c_int,
        ppanMatchConfidence: *mut *mut ::std::os::raw::c_int,
    ) -> *mut OGRSpatialReferenceH;
}
extern "C" {
    pub fn OSRFreeSRSArray(pahSRS: *mut OGRSpatialReferenceH);
}
extern "C" {
    pub fn OSREPSGTreatsAsLatLong(hSRS: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSREPSGTreatsAsNorthingEasting(hSRS: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRGetAxis(
        hSRS: OGRSpatialReferenceH,
        pszTargetKey: *const ::std::os::raw::c_char,
        iAxis: ::std::os::raw::c_int,
        peOrientation: *mut OGRAxisOrientation,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OSRGetAxesCount(hSRS: OGRSpatialReferenceH) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRSetAxes(
        hSRS: OGRSpatialReferenceH,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszXAxisName: *const ::std::os::raw::c_char,
        eXAxisOrientation: OGRAxisOrientation,
        pszYAxisName: *const ::std::os::raw::c_char,
        eYAxisOrientation: OGRAxisOrientation,
    ) -> OGRErr;
}
pub const OSRAxisMappingStrategy_OAMS_TRADITIONAL_GIS_ORDER: OSRAxisMappingStrategy = 0;
pub const OSRAxisMappingStrategy_OAMS_AUTHORITY_COMPLIANT: OSRAxisMappingStrategy = 1;
pub const OSRAxisMappingStrategy_OAMS_CUSTOM: OSRAxisMappingStrategy = 2;
pub type OSRAxisMappingStrategy = ::std::os::raw::c_uint;
extern "C" {
    pub fn OSRGetAxisMappingStrategy(hSRS: OGRSpatialReferenceH) -> OSRAxisMappingStrategy;
}
extern "C" {
    pub fn OSRSetAxisMappingStrategy(hSRS: OGRSpatialReferenceH, strategy: OSRAxisMappingStrategy);
}
extern "C" {
    pub fn OSRGetDataAxisToSRSAxisMapping(
        hSRS: OGRSpatialReferenceH,
        pnCount: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_int;
}
extern "C" {
    pub fn OSRSetDataAxisToSRSAxisMapping(
        hSRS: OGRSpatialReferenceH,
        nMappingSize: ::std::os::raw::c_int,
        panMapping: *const ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetACEA(
        hSRS: OGRSpatialReferenceH,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetAE(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetBonne(
        hSRS: OGRSpatialReferenceH,
        dfStandardParallel: f64,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetCEA(
        hSRS: OGRSpatialReferenceH,
        dfStdP1: f64,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetCS(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetEC(
        hSRS: OGRSpatialReferenceH,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetEckert(
        hSRS: OGRSpatialReferenceH,
        nVariation: ::std::os::raw::c_int,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetEckertIV(
        hSRS: OGRSpatialReferenceH,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetEckertVI(
        hSRS: OGRSpatialReferenceH,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetEquirectangular(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetEquirectangular2(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfPseudoStdParallel1: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetGS(
        hSRS: OGRSpatialReferenceH,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetGH(
        hSRS: OGRSpatialReferenceH,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetIGH(hSRS: OGRSpatialReferenceH) -> OGRErr;
}
extern "C" {
    pub fn OSRSetGEOS(
        hSRS: OGRSpatialReferenceH,
        dfCentralMeridian: f64,
        dfSatelliteHeight: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetGaussSchreiberTMercator(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetGnomonic(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetHOM(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfRectToSkew: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetHOMAC(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfRectToSkew: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetHOM2PNO(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfLat1: f64,
        dfLong1: f64,
        dfLat2: f64,
        dfLong2: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetIWMPolyconic(
        hSRS: OGRSpatialReferenceH,
        dfLat1: f64,
        dfLat2: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetKrovak(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfPseudoStdParallelLat: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetLAEA(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetLCC(
        hSRS: OGRSpatialReferenceH,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetLCC1SP(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetLCCB(
        hSRS: OGRSpatialReferenceH,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetMC(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetMercator(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetMercator2SP(
        hSRS: OGRSpatialReferenceH,
        dfStdP1: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetMollweide(
        hSRS: OGRSpatialReferenceH,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetNZMG(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetOS(
        hSRS: OGRSpatialReferenceH,
        dfOriginLat: f64,
        dfCMeridian: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetOrthographic(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetPolyconic(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetPS(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetRobinson(
        hSRS: OGRSpatialReferenceH,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetSinusoidal(
        hSRS: OGRSpatialReferenceH,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetStereographic(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetSOC(
        hSRS: OGRSpatialReferenceH,
        dfLatitudeOfOrigin: f64,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetTM(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetTMVariant(
        hSRS: OGRSpatialReferenceH,
        pszVariantName: *const ::std::os::raw::c_char,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetTMG(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetTMSO(
        hSRS: OGRSpatialReferenceH,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetTPED(
        hSRS: OGRSpatialReferenceH,
        dfLat1: f64,
        dfLong1: f64,
        dfLat2: f64,
        dfLong2: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetVDG(
        hSRS: OGRSpatialReferenceH,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetWagner(
        hSRS: OGRSpatialReferenceH,
        nVariation: ::std::os::raw::c_int,
        dfCenterLat: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetQSC(hSRS: OGRSpatialReferenceH, dfCenterLat: f64, dfCenterLong: f64) -> OGRErr;
}
extern "C" {
    pub fn OSRSetSCH(
        hSRS: OGRSpatialReferenceH,
        dfPegLat: f64,
        dfPegLong: f64,
        dfPegHeading: f64,
        dfPegHgt: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRSetVerticalPerspective(
        hSRS: OGRSpatialReferenceH,
        dfTopoOriginLat: f64,
        dfTopoOriginLon: f64,
        dfTopoOriginHeight: f64,
        dfViewPointHeight: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    pub fn OSRCalcInvFlattening(dfSemiMajor: f64, dfSemiMinor: f64) -> f64;
}
extern "C" {
    pub fn OSRCalcSemiMinorFromInvFlattening(dfSemiMajor: f64, dfInvFlattening: f64) -> f64;
}
extern "C" {
    pub fn OSRCleanup();
}
pub const OSRCRSType_OSR_CRS_TYPE_GEOGRAPHIC_2D: OSRCRSType = 0;
pub const OSRCRSType_OSR_CRS_TYPE_GEOGRAPHIC_3D: OSRCRSType = 1;
pub const OSRCRSType_OSR_CRS_TYPE_GEOCENTRIC: OSRCRSType = 2;
pub const OSRCRSType_OSR_CRS_TYPE_PROJECTED: OSRCRSType = 3;
pub const OSRCRSType_OSR_CRS_TYPE_VERTICAL: OSRCRSType = 4;
pub const OSRCRSType_OSR_CRS_TYPE_COMPOUND: OSRCRSType = 5;
pub const OSRCRSType_OSR_CRS_TYPE_OTHER: OSRCRSType = 6;
pub type OSRCRSType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSRCRSInfo {
    pub pszAuthName: *mut ::std::os::raw::c_char,
    pub pszCode: *mut ::std::os::raw::c_char,
    pub pszName: *mut ::std::os::raw::c_char,
    pub eType: OSRCRSType,
    pub bDeprecated: ::std::os::raw::c_int,
    pub bBboxValid: ::std::os::raw::c_int,
    pub dfWestLongitudeDeg: f64,
    pub dfSouthLatitudeDeg: f64,
    pub dfEastLongitudeDeg: f64,
    pub dfNorthLatitudeDeg: f64,
    pub pszAreaName: *mut ::std::os::raw::c_char,
    pub pszProjectionMethod: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_OSRCRSInfo() {
    assert_eq!(
        ::std::mem::size_of::<OSRCRSInfo>(),
        88usize,
        concat!("Size of: ", stringify!(OSRCRSInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<OSRCRSInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(OSRCRSInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).pszAuthName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(pszAuthName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).pszCode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(pszCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).pszName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(pszName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).eType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(eType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).bDeprecated as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(bDeprecated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).bBboxValid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(bBboxValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).dfWestLongitudeDeg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(dfWestLongitudeDeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).dfSouthLatitudeDeg as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(dfSouthLatitudeDeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).dfEastLongitudeDeg as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(dfEastLongitudeDeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).dfNorthLatitudeDeg as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(dfNorthLatitudeDeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).pszAreaName as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(pszAreaName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OSRCRSInfo>())).pszProjectionMethod as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(OSRCRSInfo),
            "::",
            stringify!(pszProjectionMethod)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSRCRSListParameters {
    _unused: [u8; 0],
}
extern "C" {
    pub fn OSRGetCRSInfoListFromDatabase(
        pszAuthName: *const ::std::os::raw::c_char,
        params: *const OSRCRSListParameters,
        pnOutResultCount: *mut ::std::os::raw::c_int,
    ) -> *mut *mut OSRCRSInfo;
}
extern "C" {
    pub fn OSRDestroyCRSInfoList(list: *mut *mut OSRCRSInfo);
}
extern "C" {
    pub fn OCTNewCoordinateTransformation(
        hSourceSRS: OGRSpatialReferenceH,
        hTargetSRS: OGRSpatialReferenceH,
    ) -> OGRCoordinateTransformationH;
}
pub type OGRCoordinateTransformationOptionsH = *mut OGRCoordinateTransformationOptions;
extern "C" {
    pub fn OCTNewCoordinateTransformationOptions() -> OGRCoordinateTransformationOptionsH;
}
extern "C" {
    pub fn OCTCoordinateTransformationOptionsSetOperation(
        hOptions: OGRCoordinateTransformationOptionsH,
        pszCO: *const ::std::os::raw::c_char,
        bReverseCO: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OCTCoordinateTransformationOptionsSetAreaOfInterest(
        hOptions: OGRCoordinateTransformationOptionsH,
        dfWestLongitudeDeg: f64,
        dfSouthLatitudeDeg: f64,
        dfEastLongitudeDeg: f64,
        dfNorthLatitudeDeg: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OCTDestroyCoordinateTransformationOptions(arg1: OGRCoordinateTransformationOptionsH);
}
extern "C" {
    pub fn OCTNewCoordinateTransformationEx(
        hSourceSRS: OGRSpatialReferenceH,
        hTargetSRS: OGRSpatialReferenceH,
        hOptions: OGRCoordinateTransformationOptionsH,
    ) -> OGRCoordinateTransformationH;
}
extern "C" {
    pub fn OCTDestroyCoordinateTransformation(arg1: OGRCoordinateTransformationH);
}
extern "C" {
    pub fn OCTTransform(
        hCT: OGRCoordinateTransformationH,
        nCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OCTTransformEx(
        hCT: OGRCoordinateTransformationH,
        nCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        pabSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OCTTransform4D(
        hCT: OGRCoordinateTransformationH,
        nCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        t: *mut f64,
        pabSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type JSONObjectH = *mut ::std::os::raw::c_void;
#[repr(C)]
pub struct CPLJSONObject {
    pub m_poJsonObject: JSONObjectH,
    pub m_osKey: std_string,
}
pub const CPLJSONObject_Type_Unknown: CPLJSONObject_Type = 0;
pub const CPLJSONObject_Type_Null: CPLJSONObject_Type = 1;
pub const CPLJSONObject_Type_Object: CPLJSONObject_Type = 2;
pub const CPLJSONObject_Type_Array: CPLJSONObject_Type = 3;
pub const CPLJSONObject_Type_Boolean: CPLJSONObject_Type = 4;
pub const CPLJSONObject_Type_String: CPLJSONObject_Type = 5;
pub const CPLJSONObject_Type_Integer: CPLJSONObject_Type = 6;
pub const CPLJSONObject_Type_Long: CPLJSONObject_Type = 7;
pub const CPLJSONObject_Type_Double: CPLJSONObject_Type = 8;
pub type CPLJSONObject_Type = ::std::os::raw::c_int;
pub const CPLJSONObject_PrettyFormat_Plain: CPLJSONObject_PrettyFormat = 0;
pub const CPLJSONObject_PrettyFormat_Spaced: CPLJSONObject_PrettyFormat = 1;
pub const CPLJSONObject_PrettyFormat_Pretty: CPLJSONObject_PrettyFormat = 2;
pub type CPLJSONObject_PrettyFormat = ::std::os::raw::c_int;
#[test]
fn bindgen_test_layout_CPLJSONObject() {
    assert_eq!(
        ::std::mem::size_of::<CPLJSONObject>(),
        40usize,
        concat!("Size of: ", stringify!(CPLJSONObject))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLJSONObject>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLJSONObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLJSONObject>())).m_poJsonObject as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLJSONObject),
            "::",
            stringify!(m_poJsonObject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLJSONObject>())).m_osKey as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLJSONObject),
            "::",
            stringify!(m_osKey)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3AddERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_"]
    pub fn CPLJSONObject_Add(
        this: *mut CPLJSONObject,
        osName: *const std_string,
        osValue: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3AddERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc"]
    pub fn CPLJSONObject_Add1(
        this: *mut CPLJSONObject,
        osName: *const std_string,
        pszValue: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3AddERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEd"]
    pub fn CPLJSONObject_Add2(this: *mut CPLJSONObject, osName: *const std_string, dfValue: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3AddERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"]
    pub fn CPLJSONObject_Add3(
        this: *mut CPLJSONObject,
        osName: *const std_string,
        nValue: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3AddERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEx"]
    pub fn CPLJSONObject_Add4(this: *mut CPLJSONObject, osName: *const std_string, nValue: GInt64);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3AddERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK12CPLJSONArray"]
    pub fn CPLJSONObject_Add5(
        this: *mut CPLJSONObject,
        osName: *const std_string,
        oValue: *const CPLJSONArray,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3AddERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS_"]
    pub fn CPLJSONObject_Add6(
        this: *mut CPLJSONObject,
        osName: *const std_string,
        oValue: *const CPLJSONObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject14AddNoSplitNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS_"]
    pub fn CPLJSONObject_AddNoSplitName(
        this: *mut CPLJSONObject,
        osName: *const std_string,
        oValue: *const CPLJSONObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3AddERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
    pub fn CPLJSONObject_Add7(this: *mut CPLJSONObject, osName: *const std_string, bValue: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject7AddNullERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONObject_AddNull(this: *mut CPLJSONObject, osName: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3SetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_"]
    pub fn CPLJSONObject_Set(
        this: *mut CPLJSONObject,
        osName: *const std_string,
        osValue: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3SetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc"]
    pub fn CPLJSONObject_Set1(
        this: *mut CPLJSONObject,
        osName: *const std_string,
        pszValue: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3SetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEd"]
    pub fn CPLJSONObject_Set2(this: *mut CPLJSONObject, osName: *const std_string, dfValue: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3SetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"]
    pub fn CPLJSONObject_Set3(
        this: *mut CPLJSONObject,
        osName: *const std_string,
        nValue: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3SetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEx"]
    pub fn CPLJSONObject_Set4(this: *mut CPLJSONObject, osName: *const std_string, nValue: GInt64);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject3SetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
    pub fn CPLJSONObject_Set5(this: *mut CPLJSONObject, osName: *const std_string, bValue: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject7SetNullERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONObject_SetNull(this: *mut CPLJSONObject, osName: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject9GetStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_"]
    pub fn CPLJSONObject_GetString(
        this: *const CPLJSONObject,
        osName: *const std_string,
        osDefault: *const std_string,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject9GetDoubleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEd"]
    pub fn CPLJSONObject_GetDouble(
        this: *const CPLJSONObject,
        osName: *const std_string,
        dfDefault: f64,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject10GetIntegerERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"]
    pub fn CPLJSONObject_GetInteger(
        this: *const CPLJSONObject,
        osName: *const std_string,
        nDefault: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject7GetLongERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEx"]
    pub fn CPLJSONObject_GetLong(
        this: *const CPLJSONObject,
        osName: *const std_string,
        nDefault: GInt64,
    ) -> GInt64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject7GetBoolERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
    pub fn CPLJSONObject_GetBool(
        this: *const CPLJSONObject,
        osName: *const std_string,
        bDefault: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject8ToStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONObject_ToString(
        this: *const CPLJSONObject,
        osDefault: *const std_string,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject8ToDoubleEd"]
    pub fn CPLJSONObject_ToDouble(this: *const CPLJSONObject, dfDefault: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject9ToIntegerEi"]
    pub fn CPLJSONObject_ToInteger(
        this: *const CPLJSONObject,
        nDefault: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject6ToLongEx"]
    pub fn CPLJSONObject_ToLong(this: *const CPLJSONObject, nDefault: GInt64) -> GInt64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject6ToBoolEb"]
    pub fn CPLJSONObject_ToBool(this: *const CPLJSONObject, bDefault: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject7ToArrayEv"]
    pub fn CPLJSONObject_ToArray(this: *const CPLJSONObject) -> CPLJSONArray;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject6FormatB5cxx11ENS_12PrettyFormatE"]
    pub fn CPLJSONObject_Format(
        this: *const CPLJSONObject,
        eFormat: CPLJSONObject_PrettyFormat,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject6DeleteERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONObject_Delete(this: *mut CPLJSONObject, osName: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject8GetArrayERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONObject_GetArray(
        this: *const CPLJSONObject,
        osName: *const std_string,
    ) -> CPLJSONArray;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject6GetObjERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONObject_GetObj(
        this: *const CPLJSONObject,
        osName: *const std_string,
    ) -> CPLJSONObject;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject7GetTypeEv"]
    pub fn CPLJSONObject_GetType(this: *const CPLJSONObject) -> CPLJSONObject_Type;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject11GetChildrenEv"]
    pub fn CPLJSONObject_GetChildren(this: *const CPLJSONObject) -> std_vector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject7IsValidEv"]
    pub fn CPLJSONObject_IsValid(this: *const CPLJSONObject) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObject6DeinitEv"]
    pub fn CPLJSONObject_Deinit(this: *mut CPLJSONObject);
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLJSONObject15GetObjectByPathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_"]
    pub fn CPLJSONObject_GetObjectByPath(
        this: *const CPLJSONObject,
        osPath: *const std_string,
        osName: *mut std_string,
    ) -> CPLJSONObject;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObjectC1Ev"]
    pub fn CPLJSONObject_CPLJSONObject(this: *mut CPLJSONObject);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObjectC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS_"]
    pub fn CPLJSONObject_CPLJSONObject1(
        this: *mut CPLJSONObject,
        osName: *const std_string,
        oParent: *const CPLJSONObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObjectC1ERKS_"]
    pub fn CPLJSONObject_CPLJSONObject2(this: *mut CPLJSONObject, other: *const CPLJSONObject);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLJSONObjectD1Ev"]
    pub fn CPLJSONObject_CPLJSONObject_destructor(this: *mut CPLJSONObject);
}
impl CPLJSONObject {
    #[inline]
    pub unsafe fn Add(&mut self, osName: *const std_string, osValue: *const std_string) {
        CPLJSONObject_Add(self, osName, osValue)
    }
    #[inline]
    pub unsafe fn Add1(
        &mut self,
        osName: *const std_string,
        pszValue: *const ::std::os::raw::c_char,
    ) {
        CPLJSONObject_Add1(self, osName, pszValue)
    }
    #[inline]
    pub unsafe fn Add2(&mut self, osName: *const std_string, dfValue: f64) {
        CPLJSONObject_Add2(self, osName, dfValue)
    }
    #[inline]
    pub unsafe fn Add3(&mut self, osName: *const std_string, nValue: ::std::os::raw::c_int) {
        CPLJSONObject_Add3(self, osName, nValue)
    }
    #[inline]
    pub unsafe fn Add4(&mut self, osName: *const std_string, nValue: GInt64) {
        CPLJSONObject_Add4(self, osName, nValue)
    }
    #[inline]
    pub unsafe fn Add5(&mut self, osName: *const std_string, oValue: *const CPLJSONArray) {
        CPLJSONObject_Add5(self, osName, oValue)
    }
    #[inline]
    pub unsafe fn Add6(&mut self, osName: *const std_string, oValue: *const CPLJSONObject) {
        CPLJSONObject_Add6(self, osName, oValue)
    }
    #[inline]
    pub unsafe fn AddNoSplitName(
        &mut self,
        osName: *const std_string,
        oValue: *const CPLJSONObject,
    ) {
        CPLJSONObject_AddNoSplitName(self, osName, oValue)
    }
    #[inline]
    pub unsafe fn Add7(&mut self, osName: *const std_string, bValue: bool) {
        CPLJSONObject_Add7(self, osName, bValue)
    }
    #[inline]
    pub unsafe fn AddNull(&mut self, osName: *const std_string) {
        CPLJSONObject_AddNull(self, osName)
    }
    #[inline]
    pub unsafe fn Set(&mut self, osName: *const std_string, osValue: *const std_string) {
        CPLJSONObject_Set(self, osName, osValue)
    }
    #[inline]
    pub unsafe fn Set1(
        &mut self,
        osName: *const std_string,
        pszValue: *const ::std::os::raw::c_char,
    ) {
        CPLJSONObject_Set1(self, osName, pszValue)
    }
    #[inline]
    pub unsafe fn Set2(&mut self, osName: *const std_string, dfValue: f64) {
        CPLJSONObject_Set2(self, osName, dfValue)
    }
    #[inline]
    pub unsafe fn Set3(&mut self, osName: *const std_string, nValue: ::std::os::raw::c_int) {
        CPLJSONObject_Set3(self, osName, nValue)
    }
    #[inline]
    pub unsafe fn Set4(&mut self, osName: *const std_string, nValue: GInt64) {
        CPLJSONObject_Set4(self, osName, nValue)
    }
    #[inline]
    pub unsafe fn Set5(&mut self, osName: *const std_string, bValue: bool) {
        CPLJSONObject_Set5(self, osName, bValue)
    }
    #[inline]
    pub unsafe fn SetNull(&mut self, osName: *const std_string) {
        CPLJSONObject_SetNull(self, osName)
    }
    #[inline]
    pub unsafe fn GetString(
        &self,
        osName: *const std_string,
        osDefault: *const std_string,
    ) -> std_string {
        CPLJSONObject_GetString(self, osName, osDefault)
    }
    #[inline]
    pub unsafe fn GetDouble(&self, osName: *const std_string, dfDefault: f64) -> f64 {
        CPLJSONObject_GetDouble(self, osName, dfDefault)
    }
    #[inline]
    pub unsafe fn GetInteger(
        &self,
        osName: *const std_string,
        nDefault: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        CPLJSONObject_GetInteger(self, osName, nDefault)
    }
    #[inline]
    pub unsafe fn GetLong(&self, osName: *const std_string, nDefault: GInt64) -> GInt64 {
        CPLJSONObject_GetLong(self, osName, nDefault)
    }
    #[inline]
    pub unsafe fn GetBool(&self, osName: *const std_string, bDefault: bool) -> bool {
        CPLJSONObject_GetBool(self, osName, bDefault)
    }
    #[inline]
    pub unsafe fn ToString(&self, osDefault: *const std_string) -> std_string {
        CPLJSONObject_ToString(self, osDefault)
    }
    #[inline]
    pub unsafe fn ToDouble(&self, dfDefault: f64) -> f64 {
        CPLJSONObject_ToDouble(self, dfDefault)
    }
    #[inline]
    pub unsafe fn ToInteger(&self, nDefault: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        CPLJSONObject_ToInteger(self, nDefault)
    }
    #[inline]
    pub unsafe fn ToLong(&self, nDefault: GInt64) -> GInt64 {
        CPLJSONObject_ToLong(self, nDefault)
    }
    #[inline]
    pub unsafe fn ToBool(&self, bDefault: bool) -> bool {
        CPLJSONObject_ToBool(self, bDefault)
    }
    #[inline]
    pub unsafe fn ToArray(&self) -> CPLJSONArray {
        CPLJSONObject_ToArray(self)
    }
    #[inline]
    pub unsafe fn Format(&self, eFormat: CPLJSONObject_PrettyFormat) -> std_string {
        CPLJSONObject_Format(self, eFormat)
    }
    #[inline]
    pub unsafe fn Delete(&mut self, osName: *const std_string) {
        CPLJSONObject_Delete(self, osName)
    }
    #[inline]
    pub unsafe fn GetArray(&self, osName: *const std_string) -> CPLJSONArray {
        CPLJSONObject_GetArray(self, osName)
    }
    #[inline]
    pub unsafe fn GetObj(&self, osName: *const std_string) -> CPLJSONObject {
        CPLJSONObject_GetObj(self, osName)
    }
    #[inline]
    pub unsafe fn GetType(&self) -> CPLJSONObject_Type {
        CPLJSONObject_GetType(self)
    }
    #[inline]
    pub unsafe fn GetChildren(&self) -> std_vector {
        CPLJSONObject_GetChildren(self)
    }
    #[inline]
    pub unsafe fn IsValid(&self) -> bool {
        CPLJSONObject_IsValid(self)
    }
    #[inline]
    pub unsafe fn Deinit(&mut self) {
        CPLJSONObject_Deinit(self)
    }
    #[inline]
    pub unsafe fn GetObjectByPath(
        &self,
        osPath: *const std_string,
        osName: *mut std_string,
    ) -> CPLJSONObject {
        CPLJSONObject_GetObjectByPath(self, osPath, osName)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLJSONObject_CPLJSONObject(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(osName: *const std_string, oParent: *const CPLJSONObject) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLJSONObject_CPLJSONObject1(__bindgen_tmp.as_mut_ptr(), osName, oParent);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(other: *const CPLJSONObject) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLJSONObject_CPLJSONObject2(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        CPLJSONObject_CPLJSONObject_destructor(self)
    }
}
#[repr(C)]
pub struct CPLJSONArray {
    pub _base: CPLJSONObject,
}
#[repr(C)]
pub struct CPLJSONArray_ConstIterator {
    pub m_oSelf: *const CPLJSONArray,
    pub m_nIdx: ::std::os::raw::c_int,
    pub m_oObj: CPLJSONObject,
}
#[test]
fn bindgen_test_layout_CPLJSONArray_ConstIterator() {
    assert_eq!(
        ::std::mem::size_of::<CPLJSONArray_ConstIterator>(),
        56usize,
        concat!("Size of: ", stringify!(CPLJSONArray_ConstIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLJSONArray_ConstIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLJSONArray_ConstIterator))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CPLJSONArray_ConstIterator>())).m_oSelf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLJSONArray_ConstIterator),
            "::",
            stringify!(m_oSelf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CPLJSONArray_ConstIterator>())).m_nIdx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLJSONArray_ConstIterator),
            "::",
            stringify!(m_nIdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CPLJSONArray_ConstIterator>())).m_oObj as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLJSONArray_ConstIterator),
            "::",
            stringify!(m_oObj)
        )
    );
}
#[test]
fn bindgen_test_layout_CPLJSONArray() {
    assert_eq!(
        ::std::mem::size_of::<CPLJSONArray>(),
        40usize,
        concat!("Size of: ", stringify!(CPLJSONArray))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLJSONArray>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLJSONArray))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK12CPLJSONArray4SizeEv"]
    pub fn CPLJSONArray_Size(this: *const CPLJSONArray) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN12CPLJSONArray3AddERK13CPLJSONObject"]
    pub fn CPLJSONArray_Add(this: *mut CPLJSONArray, oValue: *const CPLJSONObject);
}
extern "C" {
    #[link_name = "\u{1}_ZN12CPLJSONArray3AddERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONArray_Add1(this: *mut CPLJSONArray, osValue: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZN12CPLJSONArray3AddEPKc"]
    pub fn CPLJSONArray_Add2(this: *mut CPLJSONArray, pszValue: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN12CPLJSONArray3AddEd"]
    pub fn CPLJSONArray_Add3(this: *mut CPLJSONArray, dfValue: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN12CPLJSONArray3AddEi"]
    pub fn CPLJSONArray_Add4(this: *mut CPLJSONArray, nValue: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN12CPLJSONArray3AddEx"]
    pub fn CPLJSONArray_Add5(this: *mut CPLJSONArray, nValue: GInt64);
}
extern "C" {
    #[link_name = "\u{1}_ZN12CPLJSONArray3AddEb"]
    pub fn CPLJSONArray_Add6(this: *mut CPLJSONArray, bValue: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN12CPLJSONArrayC1Ev"]
    pub fn CPLJSONArray_CPLJSONArray(this: *mut CPLJSONArray);
}
extern "C" {
    #[link_name = "\u{1}_ZN12CPLJSONArrayC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONArray_CPLJSONArray1(this: *mut CPLJSONArray, osName: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZN12CPLJSONArrayC1ERK13CPLJSONObject"]
    pub fn CPLJSONArray_CPLJSONArray2(this: *mut CPLJSONArray, other: *const CPLJSONObject);
}
impl CPLJSONArray {
    #[inline]
    pub unsafe fn Size(&self) -> ::std::os::raw::c_int {
        CPLJSONArray_Size(self)
    }
    #[inline]
    pub unsafe fn Add(&mut self, oValue: *const CPLJSONObject) {
        CPLJSONArray_Add(self, oValue)
    }
    #[inline]
    pub unsafe fn Add1(&mut self, osValue: *const std_string) {
        CPLJSONArray_Add1(self, osValue)
    }
    #[inline]
    pub unsafe fn Add2(&mut self, pszValue: *const ::std::os::raw::c_char) {
        CPLJSONArray_Add2(self, pszValue)
    }
    #[inline]
    pub unsafe fn Add3(&mut self, dfValue: f64) {
        CPLJSONArray_Add3(self, dfValue)
    }
    #[inline]
    pub unsafe fn Add4(&mut self, nValue: ::std::os::raw::c_int) {
        CPLJSONArray_Add4(self, nValue)
    }
    #[inline]
    pub unsafe fn Add5(&mut self, nValue: GInt64) {
        CPLJSONArray_Add5(self, nValue)
    }
    #[inline]
    pub unsafe fn Add6(&mut self, bValue: bool) {
        CPLJSONArray_Add6(self, bValue)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLJSONArray_CPLJSONArray(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(osName: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLJSONArray_CPLJSONArray1(__bindgen_tmp.as_mut_ptr(), osName);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(other: *const CPLJSONObject) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLJSONArray_CPLJSONArray2(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct CPLJSONDocument {
    pub m_poRootJsonObject: JSONObjectH,
}
#[test]
fn bindgen_test_layout_CPLJSONDocument() {
    assert_eq!(
        ::std::mem::size_of::<CPLJSONDocument>(),
        8usize,
        concat!("Size of: ", stringify!(CPLJSONDocument))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLJSONDocument>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLJSONDocument))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CPLJSONDocument>())).m_poRootJsonObject as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLJSONDocument),
            "::",
            stringify!(m_poRootJsonObject)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15CPLJSONDocument4SaveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONDocument_Save(this: *const CPLJSONDocument, osPath: *const std_string) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15CPLJSONDocument12SaveAsStringB5cxx11Ev"]
    pub fn CPLJSONDocument_SaveAsString(this: *const CPLJSONDocument) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZN15CPLJSONDocument7GetRootEv"]
    pub fn CPLJSONDocument_GetRoot(this: *mut CPLJSONDocument) -> CPLJSONObject;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15CPLJSONDocument7GetRootEv"]
    pub fn CPLJSONDocument_GetRoot1(this: *const CPLJSONDocument) -> CPLJSONObject;
}
extern "C" {
    #[link_name = "\u{1}_ZN15CPLJSONDocument4LoadERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONDocument_Load(this: *mut CPLJSONDocument, osPath: *const std_string) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15CPLJSONDocument10LoadMemoryERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLJSONDocument_LoadMemory(this: *mut CPLJSONDocument, osStr: *const std_string)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15CPLJSONDocument10LoadMemoryEPKhi"]
    pub fn CPLJSONDocument_LoadMemory1(
        this: *mut CPLJSONDocument,
        pabyData: *const GByte,
        nLength: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15CPLJSONDocument10LoadChunksERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmPFidPKcPvESA_"]
    pub fn CPLJSONDocument_LoadChunks(
        this: *mut CPLJSONDocument,
        osPath: *const std_string,
        nChunkSize: size_t,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15CPLJSONDocument7LoadUrlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKPKcPFidS9_PvESC_"]
    pub fn CPLJSONDocument_LoadUrl(
        this: *mut CPLJSONDocument,
        osUrl: *const std_string,
        papszOptions: *const *const ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15CPLJSONDocumentC1Ev"]
    pub fn CPLJSONDocument_CPLJSONDocument(this: *mut CPLJSONDocument);
}
extern "C" {
    #[link_name = "\u{1}_ZN15CPLJSONDocumentC1ERKS_"]
    pub fn CPLJSONDocument_CPLJSONDocument1(
        this: *mut CPLJSONDocument,
        other: *const CPLJSONDocument,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15CPLJSONDocumentD1Ev"]
    pub fn CPLJSONDocument_CPLJSONDocument_destructor(this: *mut CPLJSONDocument);
}
impl CPLJSONDocument {
    #[inline]
    pub unsafe fn Save(&self, osPath: *const std_string) -> bool {
        CPLJSONDocument_Save(self, osPath)
    }
    #[inline]
    pub unsafe fn SaveAsString(&self) -> std_string {
        CPLJSONDocument_SaveAsString(self)
    }
    #[inline]
    pub unsafe fn GetRoot(&mut self) -> CPLJSONObject {
        CPLJSONDocument_GetRoot(self)
    }
    #[inline]
    pub unsafe fn GetRoot1(&self) -> CPLJSONObject {
        CPLJSONDocument_GetRoot1(self)
    }
    #[inline]
    pub unsafe fn Load(&mut self, osPath: *const std_string) -> bool {
        CPLJSONDocument_Load(self, osPath)
    }
    #[inline]
    pub unsafe fn LoadMemory(&mut self, osStr: *const std_string) -> bool {
        CPLJSONDocument_LoadMemory(self, osStr)
    }
    #[inline]
    pub unsafe fn LoadMemory1(
        &mut self,
        pabyData: *const GByte,
        nLength: ::std::os::raw::c_int,
    ) -> bool {
        CPLJSONDocument_LoadMemory1(self, pabyData, nLength)
    }
    #[inline]
    pub unsafe fn LoadChunks(
        &mut self,
        osPath: *const std_string,
        nChunkSize: size_t,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> bool {
        CPLJSONDocument_LoadChunks(self, osPath, nChunkSize, pfnProgress, pProgressArg)
    }
    #[inline]
    pub unsafe fn LoadUrl(
        &mut self,
        osUrl: *const std_string,
        papszOptions: *const *const ::std::os::raw::c_char,
        pfnProgress: GDALProgressFunc,
        pProgressArg: *mut ::std::os::raw::c_void,
    ) -> bool {
        CPLJSONDocument_LoadUrl(self, osUrl, papszOptions, pfnProgress, pProgressArg)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLJSONDocument_CPLJSONDocument(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const CPLJSONDocument) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLJSONDocument_CPLJSONDocument1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        CPLJSONDocument_CPLJSONDocument_destructor(self)
    }
}
extern "C" {
    pub fn CSLAddString(
        papszStrList: *mut *mut ::std::os::raw::c_char,
        pszNewString: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLAddStringMayFail(
        papszStrList: *mut *mut ::std::os::raw::c_char,
        pszNewString: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLCount(papszStrList: CSLConstList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CSLGetField(
        arg1: CSLConstList,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLDestroy(papszStrList: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn CSLDuplicate(papszStrList: CSLConstList) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLMerge(
        papszOrig: *mut *mut ::std::os::raw::c_char,
        papszOverride: CSLConstList,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLTokenizeString(
        pszString: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLTokenizeStringComplex(
        pszString: *const ::std::os::raw::c_char,
        pszDelimiter: *const ::std::os::raw::c_char,
        bHonourStrings: ::std::os::raw::c_int,
        bAllowEmptyTokens: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLTokenizeString2(
        pszString: *const ::std::os::raw::c_char,
        pszDelimiter: *const ::std::os::raw::c_char,
        nCSLTFlags: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLPrint(papszStrList: CSLConstList, fpOut: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CSLLoad(pszFname: *const ::std::os::raw::c_char) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLLoad2(
        pszFname: *const ::std::os::raw::c_char,
        nMaxLines: ::std::os::raw::c_int,
        nMaxCols: ::std::os::raw::c_int,
        papszOptions: CSLConstList,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLSave(
        papszStrList: CSLConstList,
        pszFname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CSLInsertStrings(
        papszStrList: *mut *mut ::std::os::raw::c_char,
        nInsertAtLineNo: ::std::os::raw::c_int,
        papszNewLines: CSLConstList,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLInsertString(
        papszStrList: *mut *mut ::std::os::raw::c_char,
        nInsertAtLineNo: ::std::os::raw::c_int,
        pszNewLine: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLRemoveStrings(
        papszStrList: *mut *mut ::std::os::raw::c_char,
        nFirstLineToDelete: ::std::os::raw::c_int,
        nNumToRemove: ::std::os::raw::c_int,
        ppapszRetStrings: *mut *mut *mut ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLFindString(
        papszList: CSLConstList,
        pszTarget: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CSLFindStringCaseSensitive(
        papszList: CSLConstList,
        pszTarget: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CSLPartialFindString(
        papszHaystack: CSLConstList,
        pszNeedle: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CSLFindName(
        papszStrList: CSLConstList,
        pszName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CSLFetchBoolean(
        papszStrList: CSLConstList,
        pszKey: *const ::std::os::raw::c_char,
        bDefault: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CSLTestBoolean(pszValue: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLTestBoolean(pszValue: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLTestBool(pszValue: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn CPLFetchBool(
        papszStrList: CSLConstList,
        pszKey: *const ::std::os::raw::c_char,
        bDefault: bool,
    ) -> bool;
}
extern "C" {
    pub fn CPLParseNameValue(
        pszNameValue: *const ::std::os::raw::c_char,
        ppszKey: *mut *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLFetchNameValue(
        papszStrList: CSLConstList,
        pszName: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLFetchNameValueDef(
        papszStrList: CSLConstList,
        pszName: *const ::std::os::raw::c_char,
        pszDefault: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLFetchNameValueMultiple(
        papszStrList: CSLConstList,
        pszName: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLAddNameValue(
        papszStrList: *mut *mut ::std::os::raw::c_char,
        pszName: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLSetNameValue(
        papszStrList: *mut *mut ::std::os::raw::c_char,
        pszName: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLSetNameValueSeparator(
        papszStrList: *mut *mut ::std::os::raw::c_char,
        pszSeparator: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn CSLParseCommandLine(
        pszCommandLine: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLEscapeString(
        pszString: *const ::std::os::raw::c_char,
        nLength: ::std::os::raw::c_int,
        nScheme: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLUnescapeString(
        pszString: *const ::std::os::raw::c_char,
        pnLength: *mut ::std::os::raw::c_int,
        nScheme: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLBinaryToHex(
        nBytes: ::std::os::raw::c_int,
        pabyData: *const GByte,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLHexToBinary(
        pszHex: *const ::std::os::raw::c_char,
        pnBytes: *mut ::std::os::raw::c_int,
    ) -> *mut GByte;
}
extern "C" {
    pub fn CPLBase64Encode(
        nBytes: ::std::os::raw::c_int,
        pabyData: *const GByte,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLBase64DecodeInPlace(pszBase64: *mut GByte) -> ::std::os::raw::c_int;
}
pub const CPLValueType_CPL_VALUE_STRING: CPLValueType = 0;
pub const CPLValueType_CPL_VALUE_REAL: CPLValueType = 1;
pub const CPLValueType_CPL_VALUE_INTEGER: CPLValueType = 2;
pub type CPLValueType = ::std::os::raw::c_uint;
extern "C" {
    pub fn CPLGetValueType(pszValue: *const ::std::os::raw::c_char) -> CPLValueType;
}
extern "C" {
    pub fn CPLStrlcpy(
        pszDest: *mut ::std::os::raw::c_char,
        pszSrc: *const ::std::os::raw::c_char,
        nDestSize: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn CPLStrlcat(
        pszDest: *mut ::std::os::raw::c_char,
        pszSrc: *const ::std::os::raw::c_char,
        nDestSize: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn CPLStrnlen(pszStr: *const ::std::os::raw::c_char, nMaxLen: size_t) -> size_t;
}
extern "C" {
    pub fn CPLvsnprintf(
        str_: *mut ::std::os::raw::c_char,
        size: size_t,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLsnprintf(
        str_: *mut ::std::os::raw::c_char,
        size: size_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLsprintf(
        str_: *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLprintf(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLsscanf(
        str_: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLSPrintf(fmt: *const ::std::os::raw::c_char, ...) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CSLAppendPrintf(
        papszStrList: *mut *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLVASPrintf(
        buf: *mut *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLEncodingCharSize(pszEncoding: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLClearRecodeWarningFlags();
}
extern "C" {
    pub fn CPLRecode(
        pszSource: *const ::std::os::raw::c_char,
        pszSrcEncoding: *const ::std::os::raw::c_char,
        pszDstEncoding: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLRecodeFromWChar(
        pwszSource: *const u32,
        pszSrcEncoding: *const ::std::os::raw::c_char,
        pszDstEncoding: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLRecodeToWChar(
        pszSource: *const ::std::os::raw::c_char,
        pszSrcEncoding: *const ::std::os::raw::c_char,
        pszDstEncoding: *const ::std::os::raw::c_char,
    ) -> *mut u32;
}
extern "C" {
    pub fn CPLIsUTF8(
        pabyData: *const ::std::os::raw::c_char,
        nLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLForceToASCII(
        pabyData: *const ::std::os::raw::c_char,
        nLen: ::std::os::raw::c_int,
        chReplacementChar: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CPLStrlenUTF8(pszUTF8Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CPLCanRecode(
        pszTestStr: *const ::std::os::raw::c_char,
        pszSrcEncoding: *const ::std::os::raw::c_char,
        pszDstEncoding: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct CPLString {
    pub _base: std_string,
}
#[test]
fn bindgen_test_layout_CPLString() {
    assert_eq!(
        ::std::mem::size_of::<CPLString>(),
        32usize,
        concat!("Size of: ", stringify!(CPLString))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLString>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLString))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString6PrintfEPKcz"]
    pub fn CPLString_Printf(
        this: *mut CPLString,
        pszFormat: *const ::std::os::raw::c_char,
        ...
    ) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString7vPrintfEPKcP13__va_list_tag"]
    pub fn CPLString_vPrintf(
        this: *mut CPLString,
        pszFormat: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString7FormatCEdPKc"]
    pub fn CPLString_FormatC(
        this: *mut CPLString,
        dfValue: f64,
        pszFormat: *const ::std::os::raw::c_char,
    ) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString4TrimEv"]
    pub fn CPLString_Trim(this: *mut CPLString) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString6RecodeEPKcS1_"]
    pub fn CPLString_Recode(
        this: *mut CPLString,
        pszSrcEncoding: *const ::std::os::raw::c_char,
        pszDstEncoding: *const ::std::os::raw::c_char,
    ) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString10replaceAllERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_"]
    pub fn CPLString_replaceAll(
        this: *mut CPLString,
        osBefore: *const std_string,
        osAfter: *const std_string,
    ) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString10replaceAllERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEc"]
    pub fn CPLString_replaceAll1(
        this: *mut CPLString,
        osBefore: *const std_string,
        chAfter: ::std::os::raw::c_char,
    ) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString10replaceAllEcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLString_replaceAll2(
        this: *mut CPLString,
        chBefore: ::std::os::raw::c_char,
        osAfter: *const std_string,
    ) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString10replaceAllEcc"]
    pub fn CPLString_replaceAll3(
        this: *mut CPLString,
        chBefore: ::std::os::raw::c_char,
        chAfter: ::std::os::raw::c_char,
    ) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9CPLString5ifindERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm"]
    pub fn CPLString_ifind(this: *const CPLString, str_: *const std_string, pos: size_t) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9CPLString5ifindEPKcm"]
    pub fn CPLString_ifind1(
        this: *const CPLString,
        s: *const ::std::os::raw::c_char,
        pos: size_t,
    ) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString7toupperEv"]
    pub fn CPLString_toupper(this: *mut CPLString) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZN9CPLString7tolowerEv"]
    pub fn CPLString_tolower(this: *mut CPLString) -> *mut CPLString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9CPLString8endsWithERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn CPLString_endsWith(this: *const CPLString, osStr: *const std_string) -> bool;
}
impl CPLString {
    #[inline]
    pub unsafe fn vPrintf(
        &mut self,
        pszFormat: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> *mut CPLString {
        CPLString_vPrintf(self, pszFormat, args)
    }
    #[inline]
    pub unsafe fn FormatC(
        &mut self,
        dfValue: f64,
        pszFormat: *const ::std::os::raw::c_char,
    ) -> *mut CPLString {
        CPLString_FormatC(self, dfValue, pszFormat)
    }
    #[inline]
    pub unsafe fn Trim(&mut self) -> *mut CPLString {
        CPLString_Trim(self)
    }
    #[inline]
    pub unsafe fn Recode(
        &mut self,
        pszSrcEncoding: *const ::std::os::raw::c_char,
        pszDstEncoding: *const ::std::os::raw::c_char,
    ) -> *mut CPLString {
        CPLString_Recode(self, pszSrcEncoding, pszDstEncoding)
    }
    #[inline]
    pub unsafe fn replaceAll(
        &mut self,
        osBefore: *const std_string,
        osAfter: *const std_string,
    ) -> *mut CPLString {
        CPLString_replaceAll(self, osBefore, osAfter)
    }
    #[inline]
    pub unsafe fn replaceAll1(
        &mut self,
        osBefore: *const std_string,
        chAfter: ::std::os::raw::c_char,
    ) -> *mut CPLString {
        CPLString_replaceAll1(self, osBefore, chAfter)
    }
    #[inline]
    pub unsafe fn replaceAll2(
        &mut self,
        chBefore: ::std::os::raw::c_char,
        osAfter: *const std_string,
    ) -> *mut CPLString {
        CPLString_replaceAll2(self, chBefore, osAfter)
    }
    #[inline]
    pub unsafe fn replaceAll3(
        &mut self,
        chBefore: ::std::os::raw::c_char,
        chAfter: ::std::os::raw::c_char,
    ) -> *mut CPLString {
        CPLString_replaceAll3(self, chBefore, chAfter)
    }
    #[inline]
    pub unsafe fn ifind(&self, str_: *const std_string, pos: size_t) -> size_t {
        CPLString_ifind(self, str_, pos)
    }
    #[inline]
    pub unsafe fn ifind1(&self, s: *const ::std::os::raw::c_char, pos: size_t) -> size_t {
        CPLString_ifind1(self, s, pos)
    }
    #[inline]
    pub unsafe fn toupper(&mut self) -> *mut CPLString {
        CPLString_toupper(self)
    }
    #[inline]
    pub unsafe fn tolower(&mut self) -> *mut CPLString {
        CPLString_tolower(self)
    }
    #[inline]
    pub unsafe fn endsWith(&self, osStr: *const std_string) -> bool {
        CPLString_endsWith(self, osStr)
    }
}
extern "C" {
    #[link_name = "\u{1}_Z10CPLOPrintfPKcz"]
    pub fn CPLOPrintf(pszFormat: *const ::std::os::raw::c_char, ...) -> CPLString;
}
extern "C" {
    #[link_name = "\u{1}_Z11CPLOvPrintfPKcP13__va_list_tag"]
    pub fn CPLOvPrintf(
        pszFormat: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> CPLString;
}
extern "C" {
    #[link_name = "\u{1}_Z22CPLQuotedSQLIdentifierPKc"]
    pub fn CPLQuotedSQLIdentifier(pszIdent: *const ::std::os::raw::c_char) -> CPLString;
}
extern "C" {
    #[link_name = "\u{1}_Z14CPLURLGetValuePKcS0_"]
    pub fn CPLURLGetValue(
        pszURL: *const ::std::os::raw::c_char,
        pszKey: *const ::std::os::raw::c_char,
    ) -> CPLString;
}
extern "C" {
    #[link_name = "\u{1}_Z12CPLURLAddKVPPKcS0_S0_"]
    pub fn CPLURLAddKVP(
        pszURL: *const ::std::os::raw::c_char,
        pszKey: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> CPLString;
}
#[repr(C)]
#[derive(Debug)]
pub struct CPLStringList {
    pub papszList: *mut *mut ::std::os::raw::c_char,
    pub nCount: ::std::os::raw::c_int,
    pub nAllocation: ::std::os::raw::c_int,
    pub bOwnList: bool,
    pub bIsSorted: bool,
}
#[test]
fn bindgen_test_layout_CPLStringList() {
    assert_eq!(
        ::std::mem::size_of::<CPLStringList>(),
        24usize,
        concat!("Size of: ", stringify!(CPLStringList))
    );
    assert_eq!(
        ::std::mem::align_of::<CPLStringList>(),
        8usize,
        concat!("Alignment of ", stringify!(CPLStringList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLStringList>())).papszList as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLStringList),
            "::",
            stringify!(papszList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLStringList>())).nCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLStringList),
            "::",
            stringify!(nCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLStringList>())).nAllocation as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLStringList),
            "::",
            stringify!(nAllocation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLStringList>())).bOwnList as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLStringList),
            "::",
            stringify!(bOwnList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CPLStringList>())).bIsSorted as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(CPLStringList),
            "::",
            stringify!(bIsSorted)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringList5ClearEv"]
    pub fn CPLStringList_Clear(this: *mut CPLStringList) -> *mut CPLStringList;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLStringList5CountEv"]
    pub fn CPLStringList_Count(this: *const CPLStringList) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringList9AddStringEPKc"]
    pub fn CPLStringList_AddString(
        this: *mut CPLStringList,
        pszNewString: *const ::std::os::raw::c_char,
    ) -> *mut CPLStringList;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringList17AddStringDirectlyEPc"]
    pub fn CPLStringList_AddStringDirectly(
        this: *mut CPLStringList,
        pszNewString: *mut ::std::os::raw::c_char,
    ) -> *mut CPLStringList;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringList20InsertStringDirectlyEiPc"]
    pub fn CPLStringList_InsertStringDirectly(
        this: *mut CPLStringList,
        nInsertAtLineNo: ::std::os::raw::c_int,
        pszNewLine: *mut ::std::os::raw::c_char,
    ) -> *mut CPLStringList;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLStringList8FindNameEPKc"]
    pub fn CPLStringList_FindName(
        this: *const CPLStringList,
        pszName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLStringList9FetchBoolEPKcb"]
    pub fn CPLStringList_FetchBool(
        this: *const CPLStringList,
        pszKey: *const ::std::os::raw::c_char,
        bDefault: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLStringList12FetchBooleanEPKci"]
    pub fn CPLStringList_FetchBoolean(
        this: *const CPLStringList,
        pszKey: *const ::std::os::raw::c_char,
        bDefault: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLStringList14FetchNameValueEPKc"]
    pub fn CPLStringList_FetchNameValue(
        this: *const CPLStringList,
        pszKey: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13CPLStringList17FetchNameValueDefEPKcS1_"]
    pub fn CPLStringList_FetchNameValueDef(
        this: *const CPLStringList,
        pszKey: *const ::std::os::raw::c_char,
        pszDefault: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringList12AddNameValueEPKcS1_"]
    pub fn CPLStringList_AddNameValue(
        this: *mut CPLStringList,
        pszKey: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> *mut CPLStringList;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringList12SetNameValueEPKcS1_"]
    pub fn CPLStringList_SetNameValue(
        this: *mut CPLStringList,
        pszKey: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> *mut CPLStringList;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringList6AssignEPPci"]
    pub fn CPLStringList_Assign(
        this: *mut CPLStringList,
        papszListIn: *mut *mut ::std::os::raw::c_char,
        bTakeOwnership: ::std::os::raw::c_int,
    ) -> *mut CPLStringList;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringList9StealListEv"]
    pub fn CPLStringList_StealList(this: *mut CPLStringList) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringList4SortEv"]
    pub fn CPLStringList_Sort(this: *mut CPLStringList) -> *mut CPLStringList;
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringListC1Ev"]
    pub fn CPLStringList_CPLStringList(this: *mut CPLStringList);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringListC1EPPci"]
    pub fn CPLStringList_CPLStringList1(
        this: *mut CPLStringList,
        papszList: *mut *mut ::std::os::raw::c_char,
        bTakeOwnership: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringListC1EPKPKc"]
    pub fn CPLStringList_CPLStringList2(this: *mut CPLStringList, papszList: CSLConstList);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringListC1ERKS_"]
    pub fn CPLStringList_CPLStringList3(this: *mut CPLStringList, oOther: *const CPLStringList);
}
extern "C" {
    #[link_name = "\u{1}_ZN13CPLStringListD1Ev"]
    pub fn CPLStringList_CPLStringList_destructor(this: *mut CPLStringList);
}
impl CPLStringList {
    #[inline]
    pub unsafe fn Clear(&mut self) -> *mut CPLStringList {
        CPLStringList_Clear(self)
    }
    #[inline]
    pub unsafe fn Count(&self) -> ::std::os::raw::c_int {
        CPLStringList_Count(self)
    }
    #[inline]
    pub unsafe fn AddString(
        &mut self,
        pszNewString: *const ::std::os::raw::c_char,
    ) -> *mut CPLStringList {
        CPLStringList_AddString(self, pszNewString)
    }
    #[inline]
    pub unsafe fn AddStringDirectly(
        &mut self,
        pszNewString: *mut ::std::os::raw::c_char,
    ) -> *mut CPLStringList {
        CPLStringList_AddStringDirectly(self, pszNewString)
    }
    #[inline]
    pub unsafe fn InsertStringDirectly(
        &mut self,
        nInsertAtLineNo: ::std::os::raw::c_int,
        pszNewLine: *mut ::std::os::raw::c_char,
    ) -> *mut CPLStringList {
        CPLStringList_InsertStringDirectly(self, nInsertAtLineNo, pszNewLine)
    }
    #[inline]
    pub unsafe fn FindName(&self, pszName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        CPLStringList_FindName(self, pszName)
    }
    #[inline]
    pub unsafe fn FetchBool(&self, pszKey: *const ::std::os::raw::c_char, bDefault: bool) -> bool {
        CPLStringList_FetchBool(self, pszKey, bDefault)
    }
    #[inline]
    pub unsafe fn FetchBoolean(
        &self,
        pszKey: *const ::std::os::raw::c_char,
        bDefault: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        CPLStringList_FetchBoolean(self, pszKey, bDefault)
    }
    #[inline]
    pub unsafe fn FetchNameValue(
        &self,
        pszKey: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        CPLStringList_FetchNameValue(self, pszKey)
    }
    #[inline]
    pub unsafe fn FetchNameValueDef(
        &self,
        pszKey: *const ::std::os::raw::c_char,
        pszDefault: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        CPLStringList_FetchNameValueDef(self, pszKey, pszDefault)
    }
    #[inline]
    pub unsafe fn AddNameValue(
        &mut self,
        pszKey: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> *mut CPLStringList {
        CPLStringList_AddNameValue(self, pszKey, pszValue)
    }
    #[inline]
    pub unsafe fn SetNameValue(
        &mut self,
        pszKey: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> *mut CPLStringList {
        CPLStringList_SetNameValue(self, pszKey, pszValue)
    }
    #[inline]
    pub unsafe fn Assign(
        &mut self,
        papszListIn: *mut *mut ::std::os::raw::c_char,
        bTakeOwnership: ::std::os::raw::c_int,
    ) -> *mut CPLStringList {
        CPLStringList_Assign(self, papszListIn, bTakeOwnership)
    }
    #[inline]
    pub unsafe fn StealList(&mut self) -> *mut *mut ::std::os::raw::c_char {
        CPLStringList_StealList(self)
    }
    #[inline]
    pub unsafe fn Sort(&mut self) -> *mut CPLStringList {
        CPLStringList_Sort(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLStringList_CPLStringList(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        papszList: *mut *mut ::std::os::raw::c_char,
        bTakeOwnership: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLStringList_CPLStringList1(__bindgen_tmp.as_mut_ptr(), papszList, bTakeOwnership);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(papszList: CSLConstList) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLStringList_CPLStringList2(__bindgen_tmp.as_mut_ptr(), papszList);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(oOther: *const CPLStringList) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        CPLStringList_CPLStringList3(__bindgen_tmp.as_mut_ptr(), oOther);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        CPLStringList_CPLStringList_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct OGR_SRSNode {
    pub pszValue: *mut ::std::os::raw::c_char,
    pub papoChildNodes: *mut *mut OGR_SRSNode,
    pub poParent: *mut OGR_SRSNode,
    pub nChildren: ::std::os::raw::c_int,
    pub m_listener: std_weak_ptr,
}
#[repr(C)]
pub struct OGR_SRSNode_Listener__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct OGR_SRSNode_Listener {
    pub vtable_: *const OGR_SRSNode_Listener__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_OGR_SRSNode_Listener() {
    assert_eq!(
        ::std::mem::size_of::<OGR_SRSNode_Listener>(),
        8usize,
        concat!("Size of: ", stringify!(OGR_SRSNode_Listener))
    );
    assert_eq!(
        ::std::mem::align_of::<OGR_SRSNode_Listener>(),
        8usize,
        concat!("Alignment of ", stringify!(OGR_SRSNode_Listener))
    );
}
#[test]
fn bindgen_test_layout_OGR_SRSNode() {
    assert_eq!(
        ::std::mem::size_of::<OGR_SRSNode>(),
        48usize,
        concat!("Size of: ", stringify!(OGR_SRSNode))
    );
    assert_eq!(
        ::std::mem::align_of::<OGR_SRSNode>(),
        8usize,
        concat!("Alignment of ", stringify!(OGR_SRSNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGR_SRSNode>())).pszValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGR_SRSNode),
            "::",
            stringify!(pszValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGR_SRSNode>())).papoChildNodes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGR_SRSNode),
            "::",
            stringify!(papoChildNodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGR_SRSNode>())).poParent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OGR_SRSNode),
            "::",
            stringify!(poParent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGR_SRSNode>())).nChildren as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OGR_SRSNode),
            "::",
            stringify!(nChildren)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGR_SRSNode>())).m_listener as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OGR_SRSNode),
            "::",
            stringify!(m_listener)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode16RegisterListenerERKSt10shared_ptrINS_8ListenerEE"]
    pub fn OGR_SRSNode_RegisterListener(this: *mut OGR_SRSNode, listener: *const std_shared_ptr);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode8GetChildEi"]
    pub fn OGR_SRSNode_GetChild(
        this: *mut OGR_SRSNode,
        arg1: ::std::os::raw::c_int,
    ) -> *mut OGR_SRSNode;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGR_SRSNode8GetChildEi"]
    pub fn OGR_SRSNode_GetChild1(
        this: *const OGR_SRSNode,
        arg1: ::std::os::raw::c_int,
    ) -> *const OGR_SRSNode;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode7GetNodeEPKc"]
    pub fn OGR_SRSNode_GetNode(
        this: *mut OGR_SRSNode,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut OGR_SRSNode;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGR_SRSNode7GetNodeEPKc"]
    pub fn OGR_SRSNode_GetNode1(
        this: *const OGR_SRSNode,
        arg1: *const ::std::os::raw::c_char,
    ) -> *const OGR_SRSNode;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode11InsertChildEPS_i"]
    pub fn OGR_SRSNode_InsertChild(
        this: *mut OGR_SRSNode,
        arg1: *mut OGR_SRSNode,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode8AddChildEPS_"]
    pub fn OGR_SRSNode_AddChild(this: *mut OGR_SRSNode, arg1: *mut OGR_SRSNode);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGR_SRSNode9FindChildEPKc"]
    pub fn OGR_SRSNode_FindChild(
        this: *const OGR_SRSNode,
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode12DestroyChildEi"]
    pub fn OGR_SRSNode_DestroyChild(this: *mut OGR_SRSNode, arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode13ClearChildrenEv"]
    pub fn OGR_SRSNode_ClearChildren(this: *mut OGR_SRSNode);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode10StripNodesEPKc"]
    pub fn OGR_SRSNode_StripNodes(this: *mut OGR_SRSNode, arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode8SetValueEPKc"]
    pub fn OGR_SRSNode_SetValue(this: *mut OGR_SRSNode, arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode13MakeValueSafeEv"]
    pub fn OGR_SRSNode_MakeValueSafe(this: *mut OGR_SRSNode);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGR_SRSNode5CloneEv"]
    pub fn OGR_SRSNode_Clone(this: *const OGR_SRSNode) -> *mut OGR_SRSNode;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode13importFromWktEPPc"]
    pub fn OGR_SRSNode_importFromWkt(
        this: *mut OGR_SRSNode,
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode13importFromWktEPPKc"]
    pub fn OGR_SRSNode_importFromWkt1(
        this: *mut OGR_SRSNode,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGR_SRSNode11exportToWktEPPc"]
    pub fn OGR_SRSNode_exportToWkt(
        this: *const OGR_SRSNode,
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGR_SRSNode17exportToPrettyWktEPPci"]
    pub fn OGR_SRSNode_exportToPrettyWkt(
        this: *const OGR_SRSNode,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNodeC1EPKc"]
    pub fn OGR_SRSNode_OGR_SRSNode(this: *mut OGR_SRSNode, arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNodeD1Ev"]
    pub fn OGR_SRSNode_OGR_SRSNode_destructor(this: *mut OGR_SRSNode);
}
impl OGR_SRSNode {
    #[inline]
    pub unsafe fn RegisterListener(&mut self, listener: *const std_shared_ptr) {
        OGR_SRSNode_RegisterListener(self, listener)
    }
    #[inline]
    pub unsafe fn GetChild(&mut self, arg1: ::std::os::raw::c_int) -> *mut OGR_SRSNode {
        OGR_SRSNode_GetChild(self, arg1)
    }
    #[inline]
    pub unsafe fn GetChild1(&self, arg1: ::std::os::raw::c_int) -> *const OGR_SRSNode {
        OGR_SRSNode_GetChild1(self, arg1)
    }
    #[inline]
    pub unsafe fn GetNode(&mut self, arg1: *const ::std::os::raw::c_char) -> *mut OGR_SRSNode {
        OGR_SRSNode_GetNode(self, arg1)
    }
    #[inline]
    pub unsafe fn GetNode1(&self, arg1: *const ::std::os::raw::c_char) -> *const OGR_SRSNode {
        OGR_SRSNode_GetNode1(self, arg1)
    }
    #[inline]
    pub unsafe fn InsertChild(&mut self, arg1: *mut OGR_SRSNode, arg2: ::std::os::raw::c_int) {
        OGR_SRSNode_InsertChild(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn AddChild(&mut self, arg1: *mut OGR_SRSNode) {
        OGR_SRSNode_AddChild(self, arg1)
    }
    #[inline]
    pub unsafe fn FindChild(&self, arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        OGR_SRSNode_FindChild(self, arg1)
    }
    #[inline]
    pub unsafe fn DestroyChild(&mut self, arg1: ::std::os::raw::c_int) {
        OGR_SRSNode_DestroyChild(self, arg1)
    }
    #[inline]
    pub unsafe fn ClearChildren(&mut self) {
        OGR_SRSNode_ClearChildren(self)
    }
    #[inline]
    pub unsafe fn StripNodes(&mut self, arg1: *const ::std::os::raw::c_char) {
        OGR_SRSNode_StripNodes(self, arg1)
    }
    #[inline]
    pub unsafe fn SetValue(&mut self, arg1: *const ::std::os::raw::c_char) {
        OGR_SRSNode_SetValue(self, arg1)
    }
    #[inline]
    pub unsafe fn MakeValueSafe(&mut self) {
        OGR_SRSNode_MakeValueSafe(self)
    }
    #[inline]
    pub unsafe fn Clone(&self) -> *mut OGR_SRSNode {
        OGR_SRSNode_Clone(self)
    }
    #[inline]
    pub unsafe fn importFromWkt(&mut self, arg1: *mut *mut ::std::os::raw::c_char) -> OGRErr {
        OGR_SRSNode_importFromWkt(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromWkt1(&mut self, arg1: *mut *const ::std::os::raw::c_char) -> OGRErr {
        OGR_SRSNode_importFromWkt1(self, arg1)
    }
    #[inline]
    pub unsafe fn exportToWkt(&self, arg1: *mut *mut ::std::os::raw::c_char) -> OGRErr {
        OGR_SRSNode_exportToWkt(self, arg1)
    }
    #[inline]
    pub unsafe fn exportToPrettyWkt(
        &self,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> OGRErr {
        OGR_SRSNode_exportToPrettyWkt(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn new(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGR_SRSNode_OGR_SRSNode(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        OGR_SRSNode_OGR_SRSNode_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGR_SRSNode8ListenerD1Ev"]
    pub fn OGR_SRSNode_Listener_Listener_destructor(this: *mut OGR_SRSNode_Listener);
}
#[repr(C)]
pub struct OGRSpatialReference__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct OGRSpatialReference {
    pub vtable_: *const OGRSpatialReference__bindgen_vtable,
    pub d: std_unique_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRSpatialReference_Private {
    _unused: [u8; 0],
}
#[test]
fn bindgen_test_layout_OGRSpatialReference() {
    assert_eq!(
        ::std::mem::size_of::<OGRSpatialReference>(),
        16usize,
        concat!("Size of: ", stringify!(OGRSpatialReference))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRSpatialReference>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRSpatialReference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRSpatialReference>())).d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRSpatialReference),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference23DestroySpatialReferenceEPS_"]
    pub fn OGRSpatialReference_DestroySpatialReference(poSRS: *mut OGRSpatialReference);
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference9ReferenceEv"]
    pub fn OGRSpatialReference_Reference(this: *mut OGRSpatialReference) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11DereferenceEv"]
    pub fn OGRSpatialReference_Dereference(this: *mut OGRSpatialReference)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference17GetReferenceCountEv"]
    pub fn OGRSpatialReference_GetReferenceCount(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7ReleaseEv"]
    pub fn OGRSpatialReference_Release(this: *mut OGRSpatialReference);
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference7GetNameEv"]
    pub fn OGRSpatialReference_GetName(
        this: *const OGRSpatialReference,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference5CloneEv"]
    pub fn OGRSpatialReference_Clone(this: *const OGRSpatialReference) -> *mut OGRSpatialReference;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference11CloneGeogCSEv"]
    pub fn OGRSpatialReference_CloneGeogCS(
        this: *const OGRSpatialReference,
    ) -> *mut OGRSpatialReference;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference12dumpReadableEv"]
    pub fn OGRSpatialReference_dumpReadable(this: *mut OGRSpatialReference);
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference11exportToWktEPPc"]
    pub fn OGRSpatialReference_exportToWkt(
        this: *const OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference11exportToWktEPPcPKPKc"]
    pub fn OGRSpatialReference_exportToWkt1(
        this: *const OGRSpatialReference,
        ppszWKT: *mut *mut ::std::os::raw::c_char,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference17exportToPrettyWktEPPci"]
    pub fn OGRSpatialReference_exportToPrettyWkt(
        this: *const OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference16exportToPROJJSONEPPcPKPKc"]
    pub fn OGRSpatialReference_exportToPROJJSON(
        this: *const OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference13exportToProj4EPPc"]
    pub fn OGRSpatialReference_exportToProj4(
        this: *const OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference11exportToPCIEPPcS1_PPd"]
    pub fn OGRSpatialReference_exportToPCI(
        this: *const OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12exportToUSGSEPlS0_PPdS0_"]
    pub fn OGRSpatialReference_exportToUSGS(
        this: *const OGRSpatialReference,
        arg1: *mut ::std::os::raw::c_long,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut *mut f64,
        arg4: *mut ::std::os::raw::c_long,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference11exportToXMLEPPcPKc"]
    pub fn OGRSpatialReference_exportToXML(
        this: *const OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference16exportToPanoramaEPlS0_S0_S0_Pd"]
    pub fn OGRSpatialReference_exportToPanorama(
        this: *const OGRSpatialReference,
        arg1: *mut ::std::os::raw::c_long,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11exportToERMEPcS0_S0_"]
    pub fn OGRSpatialReference_exportToERM(
        this: *mut OGRSpatialReference,
        pszProj: *mut ::std::os::raw::c_char,
        pszDatum: *mut ::std::os::raw::c_char,
        pszUnits: *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference18exportToMICoordSysEPPc"]
    pub fn OGRSpatialReference_exportToMICoordSys(
        this: *const OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13importFromWktEPPc"]
    pub fn OGRSpatialReference_importFromWkt(
        this: *mut OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13importFromWktEPPKc"]
    pub fn OGRSpatialReference_importFromWkt1(
        this: *mut OGRSpatialReference,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13importFromWktEPKc"]
    pub fn OGRSpatialReference_importFromWkt2(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference15importFromProj4EPKc"]
    pub fn OGRSpatialReference_importFromProj4(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference14importFromEPSGEi"]
    pub fn OGRSpatialReference_importFromEPSG(
        this: *mut OGRSpatialReference,
        arg1: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference15importFromEPSGAEi"]
    pub fn OGRSpatialReference_importFromEPSGA(
        this: *mut OGRSpatialReference,
        arg1: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference14importFromESRIEPPc"]
    pub fn OGRSpatialReference_importFromESRI(
        this: *mut OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13importFromPCIEPKcS1_Pd"]
    pub fn OGRSpatialReference_importFromPCI(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference14importFromUSGSEllPdli"]
    pub fn OGRSpatialReference_importFromUSGS(
        this: *mut OGRSpatialReference,
        iProjSys: ::std::os::raw::c_long,
        iZone: ::std::os::raw::c_long,
        padfPrjParams: *mut f64,
        iDatum: ::std::os::raw::c_long,
        nUSGSAngleFormat: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference18importFromPanoramaElllPd"]
    pub fn OGRSpatialReference_importFromPanorama(
        this: *mut OGRSpatialReference,
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: *mut f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference24importVertCSFromPanoramaEi"]
    pub fn OGRSpatialReference_importVertCSFromPanorama(
        this: *mut OGRSpatialReference,
        arg1: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13importFromOziEPKPKc"]
    pub fn OGRSpatialReference_importFromOzi(
        this: *mut OGRSpatialReference,
        papszLines: *const *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference17importFromWMSAUTOEPKc"]
    pub fn OGRSpatialReference_importFromWMSAUTO(
        this: *mut OGRSpatialReference,
        pszAutoDef: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13importFromXMLEPKc"]
    pub fn OGRSpatialReference_importFromXML(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference14importFromDictEPKcS1_"]
    pub fn OGRSpatialReference_importFromDict(
        this: *mut OGRSpatialReference,
        pszDict: *const ::std::os::raw::c_char,
        pszCode: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13importFromURNEPKc"]
    pub fn OGRSpatialReference_importFromURN(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference16importFromCRSURLEPKc"]
    pub fn OGRSpatialReference_importFromCRSURL(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13importFromERMEPKcS1_S1_"]
    pub fn OGRSpatialReference_importFromERM(
        this: *mut OGRSpatialReference,
        pszProj: *const ::std::os::raw::c_char,
        pszDatum: *const ::std::os::raw::c_char,
        pszUnits: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13importFromUrlEPKc"]
    pub fn OGRSpatialReference_importFromUrl(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference20importFromMICoordSysEPKc"]
    pub fn OGRSpatialReference_importFromMICoordSys(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11morphToESRIEv"]
    pub fn OGRSpatialReference_morphToESRI(this: *mut OGRSpatialReference) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13morphFromESRIEv"]
    pub fn OGRSpatialReference_morphFromESRI(this: *mut OGRSpatialReference) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference24convertToOtherProjectionEPKcPKS1_"]
    pub fn OGRSpatialReference_convertToOtherProjection(
        this: *const OGRSpatialReference,
        pszTargetProjection: *const ::std::os::raw::c_char,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRSpatialReference;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference8ValidateEv"]
    pub fn OGRSpatialReference_Validate(this: *const OGRSpatialReference) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13StripVerticalEv"]
    pub fn OGRSpatialReference_StripVertical(this: *mut OGRSpatialReference) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference34StripTOWGS84IfKnownDatumAndAllowedEv"]
    pub fn OGRSpatialReference_StripTOWGS84IfKnownDatumAndAllowed(
        this: *mut OGRSpatialReference,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference24StripTOWGS84IfKnownDatumEv"]
    pub fn OGRSpatialReference_StripTOWGS84IfKnownDatum(this: *mut OGRSpatialReference) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference19EPSGTreatsAsLatLongEv"]
    pub fn OGRSpatialReference_EPSGTreatsAsLatLong(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference27EPSGTreatsAsNorthingEastingEv"]
    pub fn OGRSpatialReference_EPSGTreatsAsNorthingEasting(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12GetAxesCountEv"]
    pub fn OGRSpatialReference_GetAxesCount(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference7GetAxisEPKciP18OGRAxisOrientation"]
    pub fn OGRSpatialReference_GetAxis(
        this: *const OGRSpatialReference,
        pszTargetKey: *const ::std::os::raw::c_char,
        iAxis: ::std::os::raw::c_int,
        peOrientation: *mut OGRAxisOrientation,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetAxesEPKcS1_18OGRAxisOrientationS1_S2_"]
    pub fn OGRSpatialReference_SetAxes(
        this: *mut OGRSpatialReference,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszXAxisName: *const ::std::os::raw::c_char,
        eXAxisOrientation: OGRAxisOrientation,
        pszYAxisName: *const ::std::os::raw::c_char,
        eYAxisOrientation: OGRAxisOrientation,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference22GetAxisMappingStrategyEv"]
    pub fn OGRSpatialReference_GetAxisMappingStrategy(
        this: *const OGRSpatialReference,
    ) -> OSRAxisMappingStrategy;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference22SetAxisMappingStrategyE22OSRAxisMappingStrategy"]
    pub fn OGRSpatialReference_SetAxisMappingStrategy(
        this: *mut OGRSpatialReference,
        arg1: OSRAxisMappingStrategy,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference27GetDataAxisToSRSAxisMappingEv"]
    pub fn OGRSpatialReference_GetDataAxisToSRSAxisMapping(
        this: *const OGRSpatialReference,
    ) -> *const std_vector;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference27SetDataAxisToSRSAxisMappingERKSt6vectorIiSaIiEE"]
    pub fn OGRSpatialReference_SetDataAxisToSRSAxisMapping(
        this: *mut OGRSpatialReference,
        mapping: *const std_vector,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7GetRootEv"]
    pub fn OGRSpatialReference_GetRoot(this: *mut OGRSpatialReference) -> *mut OGR_SRSNode;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference7GetRootEv"]
    pub fn OGRSpatialReference_GetRoot1(this: *const OGRSpatialReference) -> *const OGR_SRSNode;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetRootEP11OGR_SRSNode"]
    pub fn OGRSpatialReference_SetRoot(this: *mut OGRSpatialReference, arg1: *mut OGR_SRSNode);
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11GetAttrNodeEPKc"]
    pub fn OGRSpatialReference_GetAttrNode(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut OGR_SRSNode;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference11GetAttrNodeEPKc"]
    pub fn OGRSpatialReference_GetAttrNode1(
        this: *const OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> *const OGR_SRSNode;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12GetAttrValueEPKci"]
    pub fn OGRSpatialReference_GetAttrValue(
        this: *const OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetNodeEPKcS1_"]
    pub fn OGRSpatialReference_SetNode(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetNodeEPKcd"]
    pub fn OGRSpatialReference_SetNode1(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
        arg2: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference33SetLinearUnitsAndUpdateParametersEPKcdS1_S1_"]
    pub fn OGRSpatialReference_SetLinearUnitsAndUpdateParameters(
        this: *mut OGRSpatialReference,
        pszName: *const ::std::os::raw::c_char,
        dfInMeters: f64,
        pszUnitAuthority: *const ::std::os::raw::c_char,
        pszUnitCode: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference14SetLinearUnitsEPKcd"]
    pub fn OGRSpatialReference_SetLinearUnits(
        this: *mut OGRSpatialReference,
        pszName: *const ::std::os::raw::c_char,
        dfInMeters: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference20SetTargetLinearUnitsEPKcS1_dS1_S1_"]
    pub fn OGRSpatialReference_SetTargetLinearUnits(
        this: *mut OGRSpatialReference,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszName: *const ::std::os::raw::c_char,
        dfInMeters: f64,
        pszUnitAuthority: *const ::std::os::raw::c_char,
        pszUnitCode: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference14GetLinearUnitsEPPc"]
    pub fn OGRSpatialReference_GetLinearUnits(
        this: *const OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference14GetLinearUnitsEPPKc"]
    pub fn OGRSpatialReference_GetLinearUnits1(
        this: *const OGRSpatialReference,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference20GetTargetLinearUnitsEPKcPPc"]
    pub fn OGRSpatialReference_GetTargetLinearUnits(
        this: *const OGRSpatialReference,
        pszTargetKey: *const ::std::os::raw::c_char,
        ppszRetName: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference20GetTargetLinearUnitsEPKcPS1_"]
    pub fn OGRSpatialReference_GetTargetLinearUnits1(
        this: *const OGRSpatialReference,
        pszTargetKey: *const ::std::os::raw::c_char,
        ppszRetName: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference15SetAngularUnitsEPKcd"]
    pub fn OGRSpatialReference_SetAngularUnits(
        this: *mut OGRSpatialReference,
        pszName: *const ::std::os::raw::c_char,
        dfInRadians: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference15GetAngularUnitsEPPc"]
    pub fn OGRSpatialReference_GetAngularUnits(
        this: *const OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference15GetAngularUnitsEPPKc"]
    pub fn OGRSpatialReference_GetAngularUnits1(
        this: *const OGRSpatialReference,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference16GetPrimeMeridianEPPc"]
    pub fn OGRSpatialReference_GetPrimeMeridian(
        this: *const OGRSpatialReference,
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference16GetPrimeMeridianEPPKc"]
    pub fn OGRSpatialReference_GetPrimeMeridian1(
        this: *const OGRSpatialReference,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference7IsEmptyEv"]
    pub fn OGRSpatialReference_IsEmpty(this: *const OGRSpatialReference) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12IsGeographicEv"]
    pub fn OGRSpatialReference_IsGeographic(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference19IsDerivedGeographicEv"]
    pub fn OGRSpatialReference_IsDerivedGeographic(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference11IsProjectedEv"]
    pub fn OGRSpatialReference_IsProjected(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12IsGeocentricEv"]
    pub fn OGRSpatialReference_IsGeocentric(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference7IsLocalEv"]
    pub fn OGRSpatialReference_IsLocal(this: *const OGRSpatialReference) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference10IsVerticalEv"]
    pub fn OGRSpatialReference_IsVertical(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference10IsCompoundEv"]
    pub fn OGRSpatialReference_IsCompound(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12IsSameGeogCSEPKS_"]
    pub fn OGRSpatialReference_IsSameGeogCS(
        this: *const OGRSpatialReference,
        arg1: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12IsSameGeogCSEPKS_PKPKc"]
    pub fn OGRSpatialReference_IsSameGeogCS1(
        this: *const OGRSpatialReference,
        arg1: *const OGRSpatialReference,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12IsSameVertCSEPKS_"]
    pub fn OGRSpatialReference_IsSameVertCS(
        this: *const OGRSpatialReference,
        arg1: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference6IsSameEPKS_"]
    pub fn OGRSpatialReference_IsSame(
        this: *const OGRSpatialReference,
        arg1: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference6IsSameEPKS_PKPKc"]
    pub fn OGRSpatialReference_IsSame1(
        this: *const OGRSpatialReference,
        arg1: *const OGRSpatialReference,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference5ClearEv"]
    pub fn OGRSpatialReference_Clear(this: *mut OGRSpatialReference);
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference10SetLocalCSEPKc"]
    pub fn OGRSpatialReference_SetLocalCS(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference9SetProjCSEPKc"]
    pub fn OGRSpatialReference_SetProjCS(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13SetProjectionEPKc"]
    pub fn OGRSpatialReference_SetProjection(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference9SetGeocCSEPKc"]
    pub fn OGRSpatialReference_SetGeocCS(
        this: *mut OGRSpatialReference,
        pszGeocName: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference9SetGeogCSEPKcS1_S1_ddS1_dS1_d"]
    pub fn OGRSpatialReference_SetGeogCS(
        this: *mut OGRSpatialReference,
        pszGeogName: *const ::std::os::raw::c_char,
        pszDatumName: *const ::std::os::raw::c_char,
        pszEllipsoidName: *const ::std::os::raw::c_char,
        dfSemiMajor: f64,
        dfInvFlattening: f64,
        pszPMName: *const ::std::os::raw::c_char,
        dfPMOffset: f64,
        pszUnits: *const ::std::os::raw::c_char,
        dfConvertToRadians: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference18SetWellKnownGeogCSEPKc"]
    pub fn OGRSpatialReference_SetWellKnownGeogCS(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference14CopyGeogCSFromEPKS_"]
    pub fn OGRSpatialReference_CopyGeogCSFrom(
        this: *mut OGRSpatialReference,
        poSrcSRS: *const OGRSpatialReference,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference9SetVertCSEPKcS1_i"]
    pub fn OGRSpatialReference_SetVertCS(
        this: *mut OGRSpatialReference,
        pszVertCSName: *const ::std::os::raw::c_char,
        pszVertDatumName: *const ::std::os::raw::c_char,
        nVertDatumClass: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13SetCompoundCSEPKcPKS_S3_"]
    pub fn OGRSpatialReference_SetCompoundCS(
        this: *mut OGRSpatialReference,
        pszName: *const ::std::os::raw::c_char,
        poHorizSRS: *const OGRSpatialReference,
        poVertSRS: *const OGRSpatialReference,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11PromoteTo3DEPKc"]
    pub fn OGRSpatialReference_PromoteTo3D(
        this: *mut OGRSpatialReference,
        pszName: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference16SetFromUserInputEPKc"]
    pub fn OGRSpatialReference_SetFromUserInput(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference10SetTOWGS84Eddddddd"]
    pub fn OGRSpatialReference_SetTOWGS84(
        this: *mut OGRSpatialReference,
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference10GetTOWGS84EPdi"]
    pub fn OGRSpatialReference_GetTOWGS84(
        this: *const OGRSpatialReference,
        padfCoef: *mut f64,
        nCoeff: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference17AddGuessedTOWGS84Ev"]
    pub fn OGRSpatialReference_AddGuessedTOWGS84(this: *mut OGRSpatialReference) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12GetSemiMajorEPi"]
    pub fn OGRSpatialReference_GetSemiMajor(
        this: *const OGRSpatialReference,
        arg1: *mut OGRErr,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12GetSemiMinorEPi"]
    pub fn OGRSpatialReference_GetSemiMinor(
        this: *const OGRSpatialReference,
        arg1: *mut OGRErr,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference16GetInvFlatteningEPi"]
    pub fn OGRSpatialReference_GetInvFlattening(
        this: *const OGRSpatialReference,
        arg1: *mut OGRErr,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference15GetEccentricityEv"]
    pub fn OGRSpatialReference_GetEccentricity(this: *const OGRSpatialReference) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference22GetSquaredEccentricityEv"]
    pub fn OGRSpatialReference_GetSquaredEccentricity(this: *const OGRSpatialReference) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference12SetAuthorityEPKcS1_i"]
    pub fn OGRSpatialReference_SetAuthority(
        this: *mut OGRSpatialReference,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszAuthority: *const ::std::os::raw::c_char,
        nCode: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference16AutoIdentifyEPSGEv"]
    pub fn OGRSpatialReference_AutoIdentifyEPSG(this: *mut OGRSpatialReference) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference11FindMatchesEPPcPiPS2_"]
    pub fn OGRSpatialReference_FindMatches(
        this: *const OGRSpatialReference,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pnEntries: *mut ::std::os::raw::c_int,
        ppanMatchConfidence: *mut *mut ::std::os::raw::c_int,
    ) -> *mut OGRSpatialReferenceH;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference13GetEPSGGeogCSEv"]
    pub fn OGRSpatialReference_GetEPSGGeogCS(
        this: *const OGRSpatialReference,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference16GetAuthorityCodeEPKc"]
    pub fn OGRSpatialReference_GetAuthorityCode(
        this: *const OGRSpatialReference,
        pszTargetKey: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference16GetAuthorityNameEPKc"]
    pub fn OGRSpatialReference_GetAuthorityName(
        this: *const OGRSpatialReference,
        pszTargetKey: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12GetAreaOfUseEPdS0_S0_S0_PPKc"]
    pub fn OGRSpatialReference_GetAreaOfUse(
        this: *const OGRSpatialReference,
        pdfWestLongitudeDeg: *mut f64,
        pdfSouthLatitudeDeg: *mut f64,
        pdfEastLongitudeDeg: *mut f64,
        pdfNorthLatitudeDeg: *mut f64,
        ppszAreaName: *mut *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12GetExtensionEPKcS1_S1_"]
    pub fn OGRSpatialReference_GetExtension(
        this: *const OGRSpatialReference,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszName: *const ::std::os::raw::c_char,
        pszDefault: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference12SetExtensionEPKcS1_S1_"]
    pub fn OGRSpatialReference_SetExtension(
        this: *mut OGRSpatialReference,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszName: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference12FindProjParmEPKcPK11OGR_SRSNode"]
    pub fn OGRSpatialReference_FindProjParm(
        this: *const OGRSpatialReference,
        pszParameter: *const ::std::os::raw::c_char,
        poPROJCS: *const OGR_SRSNode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11SetProjParmEPKcd"]
    pub fn OGRSpatialReference_SetProjParm(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
        arg2: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference11GetProjParmEPKcdPi"]
    pub fn OGRSpatialReference_GetProjParm(
        this: *const OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
        arg2: f64,
        arg3: *mut OGRErr,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference15SetNormProjParmEPKcd"]
    pub fn OGRSpatialReference_SetNormProjParm(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
        arg2: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference15GetNormProjParmEPKcdPi"]
    pub fn OGRSpatialReference_GetNormProjParm(
        this: *const OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
        arg2: f64,
        arg3: *mut OGRErr,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference18IsAngularParameterEPKc"]
    pub fn OGRSpatialReference_IsAngularParameter(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference20IsLongitudeParameterEPKc"]
    pub fn OGRSpatialReference_IsLongitudeParameter(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference17IsLinearParameterEPKc"]
    pub fn OGRSpatialReference_IsLinearParameter(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetACEAEdddddd"]
    pub fn OGRSpatialReference_SetACEA(
        this: *mut OGRSpatialReference,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference5SetAEEdddd"]
    pub fn OGRSpatialReference_SetAE(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference8SetBonneEdddd"]
    pub fn OGRSpatialReference_SetBonne(
        this: *mut OGRSpatialReference,
        dfStdP1: f64,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetCEAEdddd"]
    pub fn OGRSpatialReference_SetCEA(
        this: *mut OGRSpatialReference,
        dfStdP1: f64,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference5SetCSEdddd"]
    pub fn OGRSpatialReference_SetCS(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference5SetECEdddddd"]
    pub fn OGRSpatialReference_SetEC(
        this: *mut OGRSpatialReference,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference9SetEckertEiddd"]
    pub fn OGRSpatialReference_SetEckert(
        this: *mut OGRSpatialReference,
        nVariation: ::std::os::raw::c_int,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11SetEckertIVEddd"]
    pub fn OGRSpatialReference_SetEckertIV(
        this: *mut OGRSpatialReference,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11SetEckertVIEddd"]
    pub fn OGRSpatialReference_SetEckertVI(
        this: *mut OGRSpatialReference,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference18SetEquirectangularEdddd"]
    pub fn OGRSpatialReference_SetEquirectangular(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference19SetEquirectangular2Eddddd"]
    pub fn OGRSpatialReference_SetEquirectangular2(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfPseudoStdParallel1: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetGEOSEdddd"]
    pub fn OGRSpatialReference_SetGEOS(
        this: *mut OGRSpatialReference,
        dfCentralMeridian: f64,
        dfSatelliteHeight: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference5SetGHEddd"]
    pub fn OGRSpatialReference_SetGH(
        this: *mut OGRSpatialReference,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetIGHEv"]
    pub fn OGRSpatialReference_SetIGH(this: *mut OGRSpatialReference) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference5SetGSEddd"]
    pub fn OGRSpatialReference_SetGS(
        this: *mut OGRSpatialReference,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference26SetGaussSchreiberTMercatorEddddd"]
    pub fn OGRSpatialReference_SetGaussSchreiberTMercator(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11SetGnomonicEdddd"]
    pub fn OGRSpatialReference_SetGnomonic(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetHOMEddddddd"]
    pub fn OGRSpatialReference_SetHOM(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfRectToSkew: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference10SetHOM2PNOEdddddddd"]
    pub fn OGRSpatialReference_SetHOM2PNO(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfLat1: f64,
        dfLong1: f64,
        dfLat2: f64,
        dfLong2: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference8SetHOMACEddddddd"]
    pub fn OGRSpatialReference_SetHOMAC(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfRectToSkew: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetLOMEdddddd"]
    pub fn OGRSpatialReference_SetLOM(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference15SetIWMPolyconicEddddd"]
    pub fn OGRSpatialReference_SetIWMPolyconic(
        this: *mut OGRSpatialReference,
        dfLat1: f64,
        dfLat2: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference9SetKrovakEddddddd"]
    pub fn OGRSpatialReference_SetKrovak(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfPseudoStdParallelLat: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetLAEAEdddd"]
    pub fn OGRSpatialReference_SetLAEA(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetLCCEdddddd"]
    pub fn OGRSpatialReference_SetLCC(
        this: *mut OGRSpatialReference,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference9SetLCC1SPEddddd"]
    pub fn OGRSpatialReference_SetLCC1SP(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetLCCBEdddddd"]
    pub fn OGRSpatialReference_SetLCCB(
        this: *mut OGRSpatialReference,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference5SetMCEdddd"]
    pub fn OGRSpatialReference_SetMC(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11SetMercatorEddddd"]
    pub fn OGRSpatialReference_SetMercator(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference14SetMercator2SPEddddd"]
    pub fn OGRSpatialReference_SetMercator2SP(
        this: *mut OGRSpatialReference,
        dfStdP1: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference12SetMollweideEddd"]
    pub fn OGRSpatialReference_SetMollweide(
        this: *mut OGRSpatialReference,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetNZMGEdddd"]
    pub fn OGRSpatialReference_SetNZMG(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference5SetOSEddddd"]
    pub fn OGRSpatialReference_SetOS(
        this: *mut OGRSpatialReference,
        dfOriginLat: f64,
        dfCMeridian: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference15SetOrthographicEdddd"]
    pub fn OGRSpatialReference_SetOrthographic(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference12SetPolyconicEdddd"]
    pub fn OGRSpatialReference_SetPolyconic(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference5SetPSEddddd"]
    pub fn OGRSpatialReference_SetPS(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11SetRobinsonEddd"]
    pub fn OGRSpatialReference_SetRobinson(
        this: *mut OGRSpatialReference,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13SetSinusoidalEddd"]
    pub fn OGRSpatialReference_SetSinusoidal(
        this: *mut OGRSpatialReference,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference16SetStereographicEddddd"]
    pub fn OGRSpatialReference_SetStereographic(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetSOCEdddd"]
    pub fn OGRSpatialReference_SetSOC(
        this: *mut OGRSpatialReference,
        dfLatitudeOfOrigin: f64,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference5SetTMEddddd"]
    pub fn OGRSpatialReference_SetTM(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference12SetTMVariantEPKcddddd"]
    pub fn OGRSpatialReference_SetTMVariant(
        this: *mut OGRSpatialReference,
        pszVariantName: *const ::std::os::raw::c_char,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetTMGEdddd"]
    pub fn OGRSpatialReference_SetTMG(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetTMSOEddddd"]
    pub fn OGRSpatialReference_SetTMSO(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference7SetTPEDEdddddd"]
    pub fn OGRSpatialReference_SetTPED(
        this: *mut OGRSpatialReference,
        dfLat1: f64,
        dfLong1: f64,
        dfLat2: f64,
        dfLong2: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetVDGEddd"]
    pub fn OGRSpatialReference_SetVDG(
        this: *mut OGRSpatialReference,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetUTMEii"]
    pub fn OGRSpatialReference_SetUTM(
        this: *mut OGRSpatialReference,
        nZone: ::std::os::raw::c_int,
        bNorth: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19OGRSpatialReference10GetUTMZoneEPi"]
    pub fn OGRSpatialReference_GetUTMZone(
        this: *const OGRSpatialReference,
        pbNorth: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference9SetWagnerEiddd"]
    pub fn OGRSpatialReference_SetWagner(
        this: *mut OGRSpatialReference,
        nVariation: ::std::os::raw::c_int,
        dfCenterLat: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetQSCEdd"]
    pub fn OGRSpatialReference_SetQSC(
        this: *mut OGRSpatialReference,
        dfCenterLat: f64,
        dfCenterLong: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference6SetSCHEdddd"]
    pub fn OGRSpatialReference_SetSCH(
        this: *mut OGRSpatialReference,
        dfPegLat: f64,
        dfPegLong: f64,
        dfPegHeading: f64,
        dfPegHgt: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference22SetVerticalPerspectiveEdddddd"]
    pub fn OGRSpatialReference_SetVerticalPerspective(
        this: *mut OGRSpatialReference,
        dfTopoOriginLat: f64,
        dfTopoOriginLon: f64,
        dfTopoOriginHeight: f64,
        dfViewPointHeight: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference47SetDerivedGeogCRSWithPoleRotationGRIBConventionEPKcddd"]
    pub fn OGRSpatialReference_SetDerivedGeogCRSWithPoleRotationGRIBConvention(
        this: *mut OGRSpatialReference,
        pszCRSName: *const ::std::os::raw::c_char,
        dfSouthPoleLat: f64,
        dfSouthPoleLon: f64,
        dfAxisRotation: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference13SetStatePlaneEiiPKcd"]
    pub fn OGRSpatialReference_SetStatePlane(
        this: *mut OGRSpatialReference,
        nZone: ::std::os::raw::c_int,
        bNAD83: ::std::os::raw::c_int,
        pszOverrideUnitName: *const ::std::os::raw::c_char,
        dfOverrideUnit: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference27ImportFromESRIStatePlaneWKTEiPKcS1_iS1_"]
    pub fn OGRSpatialReference_ImportFromESRIStatePlaneWKT(
        this: *mut OGRSpatialReference,
        nCode: ::std::os::raw::c_int,
        pszDatumName: *const ::std::os::raw::c_char,
        pszUnitsName: *const ::std::os::raw::c_char,
        nPCSCode: ::std::os::raw::c_int,
        pszCRSName: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference26ImportFromESRIWisconsinWKTEPKcddS1_S1_"]
    pub fn OGRSpatialReference_ImportFromESRIWisconsinWKT(
        this: *mut OGRSpatialReference,
        pszPrjName: *const ::std::os::raw::c_char,
        dfCentralMeridian: f64,
        dfLatOfOrigin: f64,
        pszUnitsName: *const ::std::os::raw::c_char,
        pszCRSName: *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference33UpdateCoordinateSystemFromGeogCRSEv"]
    pub fn OGRSpatialReference_UpdateCoordinateSystemFromGeogCRS(this: *mut OGRSpatialReference);
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReference11GetWGS84SRSEv"]
    pub fn OGRSpatialReference_GetWGS84SRS() -> *mut OGRSpatialReference;
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReferenceC1ERKS_"]
    pub fn OGRSpatialReference_OGRSpatialReference(
        this: *mut OGRSpatialReference,
        arg1: *const OGRSpatialReference,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReferenceC1EPKc"]
    pub fn OGRSpatialReference_OGRSpatialReference1(
        this: *mut OGRSpatialReference,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl OGRSpatialReference {
    #[inline]
    pub unsafe fn DestroySpatialReference(poSRS: *mut OGRSpatialReference) {
        OGRSpatialReference_DestroySpatialReference(poSRS)
    }
    #[inline]
    pub unsafe fn Reference(&mut self) -> ::std::os::raw::c_int {
        OGRSpatialReference_Reference(self)
    }
    #[inline]
    pub unsafe fn Dereference(&mut self) -> ::std::os::raw::c_int {
        OGRSpatialReference_Dereference(self)
    }
    #[inline]
    pub unsafe fn GetReferenceCount(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_GetReferenceCount(self)
    }
    #[inline]
    pub unsafe fn Release(&mut self) {
        OGRSpatialReference_Release(self)
    }
    #[inline]
    pub unsafe fn GetName(&self) -> *const ::std::os::raw::c_char {
        OGRSpatialReference_GetName(self)
    }
    #[inline]
    pub unsafe fn Clone(&self) -> *mut OGRSpatialReference {
        OGRSpatialReference_Clone(self)
    }
    #[inline]
    pub unsafe fn CloneGeogCS(&self) -> *mut OGRSpatialReference {
        OGRSpatialReference_CloneGeogCS(self)
    }
    #[inline]
    pub unsafe fn dumpReadable(&mut self) {
        OGRSpatialReference_dumpReadable(self)
    }
    #[inline]
    pub unsafe fn exportToWkt(&self, arg1: *mut *mut ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_exportToWkt(self, arg1)
    }
    #[inline]
    pub unsafe fn exportToWkt1(
        &self,
        ppszWKT: *mut *mut ::std::os::raw::c_char,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_exportToWkt1(self, ppszWKT, papszOptions)
    }
    #[inline]
    pub unsafe fn exportToPrettyWkt(
        &self,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> OGRErr {
        OGRSpatialReference_exportToPrettyWkt(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn exportToPROJJSON(
        &self,
        arg1: *mut *mut ::std::os::raw::c_char,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_exportToPROJJSON(self, arg1, papszOptions)
    }
    #[inline]
    pub unsafe fn exportToProj4(&self, arg1: *mut *mut ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_exportToProj4(self, arg1)
    }
    #[inline]
    pub unsafe fn exportToPCI(
        &self,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut f64,
    ) -> OGRErr {
        OGRSpatialReference_exportToPCI(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn exportToUSGS(
        &self,
        arg1: *mut ::std::os::raw::c_long,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut *mut f64,
        arg4: *mut ::std::os::raw::c_long,
    ) -> OGRErr {
        OGRSpatialReference_exportToUSGS(self, arg1, arg2, arg3, arg4)
    }
    #[inline]
    pub unsafe fn exportToXML(
        &self,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_exportToXML(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn exportToPanorama(
        &self,
        arg1: *mut ::std::os::raw::c_long,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: *mut f64,
    ) -> OGRErr {
        OGRSpatialReference_exportToPanorama(self, arg1, arg2, arg3, arg4, arg5)
    }
    #[inline]
    pub unsafe fn exportToERM(
        &mut self,
        pszProj: *mut ::std::os::raw::c_char,
        pszDatum: *mut ::std::os::raw::c_char,
        pszUnits: *mut ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_exportToERM(self, pszProj, pszDatum, pszUnits)
    }
    #[inline]
    pub unsafe fn exportToMICoordSys(&self, arg1: *mut *mut ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_exportToMICoordSys(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromWkt(&mut self, arg1: *mut *mut ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_importFromWkt(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromWkt1(&mut self, arg1: *mut *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_importFromWkt1(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromWkt2(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_importFromWkt2(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromProj4(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_importFromProj4(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromEPSG(&mut self, arg1: ::std::os::raw::c_int) -> OGRErr {
        OGRSpatialReference_importFromEPSG(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromEPSGA(&mut self, arg1: ::std::os::raw::c_int) -> OGRErr {
        OGRSpatialReference_importFromEPSGA(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromESRI(&mut self, arg1: *mut *mut ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_importFromESRI(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromPCI(
        &mut self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut f64,
    ) -> OGRErr {
        OGRSpatialReference_importFromPCI(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn importFromUSGS(
        &mut self,
        iProjSys: ::std::os::raw::c_long,
        iZone: ::std::os::raw::c_long,
        padfPrjParams: *mut f64,
        iDatum: ::std::os::raw::c_long,
        nUSGSAngleFormat: ::std::os::raw::c_int,
    ) -> OGRErr {
        OGRSpatialReference_importFromUSGS(
            self,
            iProjSys,
            iZone,
            padfPrjParams,
            iDatum,
            nUSGSAngleFormat,
        )
    }
    #[inline]
    pub unsafe fn importFromPanorama(
        &mut self,
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: *mut f64,
    ) -> OGRErr {
        OGRSpatialReference_importFromPanorama(self, arg1, arg2, arg3, arg4)
    }
    #[inline]
    pub unsafe fn importVertCSFromPanorama(&mut self, arg1: ::std::os::raw::c_int) -> OGRErr {
        OGRSpatialReference_importVertCSFromPanorama(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromOzi(
        &mut self,
        papszLines: *const *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_importFromOzi(self, papszLines)
    }
    #[inline]
    pub unsafe fn importFromWMSAUTO(
        &mut self,
        pszAutoDef: *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_importFromWMSAUTO(self, pszAutoDef)
    }
    #[inline]
    pub unsafe fn importFromXML(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_importFromXML(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromDict(
        &mut self,
        pszDict: *const ::std::os::raw::c_char,
        pszCode: *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_importFromDict(self, pszDict, pszCode)
    }
    #[inline]
    pub unsafe fn importFromURN(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_importFromURN(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromCRSURL(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_importFromCRSURL(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromERM(
        &mut self,
        pszProj: *const ::std::os::raw::c_char,
        pszDatum: *const ::std::os::raw::c_char,
        pszUnits: *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_importFromERM(self, pszProj, pszDatum, pszUnits)
    }
    #[inline]
    pub unsafe fn importFromUrl(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_importFromUrl(self, arg1)
    }
    #[inline]
    pub unsafe fn importFromMICoordSys(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_importFromMICoordSys(self, arg1)
    }
    #[inline]
    pub unsafe fn morphToESRI(&mut self) -> OGRErr {
        OGRSpatialReference_morphToESRI(self)
    }
    #[inline]
    pub unsafe fn morphFromESRI(&mut self) -> OGRErr {
        OGRSpatialReference_morphFromESRI(self)
    }
    #[inline]
    pub unsafe fn convertToOtherProjection(
        &self,
        pszTargetProjection: *const ::std::os::raw::c_char,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRSpatialReference {
        OGRSpatialReference_convertToOtherProjection(self, pszTargetProjection, papszOptions)
    }
    #[inline]
    pub unsafe fn Validate(&self) -> OGRErr {
        OGRSpatialReference_Validate(self)
    }
    #[inline]
    pub unsafe fn StripVertical(&mut self) -> OGRErr {
        OGRSpatialReference_StripVertical(self)
    }
    #[inline]
    pub unsafe fn StripTOWGS84IfKnownDatumAndAllowed(&mut self) -> bool {
        OGRSpatialReference_StripTOWGS84IfKnownDatumAndAllowed(self)
    }
    #[inline]
    pub unsafe fn StripTOWGS84IfKnownDatum(&mut self) -> bool {
        OGRSpatialReference_StripTOWGS84IfKnownDatum(self)
    }
    #[inline]
    pub unsafe fn EPSGTreatsAsLatLong(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_EPSGTreatsAsLatLong(self)
    }
    #[inline]
    pub unsafe fn EPSGTreatsAsNorthingEasting(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_EPSGTreatsAsNorthingEasting(self)
    }
    #[inline]
    pub unsafe fn GetAxesCount(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_GetAxesCount(self)
    }
    #[inline]
    pub unsafe fn GetAxis(
        &self,
        pszTargetKey: *const ::std::os::raw::c_char,
        iAxis: ::std::os::raw::c_int,
        peOrientation: *mut OGRAxisOrientation,
    ) -> *const ::std::os::raw::c_char {
        OGRSpatialReference_GetAxis(self, pszTargetKey, iAxis, peOrientation)
    }
    #[inline]
    pub unsafe fn SetAxes(
        &mut self,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszXAxisName: *const ::std::os::raw::c_char,
        eXAxisOrientation: OGRAxisOrientation,
        pszYAxisName: *const ::std::os::raw::c_char,
        eYAxisOrientation: OGRAxisOrientation,
    ) -> OGRErr {
        OGRSpatialReference_SetAxes(
            self,
            pszTargetKey,
            pszXAxisName,
            eXAxisOrientation,
            pszYAxisName,
            eYAxisOrientation,
        )
    }
    #[inline]
    pub unsafe fn GetAxisMappingStrategy(&self) -> OSRAxisMappingStrategy {
        OGRSpatialReference_GetAxisMappingStrategy(self)
    }
    #[inline]
    pub unsafe fn SetAxisMappingStrategy(&mut self, arg1: OSRAxisMappingStrategy) {
        OGRSpatialReference_SetAxisMappingStrategy(self, arg1)
    }
    #[inline]
    pub unsafe fn GetDataAxisToSRSAxisMapping(&self) -> *const std_vector {
        OGRSpatialReference_GetDataAxisToSRSAxisMapping(self)
    }
    #[inline]
    pub unsafe fn SetDataAxisToSRSAxisMapping(&mut self, mapping: *const std_vector) -> OGRErr {
        OGRSpatialReference_SetDataAxisToSRSAxisMapping(self, mapping)
    }
    #[inline]
    pub unsafe fn GetRoot(&mut self) -> *mut OGR_SRSNode {
        OGRSpatialReference_GetRoot(self)
    }
    #[inline]
    pub unsafe fn GetRoot1(&self) -> *const OGR_SRSNode {
        OGRSpatialReference_GetRoot1(self)
    }
    #[inline]
    pub unsafe fn SetRoot(&mut self, arg1: *mut OGR_SRSNode) {
        OGRSpatialReference_SetRoot(self, arg1)
    }
    #[inline]
    pub unsafe fn GetAttrNode(&mut self, arg1: *const ::std::os::raw::c_char) -> *mut OGR_SRSNode {
        OGRSpatialReference_GetAttrNode(self, arg1)
    }
    #[inline]
    pub unsafe fn GetAttrNode1(&self, arg1: *const ::std::os::raw::c_char) -> *const OGR_SRSNode {
        OGRSpatialReference_GetAttrNode1(self, arg1)
    }
    #[inline]
    pub unsafe fn GetAttrValue(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        OGRSpatialReference_GetAttrValue(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn SetNode(
        &mut self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_SetNode(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn SetNode1(&mut self, arg1: *const ::std::os::raw::c_char, arg2: f64) -> OGRErr {
        OGRSpatialReference_SetNode1(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn SetLinearUnitsAndUpdateParameters(
        &mut self,
        pszName: *const ::std::os::raw::c_char,
        dfInMeters: f64,
        pszUnitAuthority: *const ::std::os::raw::c_char,
        pszUnitCode: *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_SetLinearUnitsAndUpdateParameters(
            self,
            pszName,
            dfInMeters,
            pszUnitAuthority,
            pszUnitCode,
        )
    }
    #[inline]
    pub unsafe fn SetLinearUnits(
        &mut self,
        pszName: *const ::std::os::raw::c_char,
        dfInMeters: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetLinearUnits(self, pszName, dfInMeters)
    }
    #[inline]
    pub unsafe fn SetTargetLinearUnits(
        &mut self,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszName: *const ::std::os::raw::c_char,
        dfInMeters: f64,
        pszUnitAuthority: *const ::std::os::raw::c_char,
        pszUnitCode: *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_SetTargetLinearUnits(
            self,
            pszTargetKey,
            pszName,
            dfInMeters,
            pszUnitAuthority,
            pszUnitCode,
        )
    }
    #[inline]
    pub unsafe fn GetLinearUnits(&self, arg1: *mut *mut ::std::os::raw::c_char) -> f64 {
        OGRSpatialReference_GetLinearUnits(self, arg1)
    }
    #[inline]
    pub unsafe fn GetLinearUnits1(&self, arg1: *mut *const ::std::os::raw::c_char) -> f64 {
        OGRSpatialReference_GetLinearUnits1(self, arg1)
    }
    #[inline]
    pub unsafe fn GetTargetLinearUnits(
        &self,
        pszTargetKey: *const ::std::os::raw::c_char,
        ppszRetName: *mut *mut ::std::os::raw::c_char,
    ) -> f64 {
        OGRSpatialReference_GetTargetLinearUnits(self, pszTargetKey, ppszRetName)
    }
    #[inline]
    pub unsafe fn GetTargetLinearUnits1(
        &self,
        pszTargetKey: *const ::std::os::raw::c_char,
        ppszRetName: *mut *const ::std::os::raw::c_char,
    ) -> f64 {
        OGRSpatialReference_GetTargetLinearUnits1(self, pszTargetKey, ppszRetName)
    }
    #[inline]
    pub unsafe fn SetAngularUnits(
        &mut self,
        pszName: *const ::std::os::raw::c_char,
        dfInRadians: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetAngularUnits(self, pszName, dfInRadians)
    }
    #[inline]
    pub unsafe fn GetAngularUnits(&self, arg1: *mut *mut ::std::os::raw::c_char) -> f64 {
        OGRSpatialReference_GetAngularUnits(self, arg1)
    }
    #[inline]
    pub unsafe fn GetAngularUnits1(&self, arg1: *mut *const ::std::os::raw::c_char) -> f64 {
        OGRSpatialReference_GetAngularUnits1(self, arg1)
    }
    #[inline]
    pub unsafe fn GetPrimeMeridian(&self, arg1: *mut *mut ::std::os::raw::c_char) -> f64 {
        OGRSpatialReference_GetPrimeMeridian(self, arg1)
    }
    #[inline]
    pub unsafe fn GetPrimeMeridian1(&self, arg1: *mut *const ::std::os::raw::c_char) -> f64 {
        OGRSpatialReference_GetPrimeMeridian1(self, arg1)
    }
    #[inline]
    pub unsafe fn IsEmpty(&self) -> bool {
        OGRSpatialReference_IsEmpty(self)
    }
    #[inline]
    pub unsafe fn IsGeographic(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsGeographic(self)
    }
    #[inline]
    pub unsafe fn IsDerivedGeographic(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsDerivedGeographic(self)
    }
    #[inline]
    pub unsafe fn IsProjected(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsProjected(self)
    }
    #[inline]
    pub unsafe fn IsGeocentric(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsGeocentric(self)
    }
    #[inline]
    pub unsafe fn IsLocal(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsLocal(self)
    }
    #[inline]
    pub unsafe fn IsVertical(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsVertical(self)
    }
    #[inline]
    pub unsafe fn IsCompound(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsCompound(self)
    }
    #[inline]
    pub unsafe fn IsSameGeogCS(&self, arg1: *const OGRSpatialReference) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsSameGeogCS(self, arg1)
    }
    #[inline]
    pub unsafe fn IsSameGeogCS1(
        &self,
        arg1: *const OGRSpatialReference,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsSameGeogCS1(self, arg1, papszOptions)
    }
    #[inline]
    pub unsafe fn IsSameVertCS(&self, arg1: *const OGRSpatialReference) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsSameVertCS(self, arg1)
    }
    #[inline]
    pub unsafe fn IsSame(&self, arg1: *const OGRSpatialReference) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsSame(self, arg1)
    }
    #[inline]
    pub unsafe fn IsSame1(
        &self,
        arg1: *const OGRSpatialReference,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsSame1(self, arg1, papszOptions)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        OGRSpatialReference_Clear(self)
    }
    #[inline]
    pub unsafe fn SetLocalCS(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_SetLocalCS(self, arg1)
    }
    #[inline]
    pub unsafe fn SetProjCS(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_SetProjCS(self, arg1)
    }
    #[inline]
    pub unsafe fn SetProjection(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_SetProjection(self, arg1)
    }
    #[inline]
    pub unsafe fn SetGeocCS(&mut self, pszGeocName: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_SetGeocCS(self, pszGeocName)
    }
    #[inline]
    pub unsafe fn SetGeogCS(
        &mut self,
        pszGeogName: *const ::std::os::raw::c_char,
        pszDatumName: *const ::std::os::raw::c_char,
        pszEllipsoidName: *const ::std::os::raw::c_char,
        dfSemiMajor: f64,
        dfInvFlattening: f64,
        pszPMName: *const ::std::os::raw::c_char,
        dfPMOffset: f64,
        pszUnits: *const ::std::os::raw::c_char,
        dfConvertToRadians: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetGeogCS(
            self,
            pszGeogName,
            pszDatumName,
            pszEllipsoidName,
            dfSemiMajor,
            dfInvFlattening,
            pszPMName,
            dfPMOffset,
            pszUnits,
            dfConvertToRadians,
        )
    }
    #[inline]
    pub unsafe fn SetWellKnownGeogCS(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_SetWellKnownGeogCS(self, arg1)
    }
    #[inline]
    pub unsafe fn CopyGeogCSFrom(&mut self, poSrcSRS: *const OGRSpatialReference) -> OGRErr {
        OGRSpatialReference_CopyGeogCSFrom(self, poSrcSRS)
    }
    #[inline]
    pub unsafe fn SetVertCS(
        &mut self,
        pszVertCSName: *const ::std::os::raw::c_char,
        pszVertDatumName: *const ::std::os::raw::c_char,
        nVertDatumClass: ::std::os::raw::c_int,
    ) -> OGRErr {
        OGRSpatialReference_SetVertCS(self, pszVertCSName, pszVertDatumName, nVertDatumClass)
    }
    #[inline]
    pub unsafe fn SetCompoundCS(
        &mut self,
        pszName: *const ::std::os::raw::c_char,
        poHorizSRS: *const OGRSpatialReference,
        poVertSRS: *const OGRSpatialReference,
    ) -> OGRErr {
        OGRSpatialReference_SetCompoundCS(self, pszName, poHorizSRS, poVertSRS)
    }
    #[inline]
    pub unsafe fn PromoteTo3D(&mut self, pszName: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_PromoteTo3D(self, pszName)
    }
    #[inline]
    pub unsafe fn SetFromUserInput(&mut self, arg1: *const ::std::os::raw::c_char) -> OGRErr {
        OGRSpatialReference_SetFromUserInput(self, arg1)
    }
    #[inline]
    pub unsafe fn SetTOWGS84(
        &mut self,
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetTOWGS84(self, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    }
    #[inline]
    pub unsafe fn GetTOWGS84(&self, padfCoef: *mut f64, nCoeff: ::std::os::raw::c_int) -> OGRErr {
        OGRSpatialReference_GetTOWGS84(self, padfCoef, nCoeff)
    }
    #[inline]
    pub unsafe fn AddGuessedTOWGS84(&mut self) -> OGRErr {
        OGRSpatialReference_AddGuessedTOWGS84(self)
    }
    #[inline]
    pub unsafe fn GetSemiMajor(&self, arg1: *mut OGRErr) -> f64 {
        OGRSpatialReference_GetSemiMajor(self, arg1)
    }
    #[inline]
    pub unsafe fn GetSemiMinor(&self, arg1: *mut OGRErr) -> f64 {
        OGRSpatialReference_GetSemiMinor(self, arg1)
    }
    #[inline]
    pub unsafe fn GetInvFlattening(&self, arg1: *mut OGRErr) -> f64 {
        OGRSpatialReference_GetInvFlattening(self, arg1)
    }
    #[inline]
    pub unsafe fn GetEccentricity(&self) -> f64 {
        OGRSpatialReference_GetEccentricity(self)
    }
    #[inline]
    pub unsafe fn GetSquaredEccentricity(&self) -> f64 {
        OGRSpatialReference_GetSquaredEccentricity(self)
    }
    #[inline]
    pub unsafe fn SetAuthority(
        &mut self,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszAuthority: *const ::std::os::raw::c_char,
        nCode: ::std::os::raw::c_int,
    ) -> OGRErr {
        OGRSpatialReference_SetAuthority(self, pszTargetKey, pszAuthority, nCode)
    }
    #[inline]
    pub unsafe fn AutoIdentifyEPSG(&mut self) -> OGRErr {
        OGRSpatialReference_AutoIdentifyEPSG(self)
    }
    #[inline]
    pub unsafe fn FindMatches(
        &self,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        pnEntries: *mut ::std::os::raw::c_int,
        ppanMatchConfidence: *mut *mut ::std::os::raw::c_int,
    ) -> *mut OGRSpatialReferenceH {
        OGRSpatialReference_FindMatches(self, papszOptions, pnEntries, ppanMatchConfidence)
    }
    #[inline]
    pub unsafe fn GetEPSGGeogCS(&self) -> ::std::os::raw::c_int {
        OGRSpatialReference_GetEPSGGeogCS(self)
    }
    #[inline]
    pub unsafe fn GetAuthorityCode(
        &self,
        pszTargetKey: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        OGRSpatialReference_GetAuthorityCode(self, pszTargetKey)
    }
    #[inline]
    pub unsafe fn GetAuthorityName(
        &self,
        pszTargetKey: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        OGRSpatialReference_GetAuthorityName(self, pszTargetKey)
    }
    #[inline]
    pub unsafe fn GetAreaOfUse(
        &self,
        pdfWestLongitudeDeg: *mut f64,
        pdfSouthLatitudeDeg: *mut f64,
        pdfEastLongitudeDeg: *mut f64,
        pdfNorthLatitudeDeg: *mut f64,
        ppszAreaName: *mut *const ::std::os::raw::c_char,
    ) -> bool {
        OGRSpatialReference_GetAreaOfUse(
            self,
            pdfWestLongitudeDeg,
            pdfSouthLatitudeDeg,
            pdfEastLongitudeDeg,
            pdfNorthLatitudeDeg,
            ppszAreaName,
        )
    }
    #[inline]
    pub unsafe fn GetExtension(
        &self,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszName: *const ::std::os::raw::c_char,
        pszDefault: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        OGRSpatialReference_GetExtension(self, pszTargetKey, pszName, pszDefault)
    }
    #[inline]
    pub unsafe fn SetExtension(
        &mut self,
        pszTargetKey: *const ::std::os::raw::c_char,
        pszName: *const ::std::os::raw::c_char,
        pszValue: *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_SetExtension(self, pszTargetKey, pszName, pszValue)
    }
    #[inline]
    pub unsafe fn FindProjParm(
        &self,
        pszParameter: *const ::std::os::raw::c_char,
        poPROJCS: *const OGR_SRSNode,
    ) -> ::std::os::raw::c_int {
        OGRSpatialReference_FindProjParm(self, pszParameter, poPROJCS)
    }
    #[inline]
    pub unsafe fn SetProjParm(&mut self, arg1: *const ::std::os::raw::c_char, arg2: f64) -> OGRErr {
        OGRSpatialReference_SetProjParm(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn GetProjParm(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: f64,
        arg3: *mut OGRErr,
    ) -> f64 {
        OGRSpatialReference_GetProjParm(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn SetNormProjParm(
        &mut self,
        arg1: *const ::std::os::raw::c_char,
        arg2: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetNormProjParm(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn GetNormProjParm(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: f64,
        arg3: *mut OGRErr,
    ) -> f64 {
        OGRSpatialReference_GetNormProjParm(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn IsAngularParameter(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsAngularParameter(arg1)
    }
    #[inline]
    pub unsafe fn IsLongitudeParameter(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsLongitudeParameter(arg1)
    }
    #[inline]
    pub unsafe fn IsLinearParameter(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        OGRSpatialReference_IsLinearParameter(arg1)
    }
    #[inline]
    pub unsafe fn SetACEA(
        &mut self,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetACEA(
            self,
            dfStdP1,
            dfStdP2,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetAE(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetAE(
            self,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetBonne(
        &mut self,
        dfStdP1: f64,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetBonne(
            self,
            dfStdP1,
            dfCentralMeridian,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetCEA(
        &mut self,
        dfStdP1: f64,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetCEA(
            self,
            dfStdP1,
            dfCentralMeridian,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetCS(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetCS(
            self,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetEC(
        &mut self,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetEC(
            self,
            dfStdP1,
            dfStdP2,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetEckert(
        &mut self,
        nVariation: ::std::os::raw::c_int,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetEckert(
            self,
            nVariation,
            dfCentralMeridian,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetEckertIV(
        &mut self,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetEckertIV(self, dfCentralMeridian, dfFalseEasting, dfFalseNorthing)
    }
    #[inline]
    pub unsafe fn SetEckertVI(
        &mut self,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetEckertVI(self, dfCentralMeridian, dfFalseEasting, dfFalseNorthing)
    }
    #[inline]
    pub unsafe fn SetEquirectangular(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetEquirectangular(
            self,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetEquirectangular2(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfPseudoStdParallel1: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetEquirectangular2(
            self,
            dfCenterLat,
            dfCenterLong,
            dfPseudoStdParallel1,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetGEOS(
        &mut self,
        dfCentralMeridian: f64,
        dfSatelliteHeight: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetGEOS(
            self,
            dfCentralMeridian,
            dfSatelliteHeight,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetGH(
        &mut self,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetGH(self, dfCentralMeridian, dfFalseEasting, dfFalseNorthing)
    }
    #[inline]
    pub unsafe fn SetIGH(&mut self) -> OGRErr {
        OGRSpatialReference_SetIGH(self)
    }
    #[inline]
    pub unsafe fn SetGS(
        &mut self,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetGS(self, dfCentralMeridian, dfFalseEasting, dfFalseNorthing)
    }
    #[inline]
    pub unsafe fn SetGaussSchreiberTMercator(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetGaussSchreiberTMercator(
            self,
            dfCenterLat,
            dfCenterLong,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetGnomonic(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetGnomonic(
            self,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetHOM(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfRectToSkew: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetHOM(
            self,
            dfCenterLat,
            dfCenterLong,
            dfAzimuth,
            dfRectToSkew,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetHOM2PNO(
        &mut self,
        dfCenterLat: f64,
        dfLat1: f64,
        dfLong1: f64,
        dfLat2: f64,
        dfLong2: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetHOM2PNO(
            self,
            dfCenterLat,
            dfLat1,
            dfLong1,
            dfLat2,
            dfLong2,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetHOMAC(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfRectToSkew: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetHOMAC(
            self,
            dfCenterLat,
            dfCenterLong,
            dfAzimuth,
            dfRectToSkew,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetLOM(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetLOM(
            self,
            dfCenterLat,
            dfCenterLong,
            dfAzimuth,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetIWMPolyconic(
        &mut self,
        dfLat1: f64,
        dfLat2: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetIWMPolyconic(
            self,
            dfLat1,
            dfLat2,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetKrovak(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfAzimuth: f64,
        dfPseudoStdParallelLat: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetKrovak(
            self,
            dfCenterLat,
            dfCenterLong,
            dfAzimuth,
            dfPseudoStdParallelLat,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetLAEA(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetLAEA(
            self,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetLCC(
        &mut self,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetLCC(
            self,
            dfStdP1,
            dfStdP2,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetLCC1SP(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetLCC1SP(
            self,
            dfCenterLat,
            dfCenterLong,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetLCCB(
        &mut self,
        dfStdP1: f64,
        dfStdP2: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetLCCB(
            self,
            dfStdP1,
            dfStdP2,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetMC(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetMC(
            self,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetMercator(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetMercator(
            self,
            dfCenterLat,
            dfCenterLong,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetMercator2SP(
        &mut self,
        dfStdP1: f64,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetMercator2SP(
            self,
            dfStdP1,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetMollweide(
        &mut self,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetMollweide(self, dfCentralMeridian, dfFalseEasting, dfFalseNorthing)
    }
    #[inline]
    pub unsafe fn SetNZMG(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetNZMG(
            self,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetOS(
        &mut self,
        dfOriginLat: f64,
        dfCMeridian: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetOS(
            self,
            dfOriginLat,
            dfCMeridian,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetOrthographic(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetOrthographic(
            self,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetPolyconic(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetPolyconic(
            self,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetPS(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetPS(
            self,
            dfCenterLat,
            dfCenterLong,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetRobinson(
        &mut self,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetRobinson(self, dfCenterLong, dfFalseEasting, dfFalseNorthing)
    }
    #[inline]
    pub unsafe fn SetSinusoidal(
        &mut self,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetSinusoidal(self, dfCenterLong, dfFalseEasting, dfFalseNorthing)
    }
    #[inline]
    pub unsafe fn SetStereographic(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetStereographic(
            self,
            dfCenterLat,
            dfCenterLong,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetSOC(
        &mut self,
        dfLatitudeOfOrigin: f64,
        dfCentralMeridian: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetSOC(
            self,
            dfLatitudeOfOrigin,
            dfCentralMeridian,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetTM(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetTM(
            self,
            dfCenterLat,
            dfCenterLong,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetTMVariant(
        &mut self,
        pszVariantName: *const ::std::os::raw::c_char,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetTMVariant(
            self,
            pszVariantName,
            dfCenterLat,
            dfCenterLong,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetTMG(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetTMG(
            self,
            dfCenterLat,
            dfCenterLong,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetTMSO(
        &mut self,
        dfCenterLat: f64,
        dfCenterLong: f64,
        dfScale: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetTMSO(
            self,
            dfCenterLat,
            dfCenterLong,
            dfScale,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetTPED(
        &mut self,
        dfLat1: f64,
        dfLong1: f64,
        dfLat2: f64,
        dfLong2: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetTPED(
            self,
            dfLat1,
            dfLong1,
            dfLat2,
            dfLong2,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetVDG(
        &mut self,
        dfCenterLong: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetVDG(self, dfCenterLong, dfFalseEasting, dfFalseNorthing)
    }
    #[inline]
    pub unsafe fn SetUTM(
        &mut self,
        nZone: ::std::os::raw::c_int,
        bNorth: ::std::os::raw::c_int,
    ) -> OGRErr {
        OGRSpatialReference_SetUTM(self, nZone, bNorth)
    }
    #[inline]
    pub unsafe fn GetUTMZone(&self, pbNorth: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        OGRSpatialReference_GetUTMZone(self, pbNorth)
    }
    #[inline]
    pub unsafe fn SetWagner(
        &mut self,
        nVariation: ::std::os::raw::c_int,
        dfCenterLat: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetWagner(
            self,
            nVariation,
            dfCenterLat,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetQSC(&mut self, dfCenterLat: f64, dfCenterLong: f64) -> OGRErr {
        OGRSpatialReference_SetQSC(self, dfCenterLat, dfCenterLong)
    }
    #[inline]
    pub unsafe fn SetSCH(
        &mut self,
        dfPegLat: f64,
        dfPegLong: f64,
        dfPegHeading: f64,
        dfPegHgt: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetSCH(self, dfPegLat, dfPegLong, dfPegHeading, dfPegHgt)
    }
    #[inline]
    pub unsafe fn SetVerticalPerspective(
        &mut self,
        dfTopoOriginLat: f64,
        dfTopoOriginLon: f64,
        dfTopoOriginHeight: f64,
        dfViewPointHeight: f64,
        dfFalseEasting: f64,
        dfFalseNorthing: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetVerticalPerspective(
            self,
            dfTopoOriginLat,
            dfTopoOriginLon,
            dfTopoOriginHeight,
            dfViewPointHeight,
            dfFalseEasting,
            dfFalseNorthing,
        )
    }
    #[inline]
    pub unsafe fn SetDerivedGeogCRSWithPoleRotationGRIBConvention(
        &mut self,
        pszCRSName: *const ::std::os::raw::c_char,
        dfSouthPoleLat: f64,
        dfSouthPoleLon: f64,
        dfAxisRotation: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetDerivedGeogCRSWithPoleRotationGRIBConvention(
            self,
            pszCRSName,
            dfSouthPoleLat,
            dfSouthPoleLon,
            dfAxisRotation,
        )
    }
    #[inline]
    pub unsafe fn SetStatePlane(
        &mut self,
        nZone: ::std::os::raw::c_int,
        bNAD83: ::std::os::raw::c_int,
        pszOverrideUnitName: *const ::std::os::raw::c_char,
        dfOverrideUnit: f64,
    ) -> OGRErr {
        OGRSpatialReference_SetStatePlane(self, nZone, bNAD83, pszOverrideUnitName, dfOverrideUnit)
    }
    #[inline]
    pub unsafe fn ImportFromESRIStatePlaneWKT(
        &mut self,
        nCode: ::std::os::raw::c_int,
        pszDatumName: *const ::std::os::raw::c_char,
        pszUnitsName: *const ::std::os::raw::c_char,
        nPCSCode: ::std::os::raw::c_int,
        pszCRSName: *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_ImportFromESRIStatePlaneWKT(
            self,
            nCode,
            pszDatumName,
            pszUnitsName,
            nPCSCode,
            pszCRSName,
        )
    }
    #[inline]
    pub unsafe fn ImportFromESRIWisconsinWKT(
        &mut self,
        pszPrjName: *const ::std::os::raw::c_char,
        dfCentralMeridian: f64,
        dfLatOfOrigin: f64,
        pszUnitsName: *const ::std::os::raw::c_char,
        pszCRSName: *const ::std::os::raw::c_char,
    ) -> OGRErr {
        OGRSpatialReference_ImportFromESRIWisconsinWKT(
            self,
            pszPrjName,
            dfCentralMeridian,
            dfLatOfOrigin,
            pszUnitsName,
            pszCRSName,
        )
    }
    #[inline]
    pub unsafe fn UpdateCoordinateSystemFromGeogCRS(&mut self) {
        OGRSpatialReference_UpdateCoordinateSystemFromGeogCRS(self)
    }
    #[inline]
    pub unsafe fn GetWGS84SRS() -> *mut OGRSpatialReference {
        OGRSpatialReference_GetWGS84SRS()
    }
    #[inline]
    pub unsafe fn new(arg1: *const OGRSpatialReference) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRSpatialReference_OGRSpatialReference(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRSpatialReference_OGRSpatialReference1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN19OGRSpatialReferenceD1Ev"]
    pub fn OGRSpatialReference_OGRSpatialReference_destructor(this: *mut OGRSpatialReference);
}
#[repr(C)]
pub struct OGRCoordinateTransformation__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct OGRCoordinateTransformation {
    pub vtable_: *const OGRCoordinateTransformation__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_OGRCoordinateTransformation() {
    assert_eq!(
        ::std::mem::size_of::<OGRCoordinateTransformation>(),
        8usize,
        concat!("Size of: ", stringify!(OGRCoordinateTransformation))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRCoordinateTransformation>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRCoordinateTransformation))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN27OGRCoordinateTransformation9DestroyCTEPS_"]
    pub fn OGRCoordinateTransformation_DestroyCT(poCT: *mut OGRCoordinateTransformation);
}
extern "C" {
    #[link_name = "\u{1}_ZN27OGRCoordinateTransformation9TransformEiPdS0_S0_Pi"]
    pub fn OGRCoordinateTransformation_Transform(
        this: *mut OGRCoordinateTransformation,
        nCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        pabSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
impl OGRCoordinateTransformation {
    #[inline]
    pub unsafe fn DestroyCT(poCT: *mut OGRCoordinateTransformation) {
        OGRCoordinateTransformation_DestroyCT(poCT)
    }
    #[inline]
    pub unsafe fn Transform(
        &mut self,
        nCount: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        z: *mut f64,
        pabSuccess: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        OGRCoordinateTransformation_Transform(self, nCount, x, y, z, pabSuccess)
    }
}
extern "C" {
    #[link_name = "\u{1}_Z33OGRCreateCoordinateTransformationPK19OGRSpatialReferenceS1_"]
    pub fn OGRCreateCoordinateTransformation(
        poSource: *const OGRSpatialReference,
        poTarget: *const OGRSpatialReference,
    ) -> *mut OGRCoordinateTransformation;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRCoordinateTransformationOptions {
    pub d: std_unique_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRCoordinateTransformationOptions_Private {
    _unused: [u8; 0],
}
#[test]
fn bindgen_test_layout_OGRCoordinateTransformationOptions() {
    assert_eq!(
        ::std::mem::size_of::<OGRCoordinateTransformationOptions>(),
        8usize,
        concat!("Size of: ", stringify!(OGRCoordinateTransformationOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRCoordinateTransformationOptions>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(OGRCoordinateTransformationOptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OGRCoordinateTransformationOptions>())).d as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRCoordinateTransformationOptions),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN34OGRCoordinateTransformationOptions17SetAreaOfInterestEdddd"]
    pub fn OGRCoordinateTransformationOptions_SetAreaOfInterest(
        this: *mut OGRCoordinateTransformationOptions,
        dfWestLongitudeDeg: f64,
        dfSouthLatitudeDeg: f64,
        dfEastLongitudeDeg: f64,
        dfNorthLatitudeDeg: f64,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN34OGRCoordinateTransformationOptions22SetCoordinateOperationEPKcb"]
    pub fn OGRCoordinateTransformationOptions_SetCoordinateOperation(
        this: *mut OGRCoordinateTransformationOptions,
        pszCT: *const ::std::os::raw::c_char,
        bReverseCT: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN34OGRCoordinateTransformationOptions19SetSourceCenterLongEd"]
    pub fn OGRCoordinateTransformationOptions_SetSourceCenterLong(
        this: *mut OGRCoordinateTransformationOptions,
        dfCenterLong: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN34OGRCoordinateTransformationOptions19SetTargetCenterLongEd"]
    pub fn OGRCoordinateTransformationOptions_SetTargetCenterLong(
        this: *mut OGRCoordinateTransformationOptions,
        dfCenterLong: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN34OGRCoordinateTransformationOptionsC1Ev"]
    pub fn OGRCoordinateTransformationOptions_OGRCoordinateTransformationOptions(
        this: *mut OGRCoordinateTransformationOptions,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN34OGRCoordinateTransformationOptionsC1ERKS_"]
    pub fn OGRCoordinateTransformationOptions_OGRCoordinateTransformationOptions1(
        this: *mut OGRCoordinateTransformationOptions,
        arg1: *const OGRCoordinateTransformationOptions,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN34OGRCoordinateTransformationOptionsD1Ev"]
    pub fn OGRCoordinateTransformationOptions_OGRCoordinateTransformationOptions_destructor(
        this: *mut OGRCoordinateTransformationOptions,
    );
}
impl OGRCoordinateTransformationOptions {
    #[inline]
    pub unsafe fn SetAreaOfInterest(
        &mut self,
        dfWestLongitudeDeg: f64,
        dfSouthLatitudeDeg: f64,
        dfEastLongitudeDeg: f64,
        dfNorthLatitudeDeg: f64,
    ) -> bool {
        OGRCoordinateTransformationOptions_SetAreaOfInterest(
            self,
            dfWestLongitudeDeg,
            dfSouthLatitudeDeg,
            dfEastLongitudeDeg,
            dfNorthLatitudeDeg,
        )
    }
    #[inline]
    pub unsafe fn SetCoordinateOperation(
        &mut self,
        pszCT: *const ::std::os::raw::c_char,
        bReverseCT: bool,
    ) -> bool {
        OGRCoordinateTransformationOptions_SetCoordinateOperation(self, pszCT, bReverseCT)
    }
    #[inline]
    pub unsafe fn SetSourceCenterLong(&mut self, dfCenterLong: f64) {
        OGRCoordinateTransformationOptions_SetSourceCenterLong(self, dfCenterLong)
    }
    #[inline]
    pub unsafe fn SetTargetCenterLong(&mut self, dfCenterLong: f64) {
        OGRCoordinateTransformationOptions_SetTargetCenterLong(self, dfCenterLong)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCoordinateTransformationOptions_OGRCoordinateTransformationOptions(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const OGRCoordinateTransformationOptions) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCoordinateTransformationOptions_OGRCoordinateTransformationOptions1(
            __bindgen_tmp.as_mut_ptr(),
            arg1,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        OGRCoordinateTransformationOptions_OGRCoordinateTransformationOptions_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_Z33OGRCreateCoordinateTransformationPK19OGRSpatialReferenceS1_RK34OGRCoordinateTransformationOptions"]
    pub fn OGRCreateCoordinateTransformation1(
        poSource: *const OGRSpatialReference,
        poTarget: *const OGRSpatialReference,
        options: *const OGRCoordinateTransformationOptions,
    ) -> *mut OGRCoordinateTransformation;
}
pub const OGRWktFormat_F: OGRWktFormat = 0;
pub const OGRWktFormat_G: OGRWktFormat = 1;
pub const OGRWktFormat_Default: OGRWktFormat = 2;
pub type OGRWktFormat = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRWktOptions {
    pub variant: OGRwkbVariant,
    pub precision: ::std::os::raw::c_int,
    pub round: bool,
    pub format: OGRWktFormat,
}
#[test]
fn bindgen_test_layout_OGRWktOptions() {
    assert_eq!(
        ::std::mem::size_of::<OGRWktOptions>(),
        16usize,
        concat!("Size of: ", stringify!(OGRWktOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRWktOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(OGRWktOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRWktOptions>())).variant as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRWktOptions),
            "::",
            stringify!(variant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRWktOptions>())).precision as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRWktOptions),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRWktOptions>())).round as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRWktOptions),
            "::",
            stringify!(round)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRWktOptions>())).format as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRWktOptions),
            "::",
            stringify!(format)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRRawPoint {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout_OGRRawPoint() {
    assert_eq!(
        ::std::mem::size_of::<OGRRawPoint>(),
        16usize,
        concat!("Size of: ", stringify!(OGRRawPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRRawPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRRawPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRRawPoint>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRRawPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRRawPoint>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRRawPoint),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GEOSGeom_t {
    _unused: [u8; 0],
}
pub type GEOSGeom = *mut GEOSGeom_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GEOSContextHandle_HS {
    _unused: [u8; 0],
}
pub type GEOSContextHandle_t = *mut GEOSContextHandle_HS;
pub type sfcgal_geometry_t = ::std::os::raw::c_void;
pub type OGRCurveCasterToLineString =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut OGRCurve) -> *mut OGRLineString>;
pub type OGRCurveCasterToLinearRing =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut OGRCurve) -> *mut OGRLinearRing>;
pub type OGRSurfaceCasterToPolygon =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut OGRSurface) -> *mut OGRPolygon>;
pub type OGRSurfaceCasterToCurvePolygon =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut OGRSurface) -> *mut OGRCurvePolygon>;
pub type OGRPolyhedralSurfaceCastToMultiPolygon = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut OGRPolyhedralSurface) -> *mut OGRMultiPolygon,
>;
#[repr(C)]
pub struct IOGRGeometryVisitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct IOGRGeometryVisitor {
    pub vtable_: *const IOGRGeometryVisitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_IOGRGeometryVisitor() {
    assert_eq!(
        ::std::mem::size_of::<IOGRGeometryVisitor>(),
        8usize,
        concat!("Size of: ", stringify!(IOGRGeometryVisitor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOGRGeometryVisitor>(),
        8usize,
        concat!("Alignment of ", stringify!(IOGRGeometryVisitor))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRDefaultGeometryVisitor {
    pub _base: IOGRGeometryVisitor,
}
#[test]
fn bindgen_test_layout_OGRDefaultGeometryVisitor() {
    assert_eq!(
        ::std::mem::size_of::<OGRDefaultGeometryVisitor>(),
        8usize,
        concat!("Size of: ", stringify!(OGRDefaultGeometryVisitor))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRDefaultGeometryVisitor>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRDefaultGeometryVisitor))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP13OGRLineString"]
    pub fn OGRDefaultGeometryVisitor_visit(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRLineString,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP13OGRLinearRing"]
    pub fn OGRDefaultGeometryVisitor_visit1(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRLinearRing,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP10OGRPolygon"]
    pub fn OGRDefaultGeometryVisitor_visit2(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRPolygon,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP13OGRMultiPoint"]
    pub fn OGRDefaultGeometryVisitor_visit3(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRMultiPoint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP18OGRMultiLineString"]
    pub fn OGRDefaultGeometryVisitor_visit4(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRMultiLineString,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP15OGRMultiPolygon"]
    pub fn OGRDefaultGeometryVisitor_visit5(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRMultiPolygon,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP21OGRGeometryCollection"]
    pub fn OGRDefaultGeometryVisitor_visit6(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRGeometryCollection,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP17OGRCircularString"]
    pub fn OGRDefaultGeometryVisitor_visit7(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRCircularString,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP16OGRCompoundCurve"]
    pub fn OGRDefaultGeometryVisitor_visit8(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRCompoundCurve,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP15OGRCurvePolygon"]
    pub fn OGRDefaultGeometryVisitor_visit9(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRCurvePolygon,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP13OGRMultiCurve"]
    pub fn OGRDefaultGeometryVisitor_visit10(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRMultiCurve,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP15OGRMultiSurface"]
    pub fn OGRDefaultGeometryVisitor_visit11(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRMultiSurface,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP11OGRTriangle"]
    pub fn OGRDefaultGeometryVisitor_visit12(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRTriangle,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP20OGRPolyhedralSurface"]
    pub fn OGRDefaultGeometryVisitor_visit13(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRPolyhedralSurface,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN25OGRDefaultGeometryVisitor5visitEP22OGRTriangulatedSurface"]
    pub fn OGRDefaultGeometryVisitor_visit14(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRTriangulatedSurface,
    );
}
#[repr(C)]
pub struct IOGRConstGeometryVisitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct IOGRConstGeometryVisitor {
    pub vtable_: *const IOGRConstGeometryVisitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_IOGRConstGeometryVisitor() {
    assert_eq!(
        ::std::mem::size_of::<IOGRConstGeometryVisitor>(),
        8usize,
        concat!("Size of: ", stringify!(IOGRConstGeometryVisitor))
    );
    assert_eq!(
        ::std::mem::align_of::<IOGRConstGeometryVisitor>(),
        8usize,
        concat!("Alignment of ", stringify!(IOGRConstGeometryVisitor))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRDefaultConstGeometryVisitor {
    pub _base: IOGRConstGeometryVisitor,
}
#[test]
fn bindgen_test_layout_OGRDefaultConstGeometryVisitor() {
    assert_eq!(
        ::std::mem::size_of::<OGRDefaultConstGeometryVisitor>(),
        8usize,
        concat!("Size of: ", stringify!(OGRDefaultConstGeometryVisitor))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRDefaultConstGeometryVisitor>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRDefaultConstGeometryVisitor))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK13OGRLineString"]
    pub fn OGRDefaultConstGeometryVisitor_visit(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRLineString,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK13OGRLinearRing"]
    pub fn OGRDefaultConstGeometryVisitor_visit1(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRLinearRing,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK10OGRPolygon"]
    pub fn OGRDefaultConstGeometryVisitor_visit2(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRPolygon,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK13OGRMultiPoint"]
    pub fn OGRDefaultConstGeometryVisitor_visit3(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRMultiPoint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK18OGRMultiLineString"]
    pub fn OGRDefaultConstGeometryVisitor_visit4(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRMultiLineString,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK15OGRMultiPolygon"]
    pub fn OGRDefaultConstGeometryVisitor_visit5(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRMultiPolygon,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK21OGRGeometryCollection"]
    pub fn OGRDefaultConstGeometryVisitor_visit6(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometryCollection,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK17OGRCircularString"]
    pub fn OGRDefaultConstGeometryVisitor_visit7(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRCircularString,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK16OGRCompoundCurve"]
    pub fn OGRDefaultConstGeometryVisitor_visit8(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRCompoundCurve,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK15OGRCurvePolygon"]
    pub fn OGRDefaultConstGeometryVisitor_visit9(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRCurvePolygon,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK13OGRMultiCurve"]
    pub fn OGRDefaultConstGeometryVisitor_visit10(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRMultiCurve,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK15OGRMultiSurface"]
    pub fn OGRDefaultConstGeometryVisitor_visit11(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRMultiSurface,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK11OGRTriangle"]
    pub fn OGRDefaultConstGeometryVisitor_visit12(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRTriangle,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK20OGRPolyhedralSurface"]
    pub fn OGRDefaultConstGeometryVisitor_visit13(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRPolyhedralSurface,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN30OGRDefaultConstGeometryVisitor5visitEPK22OGRTriangulatedSurface"]
    pub fn OGRDefaultConstGeometryVisitor_visit14(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRTriangulatedSurface,
    );
}
#[repr(C)]
pub struct OGRGeometry__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct OGRGeometry {
    pub vtable_: *const OGRGeometry__bindgen_vtable,
    pub poSRS: *mut OGRSpatialReference,
    pub flags: ::std::os::raw::c_uint,
}
pub const OGRGeometry_OGR_G_NOT_EMPTY_POINT: ::std::os::raw::c_uint = 1;
pub const OGRGeometry_OGR_G_3D: ::std::os::raw::c_uint = 2;
pub const OGRGeometry_OGR_G_MEASURED: ::std::os::raw::c_uint = 4;
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry28bGenerate_DB2_V72_BYTE_ORDERE"]
    pub static mut OGRGeometry_bGenerate_DB2_V72_BYTE_ORDER: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_OGRGeometry() {
    assert_eq!(
        ::std::mem::size_of::<OGRGeometry>(),
        24usize,
        concat!("Size of: ", stringify!(OGRGeometry))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRGeometry>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRGeometry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRGeometry>())).poSRS as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRGeometry),
            "::",
            stringify!(poSRS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRGeometry>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRGeometry),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry21importPreambleFromWktEPPKcPiS3_Pb"]
    pub fn OGRGeometry_importPreambleFromWkt(
        this: *mut OGRGeometry,
        ppszInput: *mut *const ::std::os::raw::c_char,
        pbHasZ: *mut ::std::os::raw::c_int,
        pbHasM: *mut ::std::os::raw::c_int,
        pbIsEmpty: *mut bool,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry28importCurveCollectionFromWktEPPKciiiiPFiPS_P8OGRCurveE"]
    pub fn OGRGeometry_importCurveCollectionFromWkt(
        this: *mut OGRGeometry,
        ppszInput: *mut *const ::std::os::raw::c_char,
        bAllowEmptyComponent: ::std::os::raw::c_int,
        bAllowLineString: ::std::os::raw::c_int,
        bAllowCurve: ::std::os::raw::c_int,
        bAllowCompoundCurve: ::std::os::raw::c_int,
        pfnAddCurveDirectly: ::std::option::Option<
            unsafe extern "C" fn(poSelf: *mut OGRGeometry, poCurve: *mut OGRCurve) -> OGRErr,
        >,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry21importPreambleFromWkbEPKhiR15OGRwkbByteOrder13OGRwkbVariant"]
    pub fn OGRGeometry_importPreambleFromWkb(
        this: *mut OGRGeometry,
        pabyData: *const ::std::os::raw::c_uchar,
        nSize: ::std::os::raw::c_int,
        eByteOrder: *mut OGRwkbByteOrder,
        eWkbVariant: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry33importPreambleOfCollectionFromWkbEPKhRiS2_R15OGRwkbByteOrderiS2_13OGRwkbVariant"]
    pub fn OGRGeometry_importPreambleOfCollectionFromWkb(
        this: *mut OGRGeometry,
        pabyData: *const ::std::os::raw::c_uchar,
        nSize: *mut ::std::os::raw::c_int,
        nDataOffset: *mut ::std::os::raw::c_int,
        eByteOrder: *mut OGRwkbByteOrder,
        nMinSubGeomSize: ::std::os::raw::c_int,
        nGeomCount: *mut ::std::os::raw::c_int,
        eWkbVariant: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry22PointOnSurfaceInternalEP8OGRPoint"]
    pub fn OGRGeometry_PointOnSurfaceInternal(
        this: *const OGRGeometry,
        poPoint: *mut OGRPoint,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry18IsSFCGALCompatibleEv"]
    pub fn OGRGeometry_IsSFCGALCompatible(this: *const OGRGeometry) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry28HomogenizeDimensionalityWithEPS_"]
    pub fn OGRGeometry_HomogenizeDimensionalityWith(
        this: *mut OGRGeometry,
        poOtherGeom: *mut OGRGeometry,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry13wktTypeStringB5cxx11E13OGRwkbVariant"]
    pub fn OGRGeometry_wktTypeString(
        this: *const OGRGeometry,
        variant: OGRwkbVariant,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry19CoordinateDimensionEv"]
    pub fn OGRGeometry_CoordinateDimension(this: *const OGRGeometry) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry13importFromWkbEPKhi13OGRwkbVariant"]
    pub fn OGRGeometry_importFromWkb(
        this: *mut OGRGeometry,
        arg1: *const GByte,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry11exportToWktEPPc13OGRwkbVariant"]
    pub fn OGRGeometry_exportToWkt(
        this: *const OGRGeometry,
        ppszDstText: *mut *mut ::std::os::raw::c_char,
        arg1: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry18getIsoGeometryTypeEv"]
    pub fn OGRGeometry_getIsoGeometryType(this: *const OGRGeometry) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry17createGEOSContextEv"]
    pub fn OGRGeometry_createGEOSContext() -> GEOSContextHandle_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry15freeGEOSContextEP20GEOSContextHandle_HS"]
    pub fn OGRGeometry_freeGEOSContext(hGEOSCtxt: GEOSContextHandle_t);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry17OGRexportToSFCGALEPKS_"]
    pub fn OGRGeometry_OGRexportToSFCGAL(poGeom: *const OGRGeometry) -> *mut sfcgal_geometry_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry17SFCGALexportToOGREPKv"]
    pub fn OGRGeometry_SFCGALexportToOGR(_geometry: *const sfcgal_geometry_t) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry11transformToEP19OGRSpatialReference"]
    pub fn OGRGeometry_transformTo(
        this: *mut OGRGeometry,
        poSR: *mut OGRSpatialReference,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry24SimplifyPreserveTopologyEd"]
    pub fn OGRGeometry_SimplifyPreserveTopology(
        this: *const OGRGeometry,
        dTolerance: f64,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry9IntersectEPS_"]
    pub fn OGRGeometry_Intersect(this: *const OGRGeometry, arg1: *mut OGRGeometry) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry5EqualEPS_"]
    pub fn OGRGeometry_Equal(this: *const OGRGeometry, arg1: *mut OGRGeometry) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry19SymmetricDifferenceEPKS_"]
    pub fn OGRGeometry_SymmetricDifference(
        this: *const OGRGeometry,
        arg1: *const OGRGeometry,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry11getBoundaryEv"]
    pub fn OGRGeometry_getBoundary(this: *const OGRGeometry) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry11CastToErrorEPS_"]
    pub fn OGRGeometry_CastToError(poGeom: *mut OGRGeometry) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometryC2Ev"]
    pub fn OGRGeometry_OGRGeometry(this: *mut OGRGeometry);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometryC2ERKS_"]
    pub fn OGRGeometry_OGRGeometry1(this: *mut OGRGeometry, other: *const OGRGeometry);
}
impl OGRGeometry {
    #[inline]
    pub unsafe fn importPreambleFromWkt(
        &mut self,
        ppszInput: *mut *const ::std::os::raw::c_char,
        pbHasZ: *mut ::std::os::raw::c_int,
        pbHasM: *mut ::std::os::raw::c_int,
        pbIsEmpty: *mut bool,
    ) -> OGRErr {
        OGRGeometry_importPreambleFromWkt(self, ppszInput, pbHasZ, pbHasM, pbIsEmpty)
    }
    #[inline]
    pub unsafe fn importCurveCollectionFromWkt(
        &mut self,
        ppszInput: *mut *const ::std::os::raw::c_char,
        bAllowEmptyComponent: ::std::os::raw::c_int,
        bAllowLineString: ::std::os::raw::c_int,
        bAllowCurve: ::std::os::raw::c_int,
        bAllowCompoundCurve: ::std::os::raw::c_int,
        pfnAddCurveDirectly: ::std::option::Option<
            unsafe extern "C" fn(poSelf: *mut OGRGeometry, poCurve: *mut OGRCurve) -> OGRErr,
        >,
    ) -> OGRErr {
        OGRGeometry_importCurveCollectionFromWkt(
            self,
            ppszInput,
            bAllowEmptyComponent,
            bAllowLineString,
            bAllowCurve,
            bAllowCompoundCurve,
            pfnAddCurveDirectly,
        )
    }
    #[inline]
    pub unsafe fn importPreambleFromWkb(
        &mut self,
        pabyData: *const ::std::os::raw::c_uchar,
        nSize: ::std::os::raw::c_int,
        eByteOrder: *mut OGRwkbByteOrder,
        eWkbVariant: OGRwkbVariant,
    ) -> OGRErr {
        OGRGeometry_importPreambleFromWkb(self, pabyData, nSize, eByteOrder, eWkbVariant)
    }
    #[inline]
    pub unsafe fn importPreambleOfCollectionFromWkb(
        &mut self,
        pabyData: *const ::std::os::raw::c_uchar,
        nSize: *mut ::std::os::raw::c_int,
        nDataOffset: *mut ::std::os::raw::c_int,
        eByteOrder: *mut OGRwkbByteOrder,
        nMinSubGeomSize: ::std::os::raw::c_int,
        nGeomCount: *mut ::std::os::raw::c_int,
        eWkbVariant: OGRwkbVariant,
    ) -> OGRErr {
        OGRGeometry_importPreambleOfCollectionFromWkb(
            self,
            pabyData,
            nSize,
            nDataOffset,
            eByteOrder,
            nMinSubGeomSize,
            nGeomCount,
            eWkbVariant,
        )
    }
    #[inline]
    pub unsafe fn PointOnSurfaceInternal(&self, poPoint: *mut OGRPoint) -> OGRErr {
        OGRGeometry_PointOnSurfaceInternal(self, poPoint)
    }
    #[inline]
    pub unsafe fn IsSFCGALCompatible(&self) -> OGRBoolean {
        OGRGeometry_IsSFCGALCompatible(self)
    }
    #[inline]
    pub unsafe fn HomogenizeDimensionalityWith(&mut self, poOtherGeom: *mut OGRGeometry) {
        OGRGeometry_HomogenizeDimensionalityWith(self, poOtherGeom)
    }
    #[inline]
    pub unsafe fn wktTypeString(&self, variant: OGRwkbVariant) -> std_string {
        OGRGeometry_wktTypeString(self, variant)
    }
    #[inline]
    pub unsafe fn CoordinateDimension(&self) -> ::std::os::raw::c_int {
        OGRGeometry_CoordinateDimension(self)
    }
    #[inline]
    pub unsafe fn importFromWkb(
        &mut self,
        arg1: *const GByte,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
    ) -> OGRErr {
        OGRGeometry_importFromWkb(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn exportToWkt(
        &self,
        ppszDstText: *mut *mut ::std::os::raw::c_char,
        arg1: OGRwkbVariant,
    ) -> OGRErr {
        OGRGeometry_exportToWkt(self, ppszDstText, arg1)
    }
    #[inline]
    pub unsafe fn getIsoGeometryType(&self) -> OGRwkbGeometryType {
        OGRGeometry_getIsoGeometryType(self)
    }
    #[inline]
    pub unsafe fn createGEOSContext() -> GEOSContextHandle_t {
        OGRGeometry_createGEOSContext()
    }
    #[inline]
    pub unsafe fn freeGEOSContext(hGEOSCtxt: GEOSContextHandle_t) {
        OGRGeometry_freeGEOSContext(hGEOSCtxt)
    }
    #[inline]
    pub unsafe fn OGRexportToSFCGAL(poGeom: *const OGRGeometry) -> *mut sfcgal_geometry_t {
        OGRGeometry_OGRexportToSFCGAL(poGeom)
    }
    #[inline]
    pub unsafe fn SFCGALexportToOGR(_geometry: *const sfcgal_geometry_t) -> *mut OGRGeometry {
        OGRGeometry_SFCGALexportToOGR(_geometry)
    }
    #[inline]
    pub unsafe fn transformTo(&mut self, poSR: *mut OGRSpatialReference) -> OGRErr {
        OGRGeometry_transformTo(self, poSR)
    }
    #[inline]
    pub unsafe fn SimplifyPreserveTopology(&self, dTolerance: f64) -> *mut OGRGeometry {
        OGRGeometry_SimplifyPreserveTopology(self, dTolerance)
    }
    #[inline]
    pub unsafe fn Intersect(&self, arg1: *mut OGRGeometry) -> OGRBoolean {
        OGRGeometry_Intersect(self, arg1)
    }
    #[inline]
    pub unsafe fn Equal(&self, arg1: *mut OGRGeometry) -> OGRBoolean {
        OGRGeometry_Equal(self, arg1)
    }
    #[inline]
    pub unsafe fn SymmetricDifference(&self, arg1: *const OGRGeometry) -> *mut OGRGeometry {
        OGRGeometry_SymmetricDifference(self, arg1)
    }
    #[inline]
    pub unsafe fn getBoundary(&self) -> *mut OGRGeometry {
        OGRGeometry_getBoundary(self)
    }
    #[inline]
    pub unsafe fn CastToError(poGeom: *mut OGRGeometry) -> *mut OGRGeometry {
        OGRGeometry_CastToError(poGeom)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRGeometry_OGRGeometry(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRGeometry) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRGeometry_OGRGeometry1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometryD1Ev"]
    pub fn OGRGeometry_OGRGeometry_destructor(this: *mut OGRGeometry);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry22getCoordinateDimensionEv"]
    pub fn OGRGeometry_getCoordinateDimension(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry7IsValidEv"]
    pub fn OGRGeometry_IsValid(this: *mut ::std::os::raw::c_void) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry9MakeValidEv"]
    pub fn OGRGeometry_MakeValid(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry8IsSimpleEv"]
    pub fn OGRGeometry_IsSimple(this: *mut ::std::os::raw::c_void) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry6IsRingEv"]
    pub fn OGRGeometry_IsRing(this: *mut ::std::os::raw::c_void) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry12dumpReadableEP8_IO_FILEPKcPPc"]
    pub fn OGRGeometry_dumpReadable(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        papszOptions: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry11exportToGMLEPKPKc"]
    pub fn OGRGeometry_exportToGML(
        this: *mut ::std::os::raw::c_void,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry11exportToKMLEv"]
    pub fn OGRGeometry_exportToKML(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry12exportToJsonEv"]
    pub fn OGRGeometry_exportToJson(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry12exportToGEOSEP20GEOSContextHandle_HS"]
    pub fn OGRGeometry_exportToGEOS(
        this: *mut ::std::os::raw::c_void,
        hGEOSCtxt: GEOSContextHandle_t,
    ) -> GEOSGeom;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry16hasCurveGeometryEi"]
    pub fn OGRGeometry_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry16getCurveGeometryEPKPKc"]
    pub fn OGRGeometry_getCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry17getLinearGeometryEdPKPKc"]
    pub fn OGRGeometry_getLinearGeometry(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry10closeRingsEv"]
    pub fn OGRGeometry_closeRings(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry22setCoordinateDimensionEi"]
    pub fn OGRGeometry_setCoordinateDimension(
        this: *mut ::std::os::raw::c_void,
        nDimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry5set3DEi"]
    pub fn OGRGeometry_set3D(this: *mut ::std::os::raw::c_void, bIs3D: OGRBoolean);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry11setMeasuredEi"]
    pub fn OGRGeometry_setMeasured(this: *mut ::std::os::raw::c_void, bIsMeasured: OGRBoolean);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry22assignSpatialReferenceEP19OGRSpatialReference"]
    pub fn OGRGeometry_assignSpatialReference(
        this: *mut ::std::os::raw::c_void,
        poSR: *mut OGRSpatialReference,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry10segmentizeEd"]
    pub fn OGRGeometry_segmentize(this: *mut ::std::os::raw::c_void, dfMaxLength: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry10IntersectsEPKS_"]
    pub fn OGRGeometry_Intersects(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry8DisjointEPKS_"]
    pub fn OGRGeometry_Disjoint(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry7TouchesEPKS_"]
    pub fn OGRGeometry_Touches(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry7CrossesEPKS_"]
    pub fn OGRGeometry_Crosses(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry6WithinEPKS_"]
    pub fn OGRGeometry_Within(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry8ContainsEPKS_"]
    pub fn OGRGeometry_Contains(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry8OverlapsEPKS_"]
    pub fn OGRGeometry_Overlaps(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry8BoundaryEv"]
    pub fn OGRGeometry_Boundary(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry8DistanceEPKS_"]
    pub fn OGRGeometry_Distance(this: *mut ::std::os::raw::c_void, arg1: *const OGRGeometry)
        -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry10ConvexHullEv"]
    pub fn OGRGeometry_ConvexHull(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry6BufferEdi"]
    pub fn OGRGeometry_Buffer(
        this: *mut ::std::os::raw::c_void,
        dfDist: f64,
        nQuadSegs: ::std::os::raw::c_int,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry12IntersectionEPKS_"]
    pub fn OGRGeometry_Intersection(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry5UnionEPKS_"]
    pub fn OGRGeometry_Union(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry13UnionCascadedEv"]
    pub fn OGRGeometry_UnionCascaded(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry10DifferenceEPKS_"]
    pub fn OGRGeometry_Difference(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry13SymDifferenceEPKS_"]
    pub fn OGRGeometry_SymDifference(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry8CentroidEP8OGRPoint"]
    pub fn OGRGeometry_Centroid(
        this: *mut ::std::os::raw::c_void,
        poPoint: *mut OGRPoint,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry8SimplifyEd"]
    pub fn OGRGeometry_Simplify(
        this: *mut ::std::os::raw::c_void,
        dTolerance: f64,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry21DelaunayTriangulationEdi"]
    pub fn OGRGeometry_DelaunayTriangulation(
        this: *mut ::std::os::raw::c_void,
        dfTolerance: f64,
        bOnlyEdges: ::std::os::raw::c_int,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry10PolygonizeEv"]
    pub fn OGRGeometry_Polygonize(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRGeometry10Distance3DEPKS_"]
    pub fn OGRGeometry_Distance3D(
        this: *mut ::std::os::raw::c_void,
        poOtherGeom: *const OGRGeometry,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRGeometry6swapXYEv"]
    pub fn OGRGeometry_swapXY(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRGeometryUniquePtrDeleter {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_OGRGeometryUniquePtrDeleter() {
    assert_eq!(
        ::std::mem::size_of::<OGRGeometryUniquePtrDeleter>(),
        1usize,
        concat!("Size of: ", stringify!(OGRGeometryUniquePtrDeleter))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRGeometryUniquePtrDeleter>(),
        1usize,
        concat!("Alignment of ", stringify!(OGRGeometryUniquePtrDeleter))
    );
}
pub type OGRGeometryUniquePtr = std_unique_ptr;
#[repr(C)]
#[derive(Debug)]
pub struct OGRPoint {
    pub _base: OGRGeometry,
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub m: f64,
}
#[test]
fn bindgen_test_layout_OGRPoint() {
    assert_eq!(
        ::std::mem::size_of::<OGRPoint>(),
        56usize,
        concat!("Size of: ", stringify!(OGRPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRPoint>())).x as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRPoint>())).y as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRPoint),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRPoint>())).z as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRPoint),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRPoint>())).m as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRPoint),
            "::",
            stringify!(m)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPoint9createXYMEddd"]
    pub fn OGRPoint_createXYM(x: f64, y: f64, m: f64) -> *mut OGRPoint;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPointC1Ev"]
    pub fn OGRPoint_OGRPoint(this: *mut OGRPoint);
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPointC1Edd"]
    pub fn OGRPoint_OGRPoint1(this: *mut OGRPoint, x: f64, y: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPointC1Eddd"]
    pub fn OGRPoint_OGRPoint2(this: *mut OGRPoint, x: f64, y: f64, z: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPointC1Edddd"]
    pub fn OGRPoint_OGRPoint3(this: *mut OGRPoint, x: f64, y: f64, z: f64, m: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPointC1ERKS_"]
    pub fn OGRPoint_OGRPoint4(this: *mut OGRPoint, other: *const OGRPoint);
}
impl OGRPoint {
    #[inline]
    pub unsafe fn createXYM(x: f64, y: f64, m: f64) -> *mut OGRPoint {
        OGRPoint_createXYM(x, y, m)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRPoint_OGRPoint(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(x: f64, y: f64) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRPoint_OGRPoint1(__bindgen_tmp.as_mut_ptr(), x, y);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(x: f64, y: f64, z: f64) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRPoint_OGRPoint2(__bindgen_tmp.as_mut_ptr(), x, y, z);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(x: f64, y: f64, z: f64, m: f64) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRPoint_OGRPoint3(__bindgen_tmp.as_mut_ptr(), x, y, z, m);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(other: *const OGRPoint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRPoint_OGRPoint4(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPointD1Ev"]
    pub fn OGRPoint_OGRPoint_destructor(this: *mut OGRPoint);
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint7WkbSizeEv"]
    pub fn OGRPoint_WkbSize(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPoint13importFromWkbEPKhi13OGRwkbVariantRi"]
    pub fn OGRPoint_importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint11exportToWkbE15OGRwkbByteOrderPh13OGRwkbVariant"]
    pub fn OGRPoint_exportToWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPoint13importFromWktEPPKc"]
    pub fn OGRPoint_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRPoint_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint12getDimensionEv"]
    pub fn OGRPoint_getDimension(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint5cloneEv"]
    pub fn OGRPoint_clone(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPoint5emptyEv"]
    pub fn OGRPoint_empty(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint11getEnvelopeEP11OGREnvelope"]
    pub fn OGRPoint_getEnvelope(this: *mut ::std::os::raw::c_void, psEnvelope: *mut OGREnvelope);
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint11getEnvelopeEP13OGREnvelope3D"]
    pub fn OGRPoint_getEnvelope1(this: *mut ::std::os::raw::c_void, psEnvelope: *mut OGREnvelope3D);
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPoint22setCoordinateDimensionEi"]
    pub fn OGRPoint_setCoordinateDimension(
        this: *mut ::std::os::raw::c_void,
        nDimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint6EqualsEPK11OGRGeometry"]
    pub fn OGRPoint_Equals(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint10IntersectsEPK11OGRGeometry"]
    pub fn OGRPoint_Intersects(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint6WithinEPK11OGRGeometry"]
    pub fn OGRPoint_Within(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint15getGeometryNameEv"]
    pub fn OGRPoint_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRPoint15getGeometryTypeEv"]
    pub fn OGRPoint_getGeometryType(this: *mut ::std::os::raw::c_void) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPoint9transformEP27OGRCoordinateTransformation"]
    pub fn OGRPoint_transform(
        this: *mut ::std::os::raw::c_void,
        poCT: *mut OGRCoordinateTransformation,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPoint11flattenTo2DEv"]
    pub fn OGRPoint_flattenTo2D(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRPoint6swapXYEv"]
    pub fn OGRPoint_swapXY(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
pub struct OGRPointIterator__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct OGRPointIterator {
    pub vtable_: *const OGRPointIterator__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_OGRPointIterator() {
    assert_eq!(
        ::std::mem::size_of::<OGRPointIterator>(),
        8usize,
        concat!("Size of: ", stringify!(OGRPointIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRPointIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRPointIterator))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRPointIterator7destroyEPS_"]
    pub fn OGRPointIterator_destroy(arg1: *mut OGRPointIterator);
}
impl OGRPointIterator {
    #[inline]
    pub unsafe fn destroy(arg1: *mut OGRPointIterator) {
        OGRPointIterator_destroy(arg1)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRPointIteratorD1Ev"]
    pub fn OGRPointIterator_OGRPointIterator_destructor(this: *mut OGRPointIterator);
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRCurve {
    pub _base: OGRGeometry,
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRCurve_ConstIterator {
    pub m_poPrivate: std_unique_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRCurve_ConstIterator_Private {
    _unused: [u8; 0],
}
#[test]
fn bindgen_test_layout_OGRCurve_ConstIterator() {
    assert_eq!(
        ::std::mem::size_of::<OGRCurve_ConstIterator>(),
        8usize,
        concat!("Size of: ", stringify!(OGRCurve_ConstIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRCurve_ConstIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRCurve_ConstIterator))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OGRCurve_ConstIterator>())).m_poPrivate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRCurve_ConstIterator),
            "::",
            stringify!(m_poPrivate)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRCurve13ConstIteratorC1EPKS_b"]
    pub fn OGRCurve_ConstIterator_ConstIterator(
        this: *mut OGRCurve_ConstIterator,
        poSelf: *const OGRCurve,
        bStart: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRCurve13ConstIteratorC1EOS0_"]
    pub fn OGRCurve_ConstIterator_ConstIterator1(
        this: *mut OGRCurve_ConstIterator,
        oOther: *mut OGRCurve_ConstIterator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRCurve13ConstIteratorD1Ev"]
    pub fn OGRCurve_ConstIterator_ConstIterator_destructor(this: *mut OGRCurve_ConstIterator);
}
impl OGRCurve_ConstIterator {
    #[inline]
    pub unsafe fn new(poSelf: *const OGRCurve, bStart: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCurve_ConstIterator_ConstIterator(__bindgen_tmp.as_mut_ptr(), poSelf, bStart);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(oOther: *mut OGRCurve_ConstIterator) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCurve_ConstIterator_ConstIterator1(__bindgen_tmp.as_mut_ptr(), oOther);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        OGRCurve_ConstIterator_ConstIterator_destructor(self)
    }
}
pub type OGRCurve_ChildType = OGRPoint;
#[test]
fn bindgen_test_layout_OGRCurve() {
    assert_eq!(
        ::std::mem::size_of::<OGRCurve>(),
        24usize,
        concat!("Size of: ", stringify!(OGRCurve))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRCurve>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRCurve))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRCurve5beginEv"]
    pub fn OGRCurve_begin(this: *const OGRCurve) -> OGRCurve_ConstIterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRCurve3endEv"]
    pub fn OGRCurve_end(this: *const OGRCurve) -> OGRCurve_ConstIterator;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRCurve19CastToCompoundCurveEPS_"]
    pub fn OGRCurve_CastToCompoundCurve(puCurve: *mut OGRCurve) -> *mut OGRCompoundCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRCurve16CastToLineStringEPS_"]
    pub fn OGRCurve_CastToLineString(poCurve: *mut OGRCurve) -> *mut OGRLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRCurve16CastToLinearRingEPS_"]
    pub fn OGRCurve_CastToLinearRing(poCurve: *mut OGRCurve) -> *mut OGRLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRCurveC2Ev"]
    pub fn OGRCurve_OGRCurve(this: *mut OGRCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRCurveC2ERKS_"]
    pub fn OGRCurve_OGRCurve1(this: *mut OGRCurve, other: *const OGRCurve);
}
impl OGRCurve {
    #[inline]
    pub unsafe fn begin(&self) -> OGRCurve_ConstIterator {
        OGRCurve_begin(self)
    }
    #[inline]
    pub unsafe fn end(&self) -> OGRCurve_ConstIterator {
        OGRCurve_end(self)
    }
    #[inline]
    pub unsafe fn CastToCompoundCurve(puCurve: *mut OGRCurve) -> *mut OGRCompoundCurve {
        OGRCurve_CastToCompoundCurve(puCurve)
    }
    #[inline]
    pub unsafe fn CastToLineString(poCurve: *mut OGRCurve) -> *mut OGRLineString {
        OGRCurve_CastToLineString(poCurve)
    }
    #[inline]
    pub unsafe fn CastToLinearRing(poCurve: *mut OGRCurve) -> *mut OGRLinearRing {
        OGRCurve_CastToLinearRing(poCurve)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCurve_OGRCurve(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRCurve) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCurve_OGRCurve1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRCurve13ContainsPointEPK8OGRPoint"]
    pub fn OGRCurve_ContainsPoint(
        this: *mut ::std::os::raw::c_void,
        p: *const OGRPoint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRCurve15IntersectsPointEPK8OGRPoint"]
    pub fn OGRCurve_IntersectsPoint(
        this: *mut ::std::os::raw::c_void,
        p: *const OGRPoint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN8OGRCurveD1Ev"]
    pub fn OGRCurve_OGRCurve_destructor(this: *mut OGRCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRCurve12get_IsClosedEv"]
    pub fn OGRCurve_get_IsClosed(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRCurve12getDimensionEv"]
    pub fn OGRCurve_getDimension(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8OGRCurve8IsConvexEv"]
    pub fn OGRCurve_IsConvex(this: *mut ::std::os::raw::c_void) -> OGRBoolean;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRSimpleCurve {
    pub _base: OGRCurve,
    pub nPointCount: ::std::os::raw::c_int,
    pub paoPoints: *mut OGRRawPoint,
    pub padfZ: *mut f64,
    pub padfM: *mut f64,
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRSimpleCurve_Iterator {
    pub m_poPrivate: std_unique_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRSimpleCurve_Iterator_Private {
    _unused: [u8; 0],
}
#[test]
fn bindgen_test_layout_OGRSimpleCurve_Iterator() {
    assert_eq!(
        ::std::mem::size_of::<OGRSimpleCurve_Iterator>(),
        8usize,
        concat!("Size of: ", stringify!(OGRSimpleCurve_Iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRSimpleCurve_Iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRSimpleCurve_Iterator))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OGRSimpleCurve_Iterator>())).m_poPrivate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRSimpleCurve_Iterator),
            "::",
            stringify!(m_poPrivate)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8IteratorC1EPS_i"]
    pub fn OGRSimpleCurve_Iterator_Iterator(
        this: *mut OGRSimpleCurve_Iterator,
        poSelf: *mut OGRSimpleCurve,
        nPos: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8IteratorC1EOS0_"]
    pub fn OGRSimpleCurve_Iterator_Iterator1(
        this: *mut OGRSimpleCurve_Iterator,
        oOther: *mut OGRSimpleCurve_Iterator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8IteratorD1Ev"]
    pub fn OGRSimpleCurve_Iterator_Iterator_destructor(this: *mut OGRSimpleCurve_Iterator);
}
impl OGRSimpleCurve_Iterator {
    #[inline]
    pub unsafe fn new(poSelf: *mut OGRSimpleCurve, nPos: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRSimpleCurve_Iterator_Iterator(__bindgen_tmp.as_mut_ptr(), poSelf, nPos);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(oOther: *mut OGRSimpleCurve_Iterator) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRSimpleCurve_Iterator_Iterator1(__bindgen_tmp.as_mut_ptr(), oOther);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        OGRSimpleCurve_Iterator_Iterator_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRSimpleCurve_ConstIterator {
    pub m_poPrivate: std_unique_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRSimpleCurve_ConstIterator_Private {
    _unused: [u8; 0],
}
#[test]
fn bindgen_test_layout_OGRSimpleCurve_ConstIterator() {
    assert_eq!(
        ::std::mem::size_of::<OGRSimpleCurve_ConstIterator>(),
        8usize,
        concat!("Size of: ", stringify!(OGRSimpleCurve_ConstIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRSimpleCurve_ConstIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRSimpleCurve_ConstIterator))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OGRSimpleCurve_ConstIterator>())).m_poPrivate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRSimpleCurve_ConstIterator),
            "::",
            stringify!(m_poPrivate)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve13ConstIteratorC1EPKS_i"]
    pub fn OGRSimpleCurve_ConstIterator_ConstIterator(
        this: *mut OGRSimpleCurve_ConstIterator,
        poSelf: *const OGRSimpleCurve,
        nPos: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve13ConstIteratorC1EOS0_"]
    pub fn OGRSimpleCurve_ConstIterator_ConstIterator1(
        this: *mut OGRSimpleCurve_ConstIterator,
        oOther: *mut OGRSimpleCurve_ConstIterator,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve13ConstIteratorD1Ev"]
    pub fn OGRSimpleCurve_ConstIterator_ConstIterator_destructor(
        this: *mut OGRSimpleCurve_ConstIterator,
    );
}
impl OGRSimpleCurve_ConstIterator {
    #[inline]
    pub unsafe fn new(poSelf: *const OGRSimpleCurve, nPos: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRSimpleCurve_ConstIterator_ConstIterator(__bindgen_tmp.as_mut_ptr(), poSelf, nPos);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(oOther: *mut OGRSimpleCurve_ConstIterator) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRSimpleCurve_ConstIterator_ConstIterator1(__bindgen_tmp.as_mut_ptr(), oOther);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        OGRSimpleCurve_ConstIterator_ConstIterator_destructor(self)
    }
}
pub type OGRSimpleCurve_ChildType = OGRPoint;
#[test]
fn bindgen_test_layout_OGRSimpleCurve() {
    assert_eq!(
        ::std::mem::size_of::<OGRSimpleCurve>(),
        48usize,
        concat!("Size of: ", stringify!(OGRSimpleCurve))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRSimpleCurve>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRSimpleCurve))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRSimpleCurve>())).nPointCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRSimpleCurve),
            "::",
            stringify!(nPointCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRSimpleCurve>())).paoPoints as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRSimpleCurve),
            "::",
            stringify!(paoPoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRSimpleCurve>())).padfZ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRSimpleCurve),
            "::",
            stringify!(padfZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRSimpleCurve>())).padfM as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRSimpleCurve),
            "::",
            stringify!(padfM)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve6Make3DEv"]
    pub fn OGRSimpleCurve_Make3D(this: *mut OGRSimpleCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve6Make2DEv"]
    pub fn OGRSimpleCurve_Make2D(this: *mut OGRSimpleCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve7RemoveMEv"]
    pub fn OGRSimpleCurve_RemoveM(this: *mut OGRSimpleCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve4AddMEv"]
    pub fn OGRSimpleCurve_AddM(this: *mut OGRSimpleCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve21importFromWKTListOnlyEPPKciiRP11OGRRawPointRiRPd"]
    pub fn OGRSimpleCurve_importFromWKTListOnly(
        this: *mut OGRSimpleCurve,
        ppszInput: *mut *const ::std::os::raw::c_char,
        bHasZ: ::std::os::raw::c_int,
        bHasM: ::std::os::raw::c_int,
        paoPointsIn: *mut *mut OGRRawPoint,
        nMaxPoints: *mut ::std::os::raw::c_int,
        padfZIn: *mut *mut f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve5beginEv"]
    pub fn OGRSimpleCurve_begin(this: *mut OGRSimpleCurve) -> OGRSimpleCurve_Iterator;
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve3endEv"]
    pub fn OGRSimpleCurve_end(this: *mut OGRSimpleCurve) -> OGRSimpleCurve_Iterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve5beginEv"]
    pub fn OGRSimpleCurve_begin1(this: *const OGRSimpleCurve) -> OGRSimpleCurve_ConstIterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve3endEv"]
    pub fn OGRSimpleCurve_end1(this: *const OGRSimpleCurve) -> OGRSimpleCurve_ConstIterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve8getPointEiP8OGRPoint"]
    pub fn OGRSimpleCurve_getPoint(
        this: *const OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        arg2: *mut OGRPoint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve4getZEi"]
    pub fn OGRSimpleCurve_getZ(this: *const OGRSimpleCurve, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve4getMEi"]
    pub fn OGRSimpleCurve_getM(this: *const OGRSimpleCurve, i: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve12setNumPointsEii"]
    pub fn OGRSimpleCurve_setNumPoints(
        this: *mut OGRSimpleCurve,
        nNewPointCount: ::std::os::raw::c_int,
        bZeroizeNewContent: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8setPointEiP8OGRPoint"]
    pub fn OGRSimpleCurve_setPoint(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        arg2: *mut OGRPoint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8setPointEidd"]
    pub fn OGRSimpleCurve_setPoint1(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve4setZEid"]
    pub fn OGRSimpleCurve_setZ(this: *mut OGRSimpleCurve, arg1: ::std::os::raw::c_int, arg2: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve4setMEid"]
    pub fn OGRSimpleCurve_setM(this: *mut OGRSimpleCurve, arg1: ::std::os::raw::c_int, arg2: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8setPointEiddd"]
    pub fn OGRSimpleCurve_setPoint2(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
        arg4: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve9setPointMEiddd"]
    pub fn OGRSimpleCurve_setPointM(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
        arg4: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8setPointEidddd"]
    pub fn OGRSimpleCurve_setPoint3(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve9setPointsEiPK11OGRRawPointPKd"]
    pub fn OGRSimpleCurve_setPoints(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        arg2: *const OGRRawPoint,
        arg3: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve10setPointsMEiPK11OGRRawPointPKd"]
    pub fn OGRSimpleCurve_setPointsM(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        arg2: *const OGRRawPoint,
        arg3: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve9setPointsEiPK11OGRRawPointPKdS4_"]
    pub fn OGRSimpleCurve_setPoints1(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        arg2: *const OGRRawPoint,
        arg3: *const f64,
        arg4: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve9setPointsEiPKdS1_S1_"]
    pub fn OGRSimpleCurve_setPoints2(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        padfX: *const f64,
        padfY: *const f64,
        padfZIn: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve10setPointsMEiPKdS1_S1_"]
    pub fn OGRSimpleCurve_setPointsM1(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        padfX: *const f64,
        padfY: *const f64,
        padfMIn: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve9setPointsEiPKdS1_S1_S1_"]
    pub fn OGRSimpleCurve_setPoints3(
        this: *mut OGRSimpleCurve,
        arg1: ::std::os::raw::c_int,
        padfX: *const f64,
        padfY: *const f64,
        padfZIn: *const f64,
        padfMIn: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8addPointEPK8OGRPoint"]
    pub fn OGRSimpleCurve_addPoint(this: *mut OGRSimpleCurve, arg1: *const OGRPoint);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8addPointEdd"]
    pub fn OGRSimpleCurve_addPoint1(this: *mut OGRSimpleCurve, arg1: f64, arg2: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8addPointEddd"]
    pub fn OGRSimpleCurve_addPoint2(this: *mut OGRSimpleCurve, arg1: f64, arg2: f64, arg3: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve9addPointMEddd"]
    pub fn OGRSimpleCurve_addPointM(this: *mut OGRSimpleCurve, arg1: f64, arg2: f64, arg3: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve8addPointEdddd"]
    pub fn OGRSimpleCurve_addPoint3(
        this: *mut OGRSimpleCurve,
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve9getPointsEP11OGRRawPointPd"]
    pub fn OGRSimpleCurve_getPoints(
        this: *const OGRSimpleCurve,
        arg1: *mut OGRRawPoint,
        arg2: *mut f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve9getPointsEPviS0_iS0_iS0_i"]
    pub fn OGRSimpleCurve_getPoints1(
        this: *const OGRSimpleCurve,
        pabyX: *mut ::std::os::raw::c_void,
        nXStride: ::std::os::raw::c_int,
        pabyY: *mut ::std::os::raw::c_void,
        nYStride: ::std::os::raw::c_int,
        pabyZ: *mut ::std::os::raw::c_void,
        nZStride: ::std::os::raw::c_int,
        pabyM: *mut ::std::os::raw::c_void,
        nMStride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve16addSubLineStringEPK13OGRLineStringii"]
    pub fn OGRSimpleCurve_addSubLineString(
        this: *mut OGRSimpleCurve,
        arg1: *const OGRLineString,
        nStartVertex: ::std::os::raw::c_int,
        nEndVertex: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve13reversePointsEv"]
    pub fn OGRSimpleCurve_reversePoints(this: *mut OGRSimpleCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurveC2Ev"]
    pub fn OGRSimpleCurve_OGRSimpleCurve(this: *mut OGRSimpleCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurveC2ERKS_"]
    pub fn OGRSimpleCurve_OGRSimpleCurve1(this: *mut OGRSimpleCurve, other: *const OGRSimpleCurve);
}
impl OGRSimpleCurve {
    #[inline]
    pub unsafe fn Make3D(&mut self) {
        OGRSimpleCurve_Make3D(self)
    }
    #[inline]
    pub unsafe fn Make2D(&mut self) {
        OGRSimpleCurve_Make2D(self)
    }
    #[inline]
    pub unsafe fn RemoveM(&mut self) {
        OGRSimpleCurve_RemoveM(self)
    }
    #[inline]
    pub unsafe fn AddM(&mut self) {
        OGRSimpleCurve_AddM(self)
    }
    #[inline]
    pub unsafe fn importFromWKTListOnly(
        &mut self,
        ppszInput: *mut *const ::std::os::raw::c_char,
        bHasZ: ::std::os::raw::c_int,
        bHasM: ::std::os::raw::c_int,
        paoPointsIn: *mut *mut OGRRawPoint,
        nMaxPoints: *mut ::std::os::raw::c_int,
        padfZIn: *mut *mut f64,
    ) -> OGRErr {
        OGRSimpleCurve_importFromWKTListOnly(
            self,
            ppszInput,
            bHasZ,
            bHasM,
            paoPointsIn,
            nMaxPoints,
            padfZIn,
        )
    }
    #[inline]
    pub unsafe fn begin(&mut self) -> OGRSimpleCurve_Iterator {
        OGRSimpleCurve_begin(self)
    }
    #[inline]
    pub unsafe fn end(&mut self) -> OGRSimpleCurve_Iterator {
        OGRSimpleCurve_end(self)
    }
    #[inline]
    pub unsafe fn begin1(&self) -> OGRSimpleCurve_ConstIterator {
        OGRSimpleCurve_begin1(self)
    }
    #[inline]
    pub unsafe fn end1(&self) -> OGRSimpleCurve_ConstIterator {
        OGRSimpleCurve_end1(self)
    }
    #[inline]
    pub unsafe fn getPoint(&self, arg1: ::std::os::raw::c_int, arg2: *mut OGRPoint) {
        OGRSimpleCurve_getPoint(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn getZ(&self, i: ::std::os::raw::c_int) -> f64 {
        OGRSimpleCurve_getZ(self, i)
    }
    #[inline]
    pub unsafe fn getM(&self, i: ::std::os::raw::c_int) -> f64 {
        OGRSimpleCurve_getM(self, i)
    }
    #[inline]
    pub unsafe fn setNumPoints(
        &mut self,
        nNewPointCount: ::std::os::raw::c_int,
        bZeroizeNewContent: ::std::os::raw::c_int,
    ) {
        OGRSimpleCurve_setNumPoints(self, nNewPointCount, bZeroizeNewContent)
    }
    #[inline]
    pub unsafe fn setPoint(&mut self, arg1: ::std::os::raw::c_int, arg2: *mut OGRPoint) {
        OGRSimpleCurve_setPoint(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn setPoint1(&mut self, arg1: ::std::os::raw::c_int, arg2: f64, arg3: f64) {
        OGRSimpleCurve_setPoint1(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn setZ(&mut self, arg1: ::std::os::raw::c_int, arg2: f64) {
        OGRSimpleCurve_setZ(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn setM(&mut self, arg1: ::std::os::raw::c_int, arg2: f64) {
        OGRSimpleCurve_setM(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn setPoint2(
        &mut self,
        arg1: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
        arg4: f64,
    ) {
        OGRSimpleCurve_setPoint2(self, arg1, arg2, arg3, arg4)
    }
    #[inline]
    pub unsafe fn setPointM(
        &mut self,
        arg1: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
        arg4: f64,
    ) {
        OGRSimpleCurve_setPointM(self, arg1, arg2, arg3, arg4)
    }
    #[inline]
    pub unsafe fn setPoint3(
        &mut self,
        arg1: ::std::os::raw::c_int,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
    ) {
        OGRSimpleCurve_setPoint3(self, arg1, arg2, arg3, arg4, arg5)
    }
    #[inline]
    pub unsafe fn setPoints(
        &mut self,
        arg1: ::std::os::raw::c_int,
        arg2: *const OGRRawPoint,
        arg3: *const f64,
    ) {
        OGRSimpleCurve_setPoints(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn setPointsM(
        &mut self,
        arg1: ::std::os::raw::c_int,
        arg2: *const OGRRawPoint,
        arg3: *const f64,
    ) {
        OGRSimpleCurve_setPointsM(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn setPoints1(
        &mut self,
        arg1: ::std::os::raw::c_int,
        arg2: *const OGRRawPoint,
        arg3: *const f64,
        arg4: *const f64,
    ) {
        OGRSimpleCurve_setPoints1(self, arg1, arg2, arg3, arg4)
    }
    #[inline]
    pub unsafe fn setPoints2(
        &mut self,
        arg1: ::std::os::raw::c_int,
        padfX: *const f64,
        padfY: *const f64,
        padfZIn: *const f64,
    ) {
        OGRSimpleCurve_setPoints2(self, arg1, padfX, padfY, padfZIn)
    }
    #[inline]
    pub unsafe fn setPointsM1(
        &mut self,
        arg1: ::std::os::raw::c_int,
        padfX: *const f64,
        padfY: *const f64,
        padfMIn: *const f64,
    ) {
        OGRSimpleCurve_setPointsM1(self, arg1, padfX, padfY, padfMIn)
    }
    #[inline]
    pub unsafe fn setPoints3(
        &mut self,
        arg1: ::std::os::raw::c_int,
        padfX: *const f64,
        padfY: *const f64,
        padfZIn: *const f64,
        padfMIn: *const f64,
    ) {
        OGRSimpleCurve_setPoints3(self, arg1, padfX, padfY, padfZIn, padfMIn)
    }
    #[inline]
    pub unsafe fn addPoint(&mut self, arg1: *const OGRPoint) {
        OGRSimpleCurve_addPoint(self, arg1)
    }
    #[inline]
    pub unsafe fn addPoint1(&mut self, arg1: f64, arg2: f64) {
        OGRSimpleCurve_addPoint1(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn addPoint2(&mut self, arg1: f64, arg2: f64, arg3: f64) {
        OGRSimpleCurve_addPoint2(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn addPointM(&mut self, arg1: f64, arg2: f64, arg3: f64) {
        OGRSimpleCurve_addPointM(self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn addPoint3(&mut self, arg1: f64, arg2: f64, arg3: f64, arg4: f64) {
        OGRSimpleCurve_addPoint3(self, arg1, arg2, arg3, arg4)
    }
    #[inline]
    pub unsafe fn getPoints(&self, arg1: *mut OGRRawPoint, arg2: *mut f64) {
        OGRSimpleCurve_getPoints(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn getPoints1(
        &self,
        pabyX: *mut ::std::os::raw::c_void,
        nXStride: ::std::os::raw::c_int,
        pabyY: *mut ::std::os::raw::c_void,
        nYStride: ::std::os::raw::c_int,
        pabyZ: *mut ::std::os::raw::c_void,
        nZStride: ::std::os::raw::c_int,
        pabyM: *mut ::std::os::raw::c_void,
        nMStride: ::std::os::raw::c_int,
    ) {
        OGRSimpleCurve_getPoints1(
            self, pabyX, nXStride, pabyY, nYStride, pabyZ, nZStride, pabyM, nMStride,
        )
    }
    #[inline]
    pub unsafe fn addSubLineString(
        &mut self,
        arg1: *const OGRLineString,
        nStartVertex: ::std::os::raw::c_int,
        nEndVertex: ::std::os::raw::c_int,
    ) {
        OGRSimpleCurve_addSubLineString(self, arg1, nStartVertex, nEndVertex)
    }
    #[inline]
    pub unsafe fn reversePoints(&mut self) {
        OGRSimpleCurve_reversePoints(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRSimpleCurve_OGRSimpleCurve(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRSimpleCurve) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRSimpleCurve_OGRSimpleCurve1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve14get_LinearAreaEv"]
    pub fn OGRSimpleCurve_get_LinearArea(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurveD1Ev"]
    pub fn OGRSimpleCurve_OGRSimpleCurve_destructor(this: *mut OGRSimpleCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve7WkbSizeEv"]
    pub fn OGRSimpleCurve_WkbSize(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve13importFromWkbEPKhi13OGRwkbVariantRi"]
    pub fn OGRSimpleCurve_importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve11exportToWkbE15OGRwkbByteOrderPh13OGRwkbVariant"]
    pub fn OGRSimpleCurve_exportToWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve13importFromWktEPPKc"]
    pub fn OGRSimpleCurve_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRSimpleCurve_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve5cloneEv"]
    pub fn OGRSimpleCurve_clone(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve5emptyEv"]
    pub fn OGRSimpleCurve_empty(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve11getEnvelopeEP11OGREnvelope"]
    pub fn OGRSimpleCurve_getEnvelope(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve11getEnvelopeEP13OGREnvelope3D"]
    pub fn OGRSimpleCurve_getEnvelope1(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope3D,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve7IsEmptyEv"]
    pub fn OGRSimpleCurve_IsEmpty(this: *mut ::std::os::raw::c_void) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve10get_LengthEv"]
    pub fn OGRSimpleCurve_get_Length(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve10StartPointEP8OGRPoint"]
    pub fn OGRSimpleCurve_StartPoint(this: *mut ::std::os::raw::c_void, arg1: *mut OGRPoint);
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve8EndPointEP8OGRPoint"]
    pub fn OGRSimpleCurve_EndPoint(this: *mut ::std::os::raw::c_void, arg1: *mut OGRPoint);
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve5ValueEdP8OGRPoint"]
    pub fn OGRSimpleCurve_Value(this: *mut ::std::os::raw::c_void, arg1: f64, arg2: *mut OGRPoint);
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve7ProjectEPK8OGRPoint"]
    pub fn OGRSimpleCurve_Project(this: *mut ::std::os::raw::c_void, arg1: *const OGRPoint) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve10getSubLineEddi"]
    pub fn OGRSimpleCurve_getSubLine(
        this: *mut ::std::os::raw::c_void,
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
    ) -> *mut OGRLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve6EqualsEPK11OGRGeometry"]
    pub fn OGRSimpleCurve_Equals(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve22setCoordinateDimensionEi"]
    pub fn OGRSimpleCurve_setCoordinateDimension(
        this: *mut ::std::os::raw::c_void,
        nDimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve5set3DEi"]
    pub fn OGRSimpleCurve_set3D(this: *mut ::std::os::raw::c_void, bIs3D: OGRBoolean);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve11setMeasuredEi"]
    pub fn OGRSimpleCurve_setMeasured(this: *mut ::std::os::raw::c_void, bIsMeasured: OGRBoolean);
}
extern "C" {
    #[link_name = "\u{1}_ZNK14OGRSimpleCurve16getPointIteratorEv"]
    pub fn OGRSimpleCurve_getPointIterator(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut OGRPointIterator;
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve9transformEP27OGRCoordinateTransformation"]
    pub fn OGRSimpleCurve_transform(
        this: *mut ::std::os::raw::c_void,
        poCT: *mut OGRCoordinateTransformation,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve11flattenTo2DEv"]
    pub fn OGRSimpleCurve_flattenTo2D(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve10segmentizeEd"]
    pub fn OGRSimpleCurve_segmentize(this: *mut ::std::os::raw::c_void, dfMaxLength: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN14OGRSimpleCurve6swapXYEv"]
    pub fn OGRSimpleCurve_swapXY(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRLineString {
    pub _base: OGRSimpleCurve,
}
#[test]
fn bindgen_test_layout_OGRLineString() {
    assert_eq!(
        ::std::mem::size_of::<OGRLineString>(),
        48usize,
        concat!("Size of: ", stringify!(OGRLineString))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRLineString>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRLineString))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLineString25TransferMembersAndDestroyEPS_S0_"]
    pub fn OGRLineString_TransferMembersAndDestroy(
        poSrc: *mut OGRLineString,
        poDst: *mut OGRLineString,
    ) -> *mut OGRLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLineString16CastToLinearRingEPS_"]
    pub fn OGRLineString_CastToLinearRing(poLS: *mut OGRLineString) -> *mut OGRLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLineStringC1Ev"]
    pub fn OGRLineString_OGRLineString(this: *mut OGRLineString);
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLineStringC1ERKS_"]
    pub fn OGRLineString_OGRLineString1(this: *mut OGRLineString, other: *const OGRLineString);
}
impl OGRLineString {
    #[inline]
    pub unsafe fn TransferMembersAndDestroy(
        poSrc: *mut OGRLineString,
        poDst: *mut OGRLineString,
    ) -> *mut OGRLineString {
        OGRLineString_TransferMembersAndDestroy(poSrc, poDst)
    }
    #[inline]
    pub unsafe fn CastToLinearRing(poLS: *mut OGRLineString) -> *mut OGRLinearRing {
        OGRLineString_CastToLinearRing(poLS)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRLineString_OGRLineString(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRLineString) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRLineString_OGRLineString1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLineString21GetCasterToLineStringEv"]
    pub fn OGRLineString_GetCasterToLineString(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRCurveCasterToLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLineString21GetCasterToLinearRingEv"]
    pub fn OGRLineString_GetCasterToLinearRing(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRCurveCasterToLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLineString23get_AreaOfCurveSegmentsEv"]
    pub fn OGRLineString_get_AreaOfCurveSegments(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLineStringD1Ev"]
    pub fn OGRLineString_OGRLineString_destructor(this: *mut OGRLineString);
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLineString11CurveToLineEdPKPKc"]
    pub fn OGRLineString_CurveToLine(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLineString16getCurveGeometryEPKPKc"]
    pub fn OGRLineString_getCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLineString8get_AreaEv"]
    pub fn OGRLineString_get_Area(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLineString15getGeometryTypeEv"]
    pub fn OGRLineString_getGeometryType(this: *mut ::std::os::raw::c_void) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLineString15getGeometryNameEv"]
    pub fn OGRLineString_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRLinearRing {
    pub _base: OGRLineString,
}
#[test]
fn bindgen_test_layout_OGRLinearRing() {
    assert_eq!(
        ::std::mem::size_of::<OGRLinearRing>(),
        48usize,
        concat!("Size of: ", stringify!(OGRLinearRing))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRLinearRing>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRLinearRing))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLinearRing16CastToLineStringEPS_"]
    pub fn OGRLinearRing_CastToLineString(poLR: *mut OGRLinearRing) -> *mut OGRLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing13isPointInRingEPK8OGRPointi"]
    pub fn OGRLinearRing_isPointInRing(
        this: *const OGRLinearRing,
        pt: *const OGRPoint,
        bTestEnvelope: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing21isPointOnRingBoundaryEPK8OGRPointi"]
    pub fn OGRLinearRing_isPointOnRingBoundary(
        this: *const OGRLinearRing,
        pt: *const OGRPoint,
        bTestEnvelope: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLinearRingC1Ev"]
    pub fn OGRLinearRing_OGRLinearRing(this: *mut OGRLinearRing);
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLinearRingC1ERKS_"]
    pub fn OGRLinearRing_OGRLinearRing1(this: *mut OGRLinearRing, other: *const OGRLinearRing);
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLinearRingC1EPS_"]
    pub fn OGRLinearRing_OGRLinearRing2(this: *mut OGRLinearRing, arg1: *mut OGRLinearRing);
}
impl OGRLinearRing {
    #[inline]
    pub unsafe fn CastToLineString(poLR: *mut OGRLinearRing) -> *mut OGRLineString {
        OGRLinearRing_CastToLineString(poLR)
    }
    #[inline]
    pub unsafe fn isPointInRing(
        &self,
        pt: *const OGRPoint,
        bTestEnvelope: ::std::os::raw::c_int,
    ) -> OGRBoolean {
        OGRLinearRing_isPointInRing(self, pt, bTestEnvelope)
    }
    #[inline]
    pub unsafe fn isPointOnRingBoundary(
        &self,
        pt: *const OGRPoint,
        bTestEnvelope: ::std::os::raw::c_int,
    ) -> OGRBoolean {
        OGRLinearRing_isPointOnRingBoundary(self, pt, bTestEnvelope)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRLinearRing_OGRLinearRing(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRLinearRing) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRLinearRing_OGRLinearRing1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *mut OGRLinearRing) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRLinearRing_OGRLinearRing2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing8_WkbSizeEi"]
    pub fn OGRLinearRing__WkbSize(
        this: *mut ::std::os::raw::c_void,
        _flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLinearRing14_importFromWkbE15OGRwkbByteOrderiPKhiRi"]
    pub fn OGRLinearRing__importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        _flags: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing12_exportToWkbE15OGRwkbByteOrderiPh"]
    pub fn OGRLinearRing__exportToWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        _flags: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing21GetCasterToLineStringEv"]
    pub fn OGRLinearRing_GetCasterToLineString(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRCurveCasterToLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing21GetCasterToLinearRingEv"]
    pub fn OGRLinearRing_GetCasterToLinearRing(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRCurveCasterToLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLinearRingD1Ev"]
    pub fn OGRLinearRing_OGRLinearRing_destructor(this: *mut OGRLinearRing);
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing15getGeometryNameEv"]
    pub fn OGRLinearRing_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing5cloneEv"]
    pub fn OGRLinearRing_clone(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing11isClockwiseEv"]
    pub fn OGRLinearRing_isClockwise(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLinearRing19reverseWindingOrderEv"]
    pub fn OGRLinearRing_reverseWindingOrder(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLinearRing10closeRingsEv"]
    pub fn OGRLinearRing_closeRings(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLinearRing9transformEP27OGRCoordinateTransformation"]
    pub fn OGRLinearRing_transform(
        this: *mut ::std::os::raw::c_void,
        poCT: *mut OGRCoordinateTransformation,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing7WkbSizeEv"]
    pub fn OGRLinearRing_WkbSize(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRLinearRing13importFromWkbEPKhi13OGRwkbVariantRi"]
    pub fn OGRLinearRing_importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRLinearRing11exportToWkbE15OGRwkbByteOrderPh13OGRwkbVariant"]
    pub fn OGRLinearRing_exportToWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: OGRwkbVariant,
    ) -> OGRErr;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRCircularString {
    pub _base: OGRSimpleCurve,
}
#[test]
fn bindgen_test_layout_OGRCircularString() {
    assert_eq!(
        ::std::mem::size_of::<OGRCircularString>(),
        48usize,
        concat!("Size of: ", stringify!(OGRCircularString))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRCircularString>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRCircularString))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN17OGRCircularStringC1Ev"]
    pub fn OGRCircularString_OGRCircularString(this: *mut OGRCircularString);
}
extern "C" {
    #[link_name = "\u{1}_ZN17OGRCircularStringC1ERKS_"]
    pub fn OGRCircularString_OGRCircularString1(
        this: *mut OGRCircularString,
        other: *const OGRCircularString,
    );
}
impl OGRCircularString {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCircularString_OGRCircularString(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRCircularString) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCircularString_OGRCircularString1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString21GetCasterToLineStringEv"]
    pub fn OGRCircularString_GetCasterToLineString(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRCurveCasterToLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString21GetCasterToLinearRingEv"]
    pub fn OGRCircularString_GetCasterToLinearRing(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRCurveCasterToLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString15IntersectsPointEPK8OGRPoint"]
    pub fn OGRCircularString_IntersectsPoint(
        this: *mut ::std::os::raw::c_void,
        p: *const OGRPoint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString13ContainsPointEPK8OGRPoint"]
    pub fn OGRCircularString_ContainsPoint(
        this: *mut ::std::os::raw::c_void,
        p: *const OGRPoint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString23get_AreaOfCurveSegmentsEv"]
    pub fn OGRCircularString_get_AreaOfCurveSegments(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN17OGRCircularStringD1Ev"]
    pub fn OGRCircularString_OGRCircularString_destructor(this: *mut OGRCircularString);
}
extern "C" {
    #[link_name = "\u{1}_ZN17OGRCircularString13importFromWkbEPKhi13OGRwkbVariantRi"]
    pub fn OGRCircularString_importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString11exportToWkbE15OGRwkbByteOrderPh13OGRwkbVariant"]
    pub fn OGRCircularString_exportToWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN17OGRCircularString13importFromWktEPPKc"]
    pub fn OGRCircularString_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRCircularString_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString7IsValidEv"]
    pub fn OGRCircularString_IsValid(this: *mut ::std::os::raw::c_void) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString11getEnvelopeEP11OGREnvelope"]
    pub fn OGRCircularString_getEnvelope(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString11getEnvelopeEP13OGREnvelope3D"]
    pub fn OGRCircularString_getEnvelope1(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope3D,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString10get_LengthEv"]
    pub fn OGRCircularString_get_Length(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString11CurveToLineEdPKPKc"]
    pub fn OGRCircularString_CurveToLine(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString5ValueEdP8OGRPoint"]
    pub fn OGRCircularString_Value(
        this: *mut ::std::os::raw::c_void,
        arg1: f64,
        arg2: *mut OGRPoint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString8get_AreaEv"]
    pub fn OGRCircularString_get_Area(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString15getGeometryTypeEv"]
    pub fn OGRCircularString_getGeometryType(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString15getGeometryNameEv"]
    pub fn OGRCircularString_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN17OGRCircularString10segmentizeEd"]
    pub fn OGRCircularString_segmentize(this: *mut ::std::os::raw::c_void, dfMaxLength: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString16hasCurveGeometryEi"]
    pub fn OGRCircularString_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK17OGRCircularString17getLinearGeometryEdPKPKc"]
    pub fn OGRCircularString_getLinearGeometry(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRCurveCollection {
    pub nCurveCount: ::std::os::raw::c_int,
    pub papoCurves: *mut *mut OGRCurve,
}
pub type OGRCurveCollection_ChildType = OGRCurve;
#[test]
fn bindgen_test_layout_OGRCurveCollection() {
    assert_eq!(
        ::std::mem::size_of::<OGRCurveCollection>(),
        16usize,
        concat!("Size of: ", stringify!(OGRCurveCollection))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRCurveCollection>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRCurveCollection))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRCurveCollection>())).nCurveCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRCurveCollection),
            "::",
            stringify!(nCurveCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRCurveCollection>())).papoCurves as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRCurveCollection),
            "::",
            stringify!(papoCurves)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection5emptyEP11OGRGeometry"]
    pub fn OGRCurveCollection_empty(this: *mut OGRCurveCollection, poGeom: *mut OGRGeometry);
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRCurveCollection7IsEmptyEv"]
    pub fn OGRCurveCollection_IsEmpty(this: *const OGRCurveCollection) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRCurveCollection11getEnvelopeEP11OGREnvelope"]
    pub fn OGRCurveCollection_getEnvelope(
        this: *const OGRCurveCollection,
        psEnvelope: *mut OGREnvelope,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRCurveCollection11getEnvelopeEP13OGREnvelope3D"]
    pub fn OGRCurveCollection_getEnvelope1(
        this: *const OGRCurveCollection,
        psEnvelope: *mut OGREnvelope3D,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection16addCurveDirectlyEP11OGRGeometryP8OGRCurvei"]
    pub fn OGRCurveCollection_addCurveDirectly(
        this: *mut OGRCurveCollection,
        poGeom: *mut OGRGeometry,
        poCurve: *mut OGRCurve,
        bNeedRealloc: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRCurveCollection7WkbSizeEv"]
    pub fn OGRCurveCollection_WkbSize(this: *const OGRCurveCollection) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection21importPreambleFromWkbEP11OGRGeometryPKhRiS4_R15OGRwkbByteOrderi13OGRwkbVariant"]
    pub fn OGRCurveCollection_importPreambleFromWkb(
        this: *mut OGRCurveCollection,
        poGeom: *mut OGRGeometry,
        pabyData: *const ::std::os::raw::c_uchar,
        nSize: *mut ::std::os::raw::c_int,
        nDataOffset: *mut ::std::os::raw::c_int,
        eByteOrder: *mut OGRwkbByteOrder,
        nMinSubGeomSize: ::std::os::raw::c_int,
        eWkbVariant: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection17importBodyFromWkbEP11OGRGeometryPKhiiPFiS1_P8OGRCurveE13OGRwkbVariantRi"]
    pub fn OGRCurveCollection_importBodyFromWkb(
        this: *mut OGRCurveCollection,
        poGeom: *mut OGRGeometry,
        pabyData: *const ::std::os::raw::c_uchar,
        nSize: ::std::os::raw::c_int,
        bAcceptCompoundCurve: ::std::os::raw::c_int,
        pfnAddCurveDirectlyFromWkb: ::std::option::Option<
            unsafe extern "C" fn(poGeom: *mut OGRGeometry, poCurve: *mut OGRCurve) -> OGRErr,
        >,
        eWkbVariant: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRCurveCollection11exportToWktB5cxx11EPK11OGRGeometryRK13OGRWktOptionsPi"]
    pub fn OGRCurveCollection_exportToWkt(
        this: *const OGRCurveCollection,
        geom: *const OGRGeometry,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRCurveCollection11exportToWkbEPK11OGRGeometry15OGRwkbByteOrderPh13OGRwkbVariant"]
    pub fn OGRCurveCollection_exportToWkb(
        this: *const OGRCurveCollection,
        poGeom: *const OGRGeometry,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        eWkbVariant: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRCurveCollection6EqualsEPKS_"]
    pub fn OGRCurveCollection_Equals(
        this: *const OGRCurveCollection,
        poOCC: *const OGRCurveCollection,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection22setCoordinateDimensionEP11OGRGeometryi"]
    pub fn OGRCurveCollection_setCoordinateDimension(
        this: *mut OGRCurveCollection,
        poGeom: *mut OGRGeometry,
        nNewDimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection5set3DEP11OGRGeometryi"]
    pub fn OGRCurveCollection_set3D(
        this: *mut OGRCurveCollection,
        poGeom: *mut OGRGeometry,
        bIs3D: OGRBoolean,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection11setMeasuredEP11OGRGeometryi"]
    pub fn OGRCurveCollection_setMeasured(
        this: *mut OGRCurveCollection,
        poGeom: *mut OGRGeometry,
        bIsMeasured: OGRBoolean,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection22assignSpatialReferenceEP11OGRGeometryP19OGRSpatialReference"]
    pub fn OGRCurveCollection_assignSpatialReference(
        this: *mut OGRCurveCollection,
        poGeom: *mut OGRGeometry,
        poSR: *mut OGRSpatialReference,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRCurveCollection12getNumCurvesEv"]
    pub fn OGRCurveCollection_getNumCurves(
        this: *const OGRCurveCollection,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection8getCurveEi"]
    pub fn OGRCurveCollection_getCurve(
        this: *mut OGRCurveCollection,
        arg1: ::std::os::raw::c_int,
    ) -> *mut OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRCurveCollection8getCurveEi"]
    pub fn OGRCurveCollection_getCurve1(
        this: *const OGRCurveCollection,
        arg1: ::std::os::raw::c_int,
    ) -> *const OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection10stealCurveEi"]
    pub fn OGRCurveCollection_stealCurve(
        this: *mut OGRCurveCollection,
        arg1: ::std::os::raw::c_int,
    ) -> *mut OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection11removeCurveEib"]
    pub fn OGRCurveCollection_removeCurve(
        this: *mut OGRCurveCollection,
        iIndex: ::std::os::raw::c_int,
        bDelete: bool,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection9transformEP11OGRGeometryP27OGRCoordinateTransformation"]
    pub fn OGRCurveCollection_transform(
        this: *mut OGRCurveCollection,
        poGeom: *mut OGRGeometry,
        poCT: *mut OGRCoordinateTransformation,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection11flattenTo2DEP11OGRGeometry"]
    pub fn OGRCurveCollection_flattenTo2D(this: *mut OGRCurveCollection, poGeom: *mut OGRGeometry);
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection10segmentizeEd"]
    pub fn OGRCurveCollection_segmentize(this: *mut OGRCurveCollection, dfMaxLength: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollection6swapXYEv"]
    pub fn OGRCurveCollection_swapXY(this: *mut OGRCurveCollection);
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRCurveCollection16hasCurveGeometryEi"]
    pub fn OGRCurveCollection_hasCurveGeometry(
        this: *const OGRCurveCollection,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollectionC1Ev"]
    pub fn OGRCurveCollection_OGRCurveCollection(this: *mut OGRCurveCollection);
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollectionC1ERKS_"]
    pub fn OGRCurveCollection_OGRCurveCollection1(
        this: *mut OGRCurveCollection,
        other: *const OGRCurveCollection,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRCurveCollectionD1Ev"]
    pub fn OGRCurveCollection_OGRCurveCollection_destructor(this: *mut OGRCurveCollection);
}
impl OGRCurveCollection {
    #[inline]
    pub unsafe fn empty(&mut self, poGeom: *mut OGRGeometry) {
        OGRCurveCollection_empty(self, poGeom)
    }
    #[inline]
    pub unsafe fn IsEmpty(&self) -> OGRBoolean {
        OGRCurveCollection_IsEmpty(self)
    }
    #[inline]
    pub unsafe fn getEnvelope(&self, psEnvelope: *mut OGREnvelope) {
        OGRCurveCollection_getEnvelope(self, psEnvelope)
    }
    #[inline]
    pub unsafe fn getEnvelope1(&self, psEnvelope: *mut OGREnvelope3D) {
        OGRCurveCollection_getEnvelope1(self, psEnvelope)
    }
    #[inline]
    pub unsafe fn addCurveDirectly(
        &mut self,
        poGeom: *mut OGRGeometry,
        poCurve: *mut OGRCurve,
        bNeedRealloc: ::std::os::raw::c_int,
    ) -> OGRErr {
        OGRCurveCollection_addCurveDirectly(self, poGeom, poCurve, bNeedRealloc)
    }
    #[inline]
    pub unsafe fn WkbSize(&self) -> ::std::os::raw::c_int {
        OGRCurveCollection_WkbSize(self)
    }
    #[inline]
    pub unsafe fn importPreambleFromWkb(
        &mut self,
        poGeom: *mut OGRGeometry,
        pabyData: *const ::std::os::raw::c_uchar,
        nSize: *mut ::std::os::raw::c_int,
        nDataOffset: *mut ::std::os::raw::c_int,
        eByteOrder: *mut OGRwkbByteOrder,
        nMinSubGeomSize: ::std::os::raw::c_int,
        eWkbVariant: OGRwkbVariant,
    ) -> OGRErr {
        OGRCurveCollection_importPreambleFromWkb(
            self,
            poGeom,
            pabyData,
            nSize,
            nDataOffset,
            eByteOrder,
            nMinSubGeomSize,
            eWkbVariant,
        )
    }
    #[inline]
    pub unsafe fn importBodyFromWkb(
        &mut self,
        poGeom: *mut OGRGeometry,
        pabyData: *const ::std::os::raw::c_uchar,
        nSize: ::std::os::raw::c_int,
        bAcceptCompoundCurve: ::std::os::raw::c_int,
        pfnAddCurveDirectlyFromWkb: ::std::option::Option<
            unsafe extern "C" fn(poGeom: *mut OGRGeometry, poCurve: *mut OGRCurve) -> OGRErr,
        >,
        eWkbVariant: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr {
        OGRCurveCollection_importBodyFromWkb(
            self,
            poGeom,
            pabyData,
            nSize,
            bAcceptCompoundCurve,
            pfnAddCurveDirectlyFromWkb,
            eWkbVariant,
            nBytesConsumedOut,
        )
    }
    #[inline]
    pub unsafe fn exportToWkt(
        &self,
        geom: *const OGRGeometry,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string {
        OGRCurveCollection_exportToWkt(self, geom, opts, err)
    }
    #[inline]
    pub unsafe fn exportToWkb(
        &self,
        poGeom: *const OGRGeometry,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        eWkbVariant: OGRwkbVariant,
    ) -> OGRErr {
        OGRCurveCollection_exportToWkb(self, poGeom, arg1, arg2, eWkbVariant)
    }
    #[inline]
    pub unsafe fn Equals(&self, poOCC: *const OGRCurveCollection) -> OGRBoolean {
        OGRCurveCollection_Equals(self, poOCC)
    }
    #[inline]
    pub unsafe fn setCoordinateDimension(
        &mut self,
        poGeom: *mut OGRGeometry,
        nNewDimension: ::std::os::raw::c_int,
    ) {
        OGRCurveCollection_setCoordinateDimension(self, poGeom, nNewDimension)
    }
    #[inline]
    pub unsafe fn set3D(&mut self, poGeom: *mut OGRGeometry, bIs3D: OGRBoolean) {
        OGRCurveCollection_set3D(self, poGeom, bIs3D)
    }
    #[inline]
    pub unsafe fn setMeasured(&mut self, poGeom: *mut OGRGeometry, bIsMeasured: OGRBoolean) {
        OGRCurveCollection_setMeasured(self, poGeom, bIsMeasured)
    }
    #[inline]
    pub unsafe fn assignSpatialReference(
        &mut self,
        poGeom: *mut OGRGeometry,
        poSR: *mut OGRSpatialReference,
    ) {
        OGRCurveCollection_assignSpatialReference(self, poGeom, poSR)
    }
    #[inline]
    pub unsafe fn getNumCurves(&self) -> ::std::os::raw::c_int {
        OGRCurveCollection_getNumCurves(self)
    }
    #[inline]
    pub unsafe fn getCurve(&mut self, arg1: ::std::os::raw::c_int) -> *mut OGRCurve {
        OGRCurveCollection_getCurve(self, arg1)
    }
    #[inline]
    pub unsafe fn getCurve1(&self, arg1: ::std::os::raw::c_int) -> *const OGRCurve {
        OGRCurveCollection_getCurve1(self, arg1)
    }
    #[inline]
    pub unsafe fn stealCurve(&mut self, arg1: ::std::os::raw::c_int) -> *mut OGRCurve {
        OGRCurveCollection_stealCurve(self, arg1)
    }
    #[inline]
    pub unsafe fn removeCurve(&mut self, iIndex: ::std::os::raw::c_int, bDelete: bool) -> OGRErr {
        OGRCurveCollection_removeCurve(self, iIndex, bDelete)
    }
    #[inline]
    pub unsafe fn transform(
        &mut self,
        poGeom: *mut OGRGeometry,
        poCT: *mut OGRCoordinateTransformation,
    ) -> OGRErr {
        OGRCurveCollection_transform(self, poGeom, poCT)
    }
    #[inline]
    pub unsafe fn flattenTo2D(&mut self, poGeom: *mut OGRGeometry) {
        OGRCurveCollection_flattenTo2D(self, poGeom)
    }
    #[inline]
    pub unsafe fn segmentize(&mut self, dfMaxLength: f64) {
        OGRCurveCollection_segmentize(self, dfMaxLength)
    }
    #[inline]
    pub unsafe fn swapXY(&mut self) {
        OGRCurveCollection_swapXY(self)
    }
    #[inline]
    pub unsafe fn hasCurveGeometry(&self, bLookForNonLinear: ::std::os::raw::c_int) -> OGRBoolean {
        OGRCurveCollection_hasCurveGeometry(self, bLookForNonLinear)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCurveCollection_OGRCurveCollection(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRCurveCollection) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCurveCollection_OGRCurveCollection1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        OGRCurveCollection_OGRCurveCollection_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRCompoundCurve {
    pub _base: OGRCurve,
    pub oCC: OGRCurveCollection,
}
pub type OGRCompoundCurve_ChildType = OGRCurve;
#[test]
fn bindgen_test_layout_OGRCompoundCurve() {
    assert_eq!(
        ::std::mem::size_of::<OGRCompoundCurve>(),
        40usize,
        concat!("Size of: ", stringify!(OGRCompoundCurve))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRCompoundCurve>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRCompoundCurve))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRCompoundCurve>())).oCC as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRCompoundCurve),
            "::",
            stringify!(oCC)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve16CastToLineStringEPS_"]
    pub fn OGRCompoundCurve_CastToLineString(poCC: *mut OGRCompoundCurve) -> *mut OGRLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve16CastToLinearRingEPS_"]
    pub fn OGRCompoundCurve_CastToLinearRing(poCC: *mut OGRCompoundCurve) -> *mut OGRLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve12getNumCurvesEv"]
    pub fn OGRCompoundCurve_getNumCurves(this: *const OGRCompoundCurve) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve8getCurveEi"]
    pub fn OGRCompoundCurve_getCurve(
        this: *mut OGRCompoundCurve,
        arg1: ::std::os::raw::c_int,
    ) -> *mut OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve8getCurveEi"]
    pub fn OGRCompoundCurve_getCurve1(
        this: *const OGRCompoundCurve,
        arg1: ::std::os::raw::c_int,
    ) -> *const OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve8addCurveEP8OGRCurved"]
    pub fn OGRCompoundCurve_addCurve(
        this: *mut OGRCompoundCurve,
        arg1: *mut OGRCurve,
        dfToleranceEps: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve16addCurveDirectlyEP8OGRCurved"]
    pub fn OGRCompoundCurve_addCurveDirectly(
        this: *mut OGRCompoundCurve,
        arg1: *mut OGRCurve,
        dfToleranceEps: f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve10stealCurveEi"]
    pub fn OGRCompoundCurve_stealCurve(
        this: *mut OGRCompoundCurve,
        arg1: ::std::os::raw::c_int,
    ) -> *mut OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurveC1Ev"]
    pub fn OGRCompoundCurve_OGRCompoundCurve(this: *mut OGRCompoundCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurveC1ERKS_"]
    pub fn OGRCompoundCurve_OGRCompoundCurve1(
        this: *mut OGRCompoundCurve,
        other: *const OGRCompoundCurve,
    );
}
impl OGRCompoundCurve {
    #[inline]
    pub unsafe fn CastToLineString(poCC: *mut OGRCompoundCurve) -> *mut OGRLineString {
        OGRCompoundCurve_CastToLineString(poCC)
    }
    #[inline]
    pub unsafe fn CastToLinearRing(poCC: *mut OGRCompoundCurve) -> *mut OGRLinearRing {
        OGRCompoundCurve_CastToLinearRing(poCC)
    }
    #[inline]
    pub unsafe fn getNumCurves(&self) -> ::std::os::raw::c_int {
        OGRCompoundCurve_getNumCurves(self)
    }
    #[inline]
    pub unsafe fn getCurve(&mut self, arg1: ::std::os::raw::c_int) -> *mut OGRCurve {
        OGRCompoundCurve_getCurve(self, arg1)
    }
    #[inline]
    pub unsafe fn getCurve1(&self, arg1: ::std::os::raw::c_int) -> *const OGRCurve {
        OGRCompoundCurve_getCurve1(self, arg1)
    }
    #[inline]
    pub unsafe fn addCurve(&mut self, arg1: *mut OGRCurve, dfToleranceEps: f64) -> OGRErr {
        OGRCompoundCurve_addCurve(self, arg1, dfToleranceEps)
    }
    #[inline]
    pub unsafe fn addCurveDirectly(&mut self, arg1: *mut OGRCurve, dfToleranceEps: f64) -> OGRErr {
        OGRCompoundCurve_addCurveDirectly(self, arg1, dfToleranceEps)
    }
    #[inline]
    pub unsafe fn stealCurve(&mut self, arg1: ::std::os::raw::c_int) -> *mut OGRCurve {
        OGRCompoundCurve_stealCurve(self, arg1)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCompoundCurve_OGRCompoundCurve(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRCompoundCurve) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCompoundCurve_OGRCompoundCurve1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve21GetCasterToLineStringEv"]
    pub fn OGRCompoundCurve_GetCasterToLineString(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRCurveCasterToLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve21GetCasterToLinearRingEv"]
    pub fn OGRCompoundCurve_GetCasterToLinearRing(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRCurveCasterToLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurveD1Ev"]
    pub fn OGRCompoundCurve_OGRCompoundCurve_destructor(this: *mut OGRCompoundCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve7WkbSizeEv"]
    pub fn OGRCompoundCurve_WkbSize(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve13importFromWkbEPKhi13OGRwkbVariantRi"]
    pub fn OGRCompoundCurve_importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve11exportToWkbE15OGRwkbByteOrderPh13OGRwkbVariant"]
    pub fn OGRCompoundCurve_exportToWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve13importFromWktEPPKc"]
    pub fn OGRCompoundCurve_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRCompoundCurve_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve5cloneEv"]
    pub fn OGRCompoundCurve_clone(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve5emptyEv"]
    pub fn OGRCompoundCurve_empty(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve11getEnvelopeEP11OGREnvelope"]
    pub fn OGRCompoundCurve_getEnvelope(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve11getEnvelopeEP13OGREnvelope3D"]
    pub fn OGRCompoundCurve_getEnvelope1(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope3D,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve7IsEmptyEv"]
    pub fn OGRCompoundCurve_IsEmpty(this: *mut ::std::os::raw::c_void) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve10get_LengthEv"]
    pub fn OGRCompoundCurve_get_Length(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve10StartPointEP8OGRPoint"]
    pub fn OGRCompoundCurve_StartPoint(this: *mut ::std::os::raw::c_void, arg1: *mut OGRPoint);
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve8EndPointEP8OGRPoint"]
    pub fn OGRCompoundCurve_EndPoint(this: *mut ::std::os::raw::c_void, arg1: *mut OGRPoint);
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve5ValueEdP8OGRPoint"]
    pub fn OGRCompoundCurve_Value(
        this: *mut ::std::os::raw::c_void,
        arg1: f64,
        arg2: *mut OGRPoint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve11CurveToLineEdPKPKc"]
    pub fn OGRCompoundCurve_CurveToLine(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve12getNumPointsEv"]
    pub fn OGRCompoundCurve_getNumPoints(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve23get_AreaOfCurveSegmentsEv"]
    pub fn OGRCompoundCurve_get_AreaOfCurveSegments(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve8get_AreaEv"]
    pub fn OGRCompoundCurve_get_Area(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve6EqualsEPK11OGRGeometry"]
    pub fn OGRCompoundCurve_Equals(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve22setCoordinateDimensionEi"]
    pub fn OGRCompoundCurve_setCoordinateDimension(
        this: *mut ::std::os::raw::c_void,
        nDimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve5set3DEi"]
    pub fn OGRCompoundCurve_set3D(this: *mut ::std::os::raw::c_void, bIs3D: OGRBoolean);
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve11setMeasuredEi"]
    pub fn OGRCompoundCurve_setMeasured(this: *mut ::std::os::raw::c_void, bIsMeasured: OGRBoolean);
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve22assignSpatialReferenceEP19OGRSpatialReference"]
    pub fn OGRCompoundCurve_assignSpatialReference(
        this: *mut ::std::os::raw::c_void,
        poSR: *mut OGRSpatialReference,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve16getPointIteratorEv"]
    pub fn OGRCompoundCurve_getPointIterator(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut OGRPointIterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve15getGeometryTypeEv"]
    pub fn OGRCompoundCurve_getGeometryType(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve15getGeometryNameEv"]
    pub fn OGRCompoundCurve_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve9transformEP27OGRCoordinateTransformation"]
    pub fn OGRCompoundCurve_transform(
        this: *mut ::std::os::raw::c_void,
        poCT: *mut OGRCoordinateTransformation,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve11flattenTo2DEv"]
    pub fn OGRCompoundCurve_flattenTo2D(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve10segmentizeEd"]
    pub fn OGRCompoundCurve_segmentize(this: *mut ::std::os::raw::c_void, dfMaxLength: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve16hasCurveGeometryEi"]
    pub fn OGRCompoundCurve_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16OGRCompoundCurve17getLinearGeometryEdPKPKc"]
    pub fn OGRCompoundCurve_getLinearGeometry(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN16OGRCompoundCurve6swapXYEv"]
    pub fn OGRCompoundCurve_swapXY(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRSurface {
    pub _base: OGRGeometry,
}
#[test]
fn bindgen_test_layout_OGRSurface() {
    assert_eq!(
        ::std::mem::size_of::<OGRSurface>(),
        24usize,
        concat!("Size of: ", stringify!(OGRSurface))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRSurface>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRSurface))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRSurface13CastToPolygonEPS_"]
    pub fn OGRSurface_CastToPolygon(poSurface: *mut OGRSurface) -> *mut OGRPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRSurface18CastToCurvePolygonEPS_"]
    pub fn OGRSurface_CastToCurvePolygon(poSurface: *mut OGRSurface) -> *mut OGRCurvePolygon;
}
impl OGRSurface {
    #[inline]
    pub unsafe fn CastToPolygon(poSurface: *mut OGRSurface) -> *mut OGRPolygon {
        OGRSurface_CastToPolygon(poSurface)
    }
    #[inline]
    pub unsafe fn CastToCurvePolygon(poSurface: *mut OGRSurface) -> *mut OGRCurvePolygon {
        OGRSurface_CastToCurvePolygon(poSurface)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRCurvePolygon {
    pub _base: OGRSurface,
    pub oCC: OGRCurveCollection,
}
pub type OGRCurvePolygon_ChildType = OGRCurve;
#[test]
fn bindgen_test_layout_OGRCurvePolygon() {
    assert_eq!(
        ::std::mem::size_of::<OGRCurvePolygon>(),
        40usize,
        concat!("Size of: ", stringify!(OGRCurvePolygon))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRCurvePolygon>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRCurvePolygon))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRCurvePolygon>())).oCC as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRCurvePolygon),
            "::",
            stringify!(oCC)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon13CastToPolygonEPS_"]
    pub fn OGRCurvePolygon_CastToPolygon(poCP: *mut OGRCurvePolygon) -> *mut OGRPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon20getExteriorRingCurveEv"]
    pub fn OGRCurvePolygon_getExteriorRingCurve(this: *mut OGRCurvePolygon) -> *mut OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon20getExteriorRingCurveEv"]
    pub fn OGRCurvePolygon_getExteriorRingCurve1(this: *const OGRCurvePolygon) -> *const OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon19getNumInteriorRingsEv"]
    pub fn OGRCurvePolygon_getNumInteriorRings(
        this: *const OGRCurvePolygon,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon20getInteriorRingCurveEi"]
    pub fn OGRCurvePolygon_getInteriorRingCurve(
        this: *mut OGRCurvePolygon,
        arg1: ::std::os::raw::c_int,
    ) -> *mut OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon20getInteriorRingCurveEi"]
    pub fn OGRCurvePolygon_getInteriorRingCurve1(
        this: *const OGRCurvePolygon,
        arg1: ::std::os::raw::c_int,
    ) -> *const OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon22stealExteriorRingCurveEv"]
    pub fn OGRCurvePolygon_stealExteriorRingCurve(this: *mut OGRCurvePolygon) -> *mut OGRCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon10removeRingEib"]
    pub fn OGRCurvePolygon_removeRing(
        this: *mut OGRCurvePolygon,
        iIndex: ::std::os::raw::c_int,
        bDelete: bool,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygonC1Ev"]
    pub fn OGRCurvePolygon_OGRCurvePolygon(this: *mut OGRCurvePolygon);
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygonC1ERKS_"]
    pub fn OGRCurvePolygon_OGRCurvePolygon1(
        this: *mut OGRCurvePolygon,
        arg1: *const OGRCurvePolygon,
    );
}
impl OGRCurvePolygon {
    #[inline]
    pub unsafe fn CastToPolygon(poCP: *mut OGRCurvePolygon) -> *mut OGRPolygon {
        OGRCurvePolygon_CastToPolygon(poCP)
    }
    #[inline]
    pub unsafe fn getExteriorRingCurve(&mut self) -> *mut OGRCurve {
        OGRCurvePolygon_getExteriorRingCurve(self)
    }
    #[inline]
    pub unsafe fn getExteriorRingCurve1(&self) -> *const OGRCurve {
        OGRCurvePolygon_getExteriorRingCurve1(self)
    }
    #[inline]
    pub unsafe fn getNumInteriorRings(&self) -> ::std::os::raw::c_int {
        OGRCurvePolygon_getNumInteriorRings(self)
    }
    #[inline]
    pub unsafe fn getInteriorRingCurve(&mut self, arg1: ::std::os::raw::c_int) -> *mut OGRCurve {
        OGRCurvePolygon_getInteriorRingCurve(self, arg1)
    }
    #[inline]
    pub unsafe fn getInteriorRingCurve1(&self, arg1: ::std::os::raw::c_int) -> *const OGRCurve {
        OGRCurvePolygon_getInteriorRingCurve1(self, arg1)
    }
    #[inline]
    pub unsafe fn stealExteriorRingCurve(&mut self) -> *mut OGRCurve {
        OGRCurvePolygon_stealExteriorRingCurve(self)
    }
    #[inline]
    pub unsafe fn removeRing(&mut self, iIndex: ::std::os::raw::c_int, bDelete: bool) -> OGRErr {
        OGRCurvePolygon_removeRing(self, iIndex, bDelete)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCurvePolygon_OGRCurvePolygon(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const OGRCurvePolygon) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRCurvePolygon_OGRCurvePolygon1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon18GetCasterToPolygonEv"]
    pub fn OGRCurvePolygon_GetCasterToPolygon(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRSurfaceCasterToPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon23GetCasterToCurvePolygonEv"]
    pub fn OGRCurvePolygon_GetCasterToCurvePolygon(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRSurfaceCasterToCurvePolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygonD1Ev"]
    pub fn OGRCurvePolygon_OGRCurvePolygon_destructor(this: *mut OGRCurvePolygon);
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon15getGeometryNameEv"]
    pub fn OGRCurvePolygon_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon15getGeometryTypeEv"]
    pub fn OGRCurvePolygon_getGeometryType(this: *mut ::std::os::raw::c_void)
        -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon5cloneEv"]
    pub fn OGRCurvePolygon_clone(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon5emptyEv"]
    pub fn OGRCurvePolygon_empty(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon9transformEP27OGRCoordinateTransformation"]
    pub fn OGRCurvePolygon_transform(
        this: *mut ::std::os::raw::c_void,
        poCT: *mut OGRCoordinateTransformation,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon11flattenTo2DEv"]
    pub fn OGRCurvePolygon_flattenTo2D(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon7IsEmptyEv"]
    pub fn OGRCurvePolygon_IsEmpty(this: *mut ::std::os::raw::c_void) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon10segmentizeEd"]
    pub fn OGRCurvePolygon_segmentize(this: *mut ::std::os::raw::c_void, dfMaxLength: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon16hasCurveGeometryEi"]
    pub fn OGRCurvePolygon_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon17getLinearGeometryEdPKPKc"]
    pub fn OGRCurvePolygon_getLinearGeometry(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon8get_AreaEv"]
    pub fn OGRCurvePolygon_get_Area(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon7WkbSizeEv"]
    pub fn OGRCurvePolygon_WkbSize(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon13importFromWkbEPKhi13OGRwkbVariantRi"]
    pub fn OGRCurvePolygon_importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon11exportToWkbE15OGRwkbByteOrderPh13OGRwkbVariant"]
    pub fn OGRCurvePolygon_exportToWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon13importFromWktEPPKc"]
    pub fn OGRCurvePolygon_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRCurvePolygon_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon12getDimensionEv"]
    pub fn OGRCurvePolygon_getDimension(this: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon11getEnvelopeEP11OGREnvelope"]
    pub fn OGRCurvePolygon_getEnvelope(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon11getEnvelopeEP13OGREnvelope3D"]
    pub fn OGRCurvePolygon_getEnvelope1(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope3D,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon15CurvePolyToPolyEdPKPKc"]
    pub fn OGRCurvePolygon_CurvePolyToPoly(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon6EqualsEPK11OGRGeometry"]
    pub fn OGRCurvePolygon_Equals(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon10IntersectsEPK11OGRGeometry"]
    pub fn OGRCurvePolygon_Intersects(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRCurvePolygon8ContainsEPK11OGRGeometry"]
    pub fn OGRCurvePolygon_Contains(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon22setCoordinateDimensionEi"]
    pub fn OGRCurvePolygon_setCoordinateDimension(
        this: *mut ::std::os::raw::c_void,
        nDimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon5set3DEi"]
    pub fn OGRCurvePolygon_set3D(this: *mut ::std::os::raw::c_void, bIs3D: OGRBoolean);
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon11setMeasuredEi"]
    pub fn OGRCurvePolygon_setMeasured(this: *mut ::std::os::raw::c_void, bIsMeasured: OGRBoolean);
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon22assignSpatialReferenceEP19OGRSpatialReference"]
    pub fn OGRCurvePolygon_assignSpatialReference(
        this: *mut ::std::os::raw::c_void,
        poSR: *mut OGRSpatialReference,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon7addRingEP8OGRCurve"]
    pub fn OGRCurvePolygon_addRing(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRCurve,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon15addRingDirectlyEP8OGRCurve"]
    pub fn OGRCurvePolygon_addRingDirectly(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRCurve,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRCurvePolygon6swapXYEv"]
    pub fn OGRCurvePolygon_swapXY(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRPolygon {
    pub _base: OGRCurvePolygon,
}
pub type OGRPolygon_ChildType = OGRLinearRing;
#[test]
fn bindgen_test_layout_OGRPolygon() {
    assert_eq!(
        ::std::mem::size_of::<OGRPolygon>(),
        40usize,
        concat!("Size of: ", stringify!(OGRPolygon))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRPolygon>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRPolygon))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygon18CastToCurvePolygonEPS_"]
    pub fn OGRPolygon_CastToCurvePolygon(poPoly: *mut OGRPolygon) -> *mut OGRCurvePolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygon15getExteriorRingEv"]
    pub fn OGRPolygon_getExteriorRing(this: *mut OGRPolygon) -> *mut OGRLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon15getExteriorRingEv"]
    pub fn OGRPolygon_getExteriorRing1(this: *const OGRPolygon) -> *const OGRLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygon17stealExteriorRingEv"]
    pub fn OGRPolygon_stealExteriorRing(this: *mut OGRPolygon) -> *mut OGRLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon16IsPointOnSurfaceEPK8OGRPoint"]
    pub fn OGRPolygon_IsPointOnSurface(
        this: *const OGRPolygon,
        arg1: *const OGRPoint,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygonC1Ev"]
    pub fn OGRPolygon_OGRPolygon(this: *mut OGRPolygon);
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygonC1ERKS_"]
    pub fn OGRPolygon_OGRPolygon1(this: *mut OGRPolygon, other: *const OGRPolygon);
}
impl OGRPolygon {
    #[inline]
    pub unsafe fn CastToCurvePolygon(poPoly: *mut OGRPolygon) -> *mut OGRCurvePolygon {
        OGRPolygon_CastToCurvePolygon(poPoly)
    }
    #[inline]
    pub unsafe fn getExteriorRing(&mut self) -> *mut OGRLinearRing {
        OGRPolygon_getExteriorRing(self)
    }
    #[inline]
    pub unsafe fn getExteriorRing1(&self) -> *const OGRLinearRing {
        OGRPolygon_getExteriorRing1(self)
    }
    #[inline]
    pub unsafe fn stealExteriorRing(&mut self) -> *mut OGRLinearRing {
        OGRPolygon_stealExteriorRing(self)
    }
    #[inline]
    pub unsafe fn IsPointOnSurface(&self, arg1: *const OGRPoint) -> OGRBoolean {
        OGRPolygon_IsPointOnSurface(self, arg1)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRPolygon_OGRPolygon(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRPolygon) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRPolygon_OGRPolygon1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon9checkRingEP8OGRCurve"]
    pub fn OGRPolygon_checkRing(
        this: *mut ::std::os::raw::c_void,
        poNewRing: *mut OGRCurve,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygon21importFromWKTListOnlyEPPKciiRP11OGRRawPointRiRPd"]
    pub fn OGRPolygon_importFromWKTListOnly(
        this: *mut ::std::os::raw::c_void,
        ppszInput: *mut *const ::std::os::raw::c_char,
        bHasZ: ::std::os::raw::c_int,
        bHasM: ::std::os::raw::c_int,
        paoPoints: *mut *mut OGRRawPoint,
        nMaxPoints: *mut ::std::os::raw::c_int,
        padfZ: *mut *mut f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon18GetCasterToPolygonEv"]
    pub fn OGRPolygon_GetCasterToPolygon(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRSurfaceCasterToPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon23GetCasterToCurvePolygonEv"]
    pub fn OGRPolygon_GetCasterToCurvePolygon(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRSurfaceCasterToCurvePolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygonD1Ev"]
    pub fn OGRPolygon_OGRPolygon_destructor(this: *mut OGRPolygon);
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon15getGeometryNameEv"]
    pub fn OGRPolygon_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon15getGeometryTypeEv"]
    pub fn OGRPolygon_getGeometryType(this: *mut ::std::os::raw::c_void) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon16hasCurveGeometryEi"]
    pub fn OGRPolygon_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon16getCurveGeometryEPKPKc"]
    pub fn OGRPolygon_getCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon17getLinearGeometryEdPKPKc"]
    pub fn OGRPolygon_getLinearGeometry(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon7WkbSizeEv"]
    pub fn OGRPolygon_WkbSize(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygon13importFromWkbEPKhi13OGRwkbVariantRi"]
    pub fn OGRPolygon_importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon11exportToWkbE15OGRwkbByteOrderPh13OGRwkbVariant"]
    pub fn OGRPolygon_exportToWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygon13importFromWktEPPKc"]
    pub fn OGRPolygon_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRPolygon_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon15CurvePolyToPolyEdPKPKc"]
    pub fn OGRPolygon_CurvePolyToPoly(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygon15getInteriorRingEi"]
    pub fn OGRPolygon_getInteriorRing(
        this: *mut ::std::os::raw::c_void,
        arg1: ::std::os::raw::c_int,
    ) -> *mut OGRLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10OGRPolygon15getInteriorRingEi"]
    pub fn OGRPolygon_getInteriorRing1(
        this: *mut ::std::os::raw::c_void,
        arg1: ::std::os::raw::c_int,
    ) -> *const OGRLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygon17stealInteriorRingEi"]
    pub fn OGRPolygon_stealInteriorRing(
        this: *mut ::std::os::raw::c_void,
        arg1: ::std::os::raw::c_int,
    ) -> *mut OGRLinearRing;
}
extern "C" {
    #[link_name = "\u{1}_ZN10OGRPolygon10closeRingsEv"]
    pub fn OGRPolygon_closeRings(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRTriangle {
    pub _base: OGRPolygon,
}
#[test]
fn bindgen_test_layout_OGRTriangle() {
    assert_eq!(
        ::std::mem::size_of::<OGRTriangle>(),
        40usize,
        concat!("Size of: ", stringify!(OGRTriangle))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRTriangle>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRTriangle))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRTriangle13CastToPolygonEP11OGRGeometry"]
    pub fn OGRTriangle_CastToPolygon(poGeom: *mut OGRGeometry) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRTriangleC1Ev"]
    pub fn OGRTriangle_OGRTriangle(this: *mut OGRTriangle);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRTriangleC1ERK8OGRPointS2_S2_"]
    pub fn OGRTriangle_OGRTriangle1(
        this: *mut OGRTriangle,
        p: *const OGRPoint,
        q: *const OGRPoint,
        r: *const OGRPoint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRTriangleC1ERKS_"]
    pub fn OGRTriangle_OGRTriangle2(this: *mut OGRTriangle, other: *const OGRTriangle);
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRTriangleC1ERK10OGRPolygonRi"]
    pub fn OGRTriangle_OGRTriangle3(
        this: *mut OGRTriangle,
        other: *const OGRPolygon,
        eErr: *mut OGRErr,
    );
}
impl OGRTriangle {
    #[inline]
    pub unsafe fn CastToPolygon(poGeom: *mut OGRGeometry) -> *mut OGRGeometry {
        OGRTriangle_CastToPolygon(poGeom)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRTriangle_OGRTriangle(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(p: *const OGRPoint, q: *const OGRPoint, r: *const OGRPoint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRTriangle_OGRTriangle1(__bindgen_tmp.as_mut_ptr(), p, q, r);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(other: *const OGRTriangle) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRTriangle_OGRTriangle2(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(other: *const OGRPolygon, eErr: *mut OGRErr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRTriangle_OGRTriangle3(__bindgen_tmp.as_mut_ptr(), other, eErr);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRTriangle18GetCasterToPolygonEv"]
    pub fn OGRTriangle_GetCasterToPolygon(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRSurfaceCasterToPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRTriangle21importFromWKTListOnlyEPPKciiRP11OGRRawPointRiRPd"]
    pub fn OGRTriangle_importFromWKTListOnly(
        this: *mut ::std::os::raw::c_void,
        ppszInput: *mut *const ::std::os::raw::c_char,
        bHasZ: ::std::os::raw::c_int,
        bHasM: ::std::os::raw::c_int,
        paoPoints: *mut *mut OGRRawPoint,
        nMaxPoints: *mut ::std::os::raw::c_int,
        padfZ: *mut *mut f64,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRTriangleD1Ev"]
    pub fn OGRTriangle_OGRTriangle_destructor(this: *mut OGRTriangle);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRTriangle15getGeometryNameEv"]
    pub fn OGRTriangle_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11OGRTriangle15getGeometryTypeEv"]
    pub fn OGRTriangle_getGeometryType(this: *mut ::std::os::raw::c_void) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRTriangle13importFromWkbEPKhi13OGRwkbVariantRi"]
    pub fn OGRTriangle_importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN11OGRTriangle15addRingDirectlyEP8OGRCurve"]
    pub fn OGRTriangle_addRingDirectly(
        this: *mut ::std::os::raw::c_void,
        poNewRing: *mut OGRCurve,
    ) -> OGRErr;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRGeometryCollection {
    pub _base: OGRGeometry,
    pub nGeomCount: ::std::os::raw::c_int,
    pub papoGeoms: *mut *mut OGRGeometry,
}
pub type OGRGeometryCollection_ChildType = OGRGeometry;
#[test]
fn bindgen_test_layout_OGRGeometryCollection() {
    assert_eq!(
        ::std::mem::size_of::<OGRGeometryCollection>(),
        32usize,
        concat!("Size of: ", stringify!(OGRGeometryCollection))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRGeometryCollection>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRGeometryCollection))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OGRGeometryCollection>())).nGeomCount as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRGeometryCollection),
            "::",
            stringify!(nGeomCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRGeometryCollection>())).papoGeoms as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRGeometryCollection),
            "::",
            stringify!(papoGeoms)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection19exportToWktInternalERK13OGRWktOptionsPiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn OGRGeometryCollection_exportToWktInternal(
        this: *const OGRGeometryCollection,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
        exclude: std_string,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection25TransferMembersAndDestroyEPS_S0_"]
    pub fn OGRGeometryCollection_TransferMembersAndDestroy(
        poSrc: *mut OGRGeometryCollection,
        poDst: *mut OGRGeometryCollection,
    ) -> *mut OGRGeometryCollection;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection16getNumGeometriesEv"]
    pub fn OGRGeometryCollection_getNumGeometries(
        this: *const OGRGeometryCollection,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection14getGeometryRefEi"]
    pub fn OGRGeometryCollection_getGeometryRef(
        this: *mut OGRGeometryCollection,
        arg1: ::std::os::raw::c_int,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection14getGeometryRefEi"]
    pub fn OGRGeometryCollection_getGeometryRef1(
        this: *const OGRGeometryCollection,
        arg1: ::std::os::raw::c_int,
    ) -> *const OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection24CastToGeometryCollectionEPS_"]
    pub fn OGRGeometryCollection_CastToGeometryCollection(
        poSrc: *mut OGRGeometryCollection,
    ) -> *mut OGRGeometryCollection;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollectionC1Ev"]
    pub fn OGRGeometryCollection_OGRGeometryCollection(this: *mut OGRGeometryCollection);
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollectionC1ERKS_"]
    pub fn OGRGeometryCollection_OGRGeometryCollection1(
        this: *mut OGRGeometryCollection,
        other: *const OGRGeometryCollection,
    );
}
impl OGRGeometryCollection {
    #[inline]
    pub unsafe fn exportToWktInternal(
        &self,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
        exclude: std_string,
    ) -> std_string {
        OGRGeometryCollection_exportToWktInternal(self, opts, err, exclude)
    }
    #[inline]
    pub unsafe fn TransferMembersAndDestroy(
        poSrc: *mut OGRGeometryCollection,
        poDst: *mut OGRGeometryCollection,
    ) -> *mut OGRGeometryCollection {
        OGRGeometryCollection_TransferMembersAndDestroy(poSrc, poDst)
    }
    #[inline]
    pub unsafe fn getNumGeometries(&self) -> ::std::os::raw::c_int {
        OGRGeometryCollection_getNumGeometries(self)
    }
    #[inline]
    pub unsafe fn getGeometryRef(&mut self, arg1: ::std::os::raw::c_int) -> *mut OGRGeometry {
        OGRGeometryCollection_getGeometryRef(self, arg1)
    }
    #[inline]
    pub unsafe fn getGeometryRef1(&self, arg1: ::std::os::raw::c_int) -> *const OGRGeometry {
        OGRGeometryCollection_getGeometryRef1(self, arg1)
    }
    #[inline]
    pub unsafe fn CastToGeometryCollection(
        poSrc: *mut OGRGeometryCollection,
    ) -> *mut OGRGeometryCollection {
        OGRGeometryCollection_CastToGeometryCollection(poSrc)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRGeometryCollection_OGRGeometryCollection(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRGeometryCollection) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRGeometryCollection_OGRGeometryCollection1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection19isCompatibleSubTypeE18OGRwkbGeometryType"]
    pub fn OGRGeometryCollection_isCompatibleSubType(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbGeometryType,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollectionD1Ev"]
    pub fn OGRGeometryCollection_OGRGeometryCollection_destructor(this: *mut OGRGeometryCollection);
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection15getGeometryNameEv"]
    pub fn OGRGeometryCollection_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection15getGeometryTypeEv"]
    pub fn OGRGeometryCollection_getGeometryType(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection5cloneEv"]
    pub fn OGRGeometryCollection_clone(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection5emptyEv"]
    pub fn OGRGeometryCollection_empty(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection9transformEP27OGRCoordinateTransformation"]
    pub fn OGRGeometryCollection_transform(
        this: *mut ::std::os::raw::c_void,
        poCT: *mut OGRCoordinateTransformation,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection11flattenTo2DEv"]
    pub fn OGRGeometryCollection_flattenTo2D(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection7IsEmptyEv"]
    pub fn OGRGeometryCollection_IsEmpty(this: *mut ::std::os::raw::c_void) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection10segmentizeEd"]
    pub fn OGRGeometryCollection_segmentize(this: *mut ::std::os::raw::c_void, dfMaxLength: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection16hasCurveGeometryEi"]
    pub fn OGRGeometryCollection_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection16getCurveGeometryEPKPKc"]
    pub fn OGRGeometryCollection_getCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection17getLinearGeometryEdPKPKc"]
    pub fn OGRGeometryCollection_getLinearGeometry(
        this: *mut ::std::os::raw::c_void,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection7WkbSizeEv"]
    pub fn OGRGeometryCollection_WkbSize(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection13importFromWkbEPKhi13OGRwkbVariantRi"]
    pub fn OGRGeometryCollection_importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection11exportToWkbE15OGRwkbByteOrderPh13OGRwkbVariant"]
    pub fn OGRGeometryCollection_exportToWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection13importFromWktEPPKc"]
    pub fn OGRGeometryCollection_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRGeometryCollection_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection10get_LengthEv"]
    pub fn OGRGeometryCollection_get_Length(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection8get_AreaEv"]
    pub fn OGRGeometryCollection_get_Area(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection12getDimensionEv"]
    pub fn OGRGeometryCollection_getDimension(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection11getEnvelopeEP11OGREnvelope"]
    pub fn OGRGeometryCollection_getEnvelope(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection11getEnvelopeEP13OGREnvelope3D"]
    pub fn OGRGeometryCollection_getEnvelope1(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope3D,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK21OGRGeometryCollection6EqualsEPK11OGRGeometry"]
    pub fn OGRGeometryCollection_Equals(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection22setCoordinateDimensionEi"]
    pub fn OGRGeometryCollection_setCoordinateDimension(
        this: *mut ::std::os::raw::c_void,
        nDimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection5set3DEi"]
    pub fn OGRGeometryCollection_set3D(this: *mut ::std::os::raw::c_void, bIs3D: OGRBoolean);
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection11setMeasuredEi"]
    pub fn OGRGeometryCollection_setMeasured(
        this: *mut ::std::os::raw::c_void,
        bIsMeasured: OGRBoolean,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection11addGeometryEPK11OGRGeometry"]
    pub fn OGRGeometryCollection_addGeometry(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection19addGeometryDirectlyEP11OGRGeometry"]
    pub fn OGRGeometryCollection_addGeometryDirectly(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRGeometry,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection14removeGeometryEii"]
    pub fn OGRGeometryCollection_removeGeometry(
        this: *mut ::std::os::raw::c_void,
        iIndex: ::std::os::raw::c_int,
        bDelete: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection22assignSpatialReferenceEP19OGRSpatialReference"]
    pub fn OGRGeometryCollection_assignSpatialReference(
        this: *mut ::std::os::raw::c_void,
        poSR: *mut OGRSpatialReference,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection10closeRingsEv"]
    pub fn OGRGeometryCollection_closeRings(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN21OGRGeometryCollection6swapXYEv"]
    pub fn OGRGeometryCollection_swapXY(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRMultiSurface {
    pub _base: OGRGeometryCollection,
}
pub type OGRMultiSurface_ChildType = OGRSurface;
#[test]
fn bindgen_test_layout_OGRMultiSurface() {
    assert_eq!(
        ::std::mem::size_of::<OGRMultiSurface>(),
        32usize,
        concat!("Size of: ", stringify!(OGRMultiSurface))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRMultiSurface>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRMultiSurface))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRMultiSurface18CastToMultiPolygonEPS_"]
    pub fn OGRMultiSurface_CastToMultiPolygon(poMS: *mut OGRMultiSurface) -> *mut OGRMultiPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRMultiSurfaceC1Ev"]
    pub fn OGRMultiSurface_OGRMultiSurface(this: *mut OGRMultiSurface);
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRMultiSurfaceC1ERKS_"]
    pub fn OGRMultiSurface_OGRMultiSurface1(
        this: *mut OGRMultiSurface,
        other: *const OGRMultiSurface,
    );
}
impl OGRMultiSurface {
    #[inline]
    pub unsafe fn CastToMultiPolygon(poMS: *mut OGRMultiSurface) -> *mut OGRMultiPolygon {
        OGRMultiSurface_CastToMultiPolygon(poMS)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRMultiSurface_OGRMultiSurface(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRMultiSurface) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRMultiSurface_OGRMultiSurface1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiSurface19isCompatibleSubTypeE18OGRwkbGeometryType"]
    pub fn OGRMultiSurface_isCompatibleSubType(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbGeometryType,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRMultiSurfaceD1Ev"]
    pub fn OGRMultiSurface_OGRMultiSurface_destructor(this: *mut OGRMultiSurface);
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiSurface15getGeometryNameEv"]
    pub fn OGRMultiSurface_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiSurface15getGeometryTypeEv"]
    pub fn OGRMultiSurface_getGeometryType(this: *mut ::std::os::raw::c_void)
        -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRMultiSurface13importFromWktEPPKc"]
    pub fn OGRMultiSurface_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiSurface11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRMultiSurface_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiSurface14PointOnSurfaceEP8OGRPoint"]
    pub fn OGRMultiSurface_PointOnSurface(
        this: *mut ::std::os::raw::c_void,
        poPoint: *mut OGRPoint,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiSurface12getDimensionEv"]
    pub fn OGRMultiSurface_getDimension(this: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiSurface16hasCurveGeometryEi"]
    pub fn OGRMultiSurface_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRMultiPolygon {
    pub _base: OGRMultiSurface,
}
pub type OGRMultiPolygon_ChildType = OGRPolygon;
#[test]
fn bindgen_test_layout_OGRMultiPolygon() {
    assert_eq!(
        ::std::mem::size_of::<OGRMultiPolygon>(),
        32usize,
        concat!("Size of: ", stringify!(OGRMultiPolygon))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRMultiPolygon>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRMultiPolygon))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRMultiPolygon18CastToMultiSurfaceEPS_"]
    pub fn OGRMultiPolygon_CastToMultiSurface(poMP: *mut OGRMultiPolygon) -> *mut OGRMultiSurface;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRMultiPolygonC1Ev"]
    pub fn OGRMultiPolygon_OGRMultiPolygon(this: *mut OGRMultiPolygon);
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRMultiPolygonC1ERKS_"]
    pub fn OGRMultiPolygon_OGRMultiPolygon1(
        this: *mut OGRMultiPolygon,
        other: *const OGRMultiPolygon,
    );
}
impl OGRMultiPolygon {
    #[inline]
    pub unsafe fn CastToMultiSurface(poMP: *mut OGRMultiPolygon) -> *mut OGRMultiSurface {
        OGRMultiPolygon_CastToMultiSurface(poMP)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRMultiPolygon_OGRMultiPolygon(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRMultiPolygon) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRMultiPolygon_OGRMultiPolygon1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiPolygon19isCompatibleSubTypeE18OGRwkbGeometryType"]
    pub fn OGRMultiPolygon_isCompatibleSubType(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbGeometryType,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN15OGRMultiPolygonD1Ev"]
    pub fn OGRMultiPolygon_OGRMultiPolygon_destructor(this: *mut OGRMultiPolygon);
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiPolygon15getGeometryNameEv"]
    pub fn OGRMultiPolygon_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiPolygon15getGeometryTypeEv"]
    pub fn OGRMultiPolygon_getGeometryType(this: *mut ::std::os::raw::c_void)
        -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiPolygon11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRMultiPolygon_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15OGRMultiPolygon16hasCurveGeometryEi"]
    pub fn OGRMultiPolygon_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRPolyhedralSurface {
    pub _base: OGRSurface,
    pub oMP: OGRMultiPolygon,
}
pub type OGRPolyhedralSurface_ChildType = OGRPolygon;
#[test]
fn bindgen_test_layout_OGRPolyhedralSurface() {
    assert_eq!(
        ::std::mem::size_of::<OGRPolyhedralSurface>(),
        56usize,
        concat!("Size of: ", stringify!(OGRPolyhedralSurface))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRPolyhedralSurface>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRPolyhedralSurface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OGRPolyhedralSurface>())).oMP as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRPolyhedralSurface),
            "::",
            stringify!(oMP)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface19exportToWktInternalB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRPolyhedralSurface_exportToWktInternal(
        this: *const OGRPolyhedralSurface,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface22CastToMultiPolygonImplEPS_"]
    pub fn OGRPolyhedralSurface_CastToMultiPolygonImpl(
        poPS: *mut OGRPolyhedralSurface,
    ) -> *mut OGRMultiPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface18CastToMultiPolygonEPS_"]
    pub fn OGRPolyhedralSurface_CastToMultiPolygon(
        poPS: *mut OGRPolyhedralSurface,
    ) -> *mut OGRMultiPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface19addGeometryDirectlyEP11OGRGeometry"]
    pub fn OGRPolyhedralSurface_addGeometryDirectly(
        this: *mut OGRPolyhedralSurface,
        poNewGeom: *mut OGRGeometry,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface16getNumGeometriesEv"]
    pub fn OGRPolyhedralSurface_getNumGeometries(
        this: *const OGRPolyhedralSurface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface14getGeometryRefEi"]
    pub fn OGRPolyhedralSurface_getGeometryRef(
        this: *mut OGRPolyhedralSurface,
        i: ::std::os::raw::c_int,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface14getGeometryRefEi"]
    pub fn OGRPolyhedralSurface_getGeometryRef1(
        this: *const OGRPolyhedralSurface,
        i: ::std::os::raw::c_int,
    ) -> *const OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface14removeGeometryEii"]
    pub fn OGRPolyhedralSurface_removeGeometry(
        this: *mut OGRPolyhedralSurface,
        iIndex: ::std::os::raw::c_int,
        bDelete: ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurfaceC1Ev"]
    pub fn OGRPolyhedralSurface_OGRPolyhedralSurface(this: *mut OGRPolyhedralSurface);
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurfaceC1ERKS_"]
    pub fn OGRPolyhedralSurface_OGRPolyhedralSurface1(
        this: *mut OGRPolyhedralSurface,
        poGeom: *const OGRPolyhedralSurface,
    );
}
impl OGRPolyhedralSurface {
    #[inline]
    pub unsafe fn exportToWktInternal(
        &self,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string {
        OGRPolyhedralSurface_exportToWktInternal(self, opts, err)
    }
    #[inline]
    pub unsafe fn CastToMultiPolygonImpl(poPS: *mut OGRPolyhedralSurface) -> *mut OGRMultiPolygon {
        OGRPolyhedralSurface_CastToMultiPolygonImpl(poPS)
    }
    #[inline]
    pub unsafe fn CastToMultiPolygon(poPS: *mut OGRPolyhedralSurface) -> *mut OGRMultiPolygon {
        OGRPolyhedralSurface_CastToMultiPolygon(poPS)
    }
    #[inline]
    pub unsafe fn addGeometryDirectly(&mut self, poNewGeom: *mut OGRGeometry) -> OGRErr {
        OGRPolyhedralSurface_addGeometryDirectly(self, poNewGeom)
    }
    #[inline]
    pub unsafe fn getNumGeometries(&self) -> ::std::os::raw::c_int {
        OGRPolyhedralSurface_getNumGeometries(self)
    }
    #[inline]
    pub unsafe fn getGeometryRef(&mut self, i: ::std::os::raw::c_int) -> *mut OGRGeometry {
        OGRPolyhedralSurface_getGeometryRef(self, i)
    }
    #[inline]
    pub unsafe fn getGeometryRef1(&self, i: ::std::os::raw::c_int) -> *const OGRGeometry {
        OGRPolyhedralSurface_getGeometryRef1(self, i)
    }
    #[inline]
    pub unsafe fn removeGeometry(
        &mut self,
        iIndex: ::std::os::raw::c_int,
        bDelete: ::std::os::raw::c_int,
    ) -> OGRErr {
        OGRPolyhedralSurface_removeGeometry(self, iIndex, bDelete)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRPolyhedralSurface_OGRPolyhedralSurface(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(poGeom: *const OGRPolyhedralSurface) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRPolyhedralSurface_OGRPolyhedralSurface1(__bindgen_tmp.as_mut_ptr(), poGeom);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface18GetCasterToPolygonEv"]
    pub fn OGRPolyhedralSurface_GetCasterToPolygon(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRSurfaceCasterToPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface23GetCasterToCurvePolygonEv"]
    pub fn OGRPolyhedralSurface_GetCasterToCurvePolygon(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRSurfaceCasterToCurvePolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface19isCompatibleSubTypeE18OGRwkbGeometryType"]
    pub fn OGRPolyhedralSurface_isCompatibleSubType(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbGeometryType,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface18getSubGeometryNameEv"]
    pub fn OGRPolyhedralSurface_getSubGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface18getSubGeometryTypeEv"]
    pub fn OGRPolyhedralSurface_getSubGeometryType(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface23GetCasterToMultiPolygonEv"]
    pub fn OGRPolyhedralSurface_GetCasterToMultiPolygon(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRPolyhedralSurfaceCastToMultiPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurfaceD1Ev"]
    pub fn OGRPolyhedralSurface_OGRPolyhedralSurface_destructor(this: *mut OGRPolyhedralSurface);
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface7WkbSizeEv"]
    pub fn OGRPolyhedralSurface_WkbSize(this: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface15getGeometryNameEv"]
    pub fn OGRPolyhedralSurface_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface15getGeometryTypeEv"]
    pub fn OGRPolyhedralSurface_getGeometryType(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface13importFromWkbEPKhi13OGRwkbVariantRi"]
    pub fn OGRPolyhedralSurface_importFromWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: *const ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_int,
        arg3: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface11exportToWkbE15OGRwkbByteOrderPh13OGRwkbVariant"]
    pub fn OGRPolyhedralSurface_exportToWkb(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbByteOrder,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface13importFromWktEPPKc"]
    pub fn OGRPolyhedralSurface_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRPolyhedralSurface_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface12getDimensionEv"]
    pub fn OGRPolyhedralSurface_getDimension(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface5emptyEv"]
    pub fn OGRPolyhedralSurface_empty(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface5cloneEv"]
    pub fn OGRPolyhedralSurface_clone(this: *mut ::std::os::raw::c_void) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface11getEnvelopeEP11OGREnvelope"]
    pub fn OGRPolyhedralSurface_getEnvelope(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface11getEnvelopeEP13OGREnvelope3D"]
    pub fn OGRPolyhedralSurface_getEnvelope1(
        this: *mut ::std::os::raw::c_void,
        psEnvelope: *mut OGREnvelope3D,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface11flattenTo2DEv"]
    pub fn OGRPolyhedralSurface_flattenTo2D(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface9transformEP27OGRCoordinateTransformation"]
    pub fn OGRPolyhedralSurface_transform(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRCoordinateTransformation,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface6EqualsEPK11OGRGeometry"]
    pub fn OGRPolyhedralSurface_Equals(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface8get_AreaEv"]
    pub fn OGRPolyhedralSurface_get_Area(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface14PointOnSurfaceEP8OGRPoint"]
    pub fn OGRPolyhedralSurface_PointOnSurface(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut OGRPoint,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface16hasCurveGeometryEi"]
    pub fn OGRPolyhedralSurface_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface11addGeometryEPK11OGRGeometry"]
    pub fn OGRPolyhedralSurface_addGeometry(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK20OGRPolyhedralSurface7IsEmptyEv"]
    pub fn OGRPolyhedralSurface_IsEmpty(this: *mut ::std::os::raw::c_void) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface22setCoordinateDimensionEi"]
    pub fn OGRPolyhedralSurface_setCoordinateDimension(
        this: *mut ::std::os::raw::c_void,
        nDimension: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface5set3DEi"]
    pub fn OGRPolyhedralSurface_set3D(this: *mut ::std::os::raw::c_void, bIs3D: OGRBoolean);
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface11setMeasuredEi"]
    pub fn OGRPolyhedralSurface_setMeasured(
        this: *mut ::std::os::raw::c_void,
        bIsMeasured: OGRBoolean,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface6swapXYEv"]
    pub fn OGRPolyhedralSurface_swapXY(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN20OGRPolyhedralSurface22assignSpatialReferenceEP19OGRSpatialReference"]
    pub fn OGRPolyhedralSurface_assignSpatialReference(
        this: *mut ::std::os::raw::c_void,
        poSR: *mut OGRSpatialReference,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRTriangulatedSurface {
    pub _base: OGRPolyhedralSurface,
}
pub type OGRTriangulatedSurface_ChildType = OGRTriangle;
#[test]
fn bindgen_test_layout_OGRTriangulatedSurface() {
    assert_eq!(
        ::std::mem::size_of::<OGRTriangulatedSurface>(),
        56usize,
        concat!("Size of: ", stringify!(OGRTriangulatedSurface))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRTriangulatedSurface>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRTriangulatedSurface))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN22OGRTriangulatedSurface22CastToMultiPolygonImplEP20OGRPolyhedralSurface"]
    pub fn OGRTriangulatedSurface_CastToMultiPolygonImpl(
        poPS: *mut OGRPolyhedralSurface,
    ) -> *mut OGRMultiPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN22OGRTriangulatedSurface23CastToPolyhedralSurfaceEPS_"]
    pub fn OGRTriangulatedSurface_CastToPolyhedralSurface(
        poTS: *mut OGRTriangulatedSurface,
    ) -> *mut OGRPolyhedralSurface;
}
extern "C" {
    #[link_name = "\u{1}_ZN22OGRTriangulatedSurfaceC1Ev"]
    pub fn OGRTriangulatedSurface_OGRTriangulatedSurface(this: *mut OGRTriangulatedSurface);
}
extern "C" {
    #[link_name = "\u{1}_ZN22OGRTriangulatedSurfaceC1ERKS_"]
    pub fn OGRTriangulatedSurface_OGRTriangulatedSurface1(
        this: *mut OGRTriangulatedSurface,
        other: *const OGRTriangulatedSurface,
    );
}
impl OGRTriangulatedSurface {
    #[inline]
    pub unsafe fn CastToMultiPolygonImpl(poPS: *mut OGRPolyhedralSurface) -> *mut OGRMultiPolygon {
        OGRTriangulatedSurface_CastToMultiPolygonImpl(poPS)
    }
    #[inline]
    pub unsafe fn CastToPolyhedralSurface(
        poTS: *mut OGRTriangulatedSurface,
    ) -> *mut OGRPolyhedralSurface {
        OGRTriangulatedSurface_CastToPolyhedralSurface(poTS)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRTriangulatedSurface_OGRTriangulatedSurface(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRTriangulatedSurface) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRTriangulatedSurface_OGRTriangulatedSurface1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK22OGRTriangulatedSurface19isCompatibleSubTypeE18OGRwkbGeometryType"]
    pub fn OGRTriangulatedSurface_isCompatibleSubType(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbGeometryType,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZNK22OGRTriangulatedSurface18getSubGeometryNameEv"]
    pub fn OGRTriangulatedSurface_getSubGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK22OGRTriangulatedSurface18getSubGeometryTypeEv"]
    pub fn OGRTriangulatedSurface_getSubGeometryType(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK22OGRTriangulatedSurface23GetCasterToMultiPolygonEv"]
    pub fn OGRTriangulatedSurface_GetCasterToMultiPolygon(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRPolyhedralSurfaceCastToMultiPolygon;
}
extern "C" {
    #[link_name = "\u{1}_ZN22OGRTriangulatedSurfaceD1Ev"]
    pub fn OGRTriangulatedSurface_OGRTriangulatedSurface_destructor(
        this: *mut OGRTriangulatedSurface,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK22OGRTriangulatedSurface15getGeometryNameEv"]
    pub fn OGRTriangulatedSurface_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK22OGRTriangulatedSurface15getGeometryTypeEv"]
    pub fn OGRTriangulatedSurface_getGeometryType(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZN22OGRTriangulatedSurface11addGeometryEPK11OGRGeometry"]
    pub fn OGRTriangulatedSurface_addGeometry(
        this: *mut ::std::os::raw::c_void,
        arg1: *const OGRGeometry,
    ) -> OGRErr;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRMultiPoint {
    pub _base: OGRGeometryCollection,
}
pub type OGRMultiPoint_ChildType = OGRPoint;
#[test]
fn bindgen_test_layout_OGRMultiPoint() {
    assert_eq!(
        ::std::mem::size_of::<OGRMultiPoint>(),
        32usize,
        concat!("Size of: ", stringify!(OGRMultiPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRMultiPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRMultiPoint))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRMultiPointC1Ev"]
    pub fn OGRMultiPoint_OGRMultiPoint(this: *mut OGRMultiPoint);
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRMultiPointC1ERKS_"]
    pub fn OGRMultiPoint_OGRMultiPoint1(this: *mut OGRMultiPoint, other: *const OGRMultiPoint);
}
impl OGRMultiPoint {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRMultiPoint_OGRMultiPoint(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRMultiPoint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRMultiPoint_OGRMultiPoint1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiPoint19isCompatibleSubTypeE18OGRwkbGeometryType"]
    pub fn OGRMultiPoint_isCompatibleSubType(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbGeometryType,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRMultiPointD1Ev"]
    pub fn OGRMultiPoint_OGRMultiPoint_destructor(this: *mut OGRMultiPoint);
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiPoint15getGeometryNameEv"]
    pub fn OGRMultiPoint_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiPoint15getGeometryTypeEv"]
    pub fn OGRMultiPoint_getGeometryType(this: *mut ::std::os::raw::c_void) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRMultiPoint13importFromWktEPPKc"]
    pub fn OGRMultiPoint_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiPoint11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRMultiPoint_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiPoint12getDimensionEv"]
    pub fn OGRMultiPoint_getDimension(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiPoint16hasCurveGeometryEi"]
    pub fn OGRMultiPoint_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRMultiCurve {
    pub _base: OGRGeometryCollection,
}
pub type OGRMultiCurve_ChildType = OGRCurve;
#[test]
fn bindgen_test_layout_OGRMultiCurve() {
    assert_eq!(
        ::std::mem::size_of::<OGRMultiCurve>(),
        32usize,
        concat!("Size of: ", stringify!(OGRMultiCurve))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRMultiCurve>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRMultiCurve))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRMultiCurve23addCurveDirectlyFromWktEP11OGRGeometryP8OGRCurve"]
    pub fn OGRMultiCurve_addCurveDirectlyFromWkt(
        poSelf: *mut OGRGeometry,
        poCurve: *mut OGRCurve,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRMultiCurve21CastToMultiLineStringEPS_"]
    pub fn OGRMultiCurve_CastToMultiLineString(poMC: *mut OGRMultiCurve)
        -> *mut OGRMultiLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRMultiCurveC1Ev"]
    pub fn OGRMultiCurve_OGRMultiCurve(this: *mut OGRMultiCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRMultiCurveC1ERKS_"]
    pub fn OGRMultiCurve_OGRMultiCurve1(this: *mut OGRMultiCurve, other: *const OGRMultiCurve);
}
impl OGRMultiCurve {
    #[inline]
    pub unsafe fn addCurveDirectlyFromWkt(
        poSelf: *mut OGRGeometry,
        poCurve: *mut OGRCurve,
    ) -> OGRErr {
        OGRMultiCurve_addCurveDirectlyFromWkt(poSelf, poCurve)
    }
    #[inline]
    pub unsafe fn CastToMultiLineString(poMC: *mut OGRMultiCurve) -> *mut OGRMultiLineString {
        OGRMultiCurve_CastToMultiLineString(poMC)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRMultiCurve_OGRMultiCurve(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRMultiCurve) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRMultiCurve_OGRMultiCurve1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiCurve19isCompatibleSubTypeE18OGRwkbGeometryType"]
    pub fn OGRMultiCurve_isCompatibleSubType(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbGeometryType,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRMultiCurveD1Ev"]
    pub fn OGRMultiCurve_OGRMultiCurve_destructor(this: *mut OGRMultiCurve);
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiCurve15getGeometryNameEv"]
    pub fn OGRMultiCurve_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiCurve15getGeometryTypeEv"]
    pub fn OGRMultiCurve_getGeometryType(this: *mut ::std::os::raw::c_void) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZN13OGRMultiCurve13importFromWktEPPKc"]
    pub fn OGRMultiCurve_importFromWkt(
        this: *mut ::std::os::raw::c_void,
        arg1: *mut *const ::std::os::raw::c_char,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiCurve11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRMultiCurve_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiCurve12getDimensionEv"]
    pub fn OGRMultiCurve_getDimension(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK13OGRMultiCurve16hasCurveGeometryEi"]
    pub fn OGRMultiCurve_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRMultiLineString {
    pub _base: OGRMultiCurve,
}
pub type OGRMultiLineString_ChildType = OGRLineString;
#[test]
fn bindgen_test_layout_OGRMultiLineString() {
    assert_eq!(
        ::std::mem::size_of::<OGRMultiLineString>(),
        32usize,
        concat!("Size of: ", stringify!(OGRMultiLineString))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRMultiLineString>(),
        8usize,
        concat!("Alignment of ", stringify!(OGRMultiLineString))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRMultiLineString16CastToMultiCurveEPS_"]
    pub fn OGRMultiLineString_CastToMultiCurve(
        poMLS: *mut OGRMultiLineString,
    ) -> *mut OGRMultiCurve;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRMultiLineStringC1Ev"]
    pub fn OGRMultiLineString_OGRMultiLineString(this: *mut OGRMultiLineString);
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRMultiLineStringC1ERKS_"]
    pub fn OGRMultiLineString_OGRMultiLineString1(
        this: *mut OGRMultiLineString,
        other: *const OGRMultiLineString,
    );
}
impl OGRMultiLineString {
    #[inline]
    pub unsafe fn CastToMultiCurve(poMLS: *mut OGRMultiLineString) -> *mut OGRMultiCurve {
        OGRMultiLineString_CastToMultiCurve(poMLS)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRMultiLineString_OGRMultiLineString(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const OGRMultiLineString) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRMultiLineString_OGRMultiLineString1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRMultiLineString19isCompatibleSubTypeE18OGRwkbGeometryType"]
    pub fn OGRMultiLineString_isCompatibleSubType(
        this: *mut ::std::os::raw::c_void,
        arg1: OGRwkbGeometryType,
    ) -> OGRBoolean;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRMultiLineStringD1Ev"]
    pub fn OGRMultiLineString_OGRMultiLineString_destructor(this: *mut OGRMultiLineString);
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRMultiLineString15getGeometryNameEv"]
    pub fn OGRMultiLineString_getGeometryName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRMultiLineString15getGeometryTypeEv"]
    pub fn OGRMultiLineString_getGeometryType(
        this: *mut ::std::os::raw::c_void,
    ) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRMultiLineString11exportToWktB5cxx11ERK13OGRWktOptionsPi"]
    pub fn OGRMultiLineString_exportToWkt(
        this: *mut ::std::os::raw::c_void,
        opts: *const OGRWktOptions,
        err: *mut OGRErr,
    ) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK18OGRMultiLineString16hasCurveGeometryEi"]
    pub fn OGRMultiLineString_hasCurveGeometry(
        this: *mut ::std::os::raw::c_void,
        bLookForNonLinear: ::std::os::raw::c_int,
    ) -> OGRBoolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRGeometryFactory {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct OGRGeometryFactory_TransformWithOptionsCache {
    pub d: std_unique_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRGeometryFactory_TransformWithOptionsCache_Private {
    _unused: [u8; 0],
}
#[test]
fn bindgen_test_layout_OGRGeometryFactory_TransformWithOptionsCache() {
    assert_eq!(
        ::std::mem::size_of::<OGRGeometryFactory_TransformWithOptionsCache>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(OGRGeometryFactory_TransformWithOptionsCache)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<OGRGeometryFactory_TransformWithOptionsCache>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(OGRGeometryFactory_TransformWithOptionsCache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OGRGeometryFactory_TransformWithOptionsCache>())).d as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OGRGeometryFactory_TransformWithOptionsCache),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory25TransformWithOptionsCacheC1Ev"]
    pub fn OGRGeometryFactory_TransformWithOptionsCache_TransformWithOptionsCache(
        this: *mut OGRGeometryFactory_TransformWithOptionsCache,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory25TransformWithOptionsCacheD1Ev"]
    pub fn OGRGeometryFactory_TransformWithOptionsCache_TransformWithOptionsCache_destructor(
        this: *mut OGRGeometryFactory_TransformWithOptionsCache,
    );
}
impl OGRGeometryFactory_TransformWithOptionsCache {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        OGRGeometryFactory_TransformWithOptionsCache_TransformWithOptionsCache(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        OGRGeometryFactory_TransformWithOptionsCache_TransformWithOptionsCache_destructor(self)
    }
}
#[test]
fn bindgen_test_layout_OGRGeometryFactory() {
    assert_eq!(
        ::std::mem::size_of::<OGRGeometryFactory>(),
        1usize,
        concat!("Size of: ", stringify!(OGRGeometryFactory))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRGeometryFactory>(),
        1usize,
        concat!("Alignment of ", stringify!(OGRGeometryFactory))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory13createFromWkbEPKvP19OGRSpatialReferencePP11OGRGeometryi13OGRwkbVariant"]
    pub fn OGRGeometryFactory_createFromWkb(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut OGRSpatialReference,
        arg3: *mut *mut OGRGeometry,
        arg4: ::std::os::raw::c_int,
        arg5: OGRwkbVariant,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory13createFromWkbEPKvP19OGRSpatialReferencePP11OGRGeometryi13OGRwkbVariantRi"]
    pub fn OGRGeometryFactory_createFromWkb1(
        pabyData: *const ::std::os::raw::c_void,
        arg1: *mut OGRSpatialReference,
        arg2: *mut *mut OGRGeometry,
        nSize: ::std::os::raw::c_int,
        eVariant: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory13createFromWktEPKcP19OGRSpatialReferencePP11OGRGeometry"]
    pub fn OGRGeometryFactory_createFromWkt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut OGRSpatialReference,
        arg3: *mut *mut OGRGeometry,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory13createFromWktEPPKcP19OGRSpatialReferencePP11OGRGeometry"]
    pub fn OGRGeometryFactory_createFromWkt1(
        arg1: *mut *const ::std::os::raw::c_char,
        arg2: *mut OGRSpatialReference,
        arg3: *mut *mut OGRGeometry,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory13createFromFgfEPKvP19OGRSpatialReferencePP11OGRGeometryiPi"]
    pub fn OGRGeometryFactory_createFromFgf(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut OGRSpatialReference,
        arg3: *mut *mut OGRGeometry,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> OGRErr;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory13createFromGMLEPKc"]
    pub fn OGRGeometryFactory_createFromGML(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory14createFromGEOSEP20GEOSContextHandle_HSP10GEOSGeom_t"]
    pub fn OGRGeometryFactory_createFromGEOS(
        hGEOSCtxt: GEOSContextHandle_t,
        arg1: GEOSGeom,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory17createFromGeoJsonEPKc"]
    pub fn OGRGeometryFactory_createFromGeoJson(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory17createFromGeoJsonERK13CPLJSONObject"]
    pub fn OGRGeometryFactory_createFromGeoJson1(
        oJSONObject: *const CPLJSONObject,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory15destroyGeometryEP11OGRGeometry"]
    pub fn OGRGeometryFactory_destroyGeometry(arg1: *mut OGRGeometry);
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory14createGeometryE18OGRwkbGeometryType"]
    pub fn OGRGeometryFactory_createGeometry(arg1: OGRwkbGeometryType) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory14forceToPolygonEP11OGRGeometry"]
    pub fn OGRGeometryFactory_forceToPolygon(arg1: *mut OGRGeometry) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory17forceToLineStringEP11OGRGeometryb"]
    pub fn OGRGeometryFactory_forceToLineString(
        arg1: *mut OGRGeometry,
        bOnlyInOrder: bool,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory19forceToMultiPolygonEP11OGRGeometry"]
    pub fn OGRGeometryFactory_forceToMultiPolygon(arg1: *mut OGRGeometry) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory17forceToMultiPointEP11OGRGeometry"]
    pub fn OGRGeometryFactory_forceToMultiPoint(arg1: *mut OGRGeometry) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory22forceToMultiLineStringEP11OGRGeometry"]
    pub fn OGRGeometryFactory_forceToMultiLineString(arg1: *mut OGRGeometry) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory7forceToEP11OGRGeometry18OGRwkbGeometryTypePKPKc"]
    pub fn OGRGeometryFactory_forceTo(
        poGeom: *mut OGRGeometry,
        eTargetType: OGRwkbGeometryType,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory28removeLowerDimensionSubGeomsEPK11OGRGeometry"]
    pub fn OGRGeometryFactory_removeLowerDimensionSubGeoms(
        poGeom: *const OGRGeometry,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory16organizePolygonsEPP11OGRGeometryiPiPPKc"]
    pub fn OGRGeometryFactory_organizePolygons(
        papoPolygons: *mut *mut OGRGeometry,
        nPolygonCount: ::std::os::raw::c_int,
        pbResultValidGeometry: *mut ::std::os::raw::c_int,
        papszOptions: *mut *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory8haveGEOSEv"]
    pub fn OGRGeometryFactory_haveGEOS() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory20transformWithOptionsEPK11OGRGeometryP27OGRCoordinateTransformationPPcRKNS_25TransformWithOptionsCacheE"]
    pub fn OGRGeometryFactory_transformWithOptions(
        poSrcGeom: *const OGRGeometry,
        poCT: *mut OGRCoordinateTransformation,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        cache: *const OGRGeometryFactory_TransformWithOptionsCache,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory20approximateArcAnglesEdddddddddb"]
    pub fn OGRGeometryFactory_approximateArcAngles(
        dfX: f64,
        dfY: f64,
        dfZ: f64,
        dfPrimaryRadius: f64,
        dfSecondaryAxis: f64,
        dfRotation: f64,
        dfStartAngle: f64,
        dfEndAngle: f64,
        dfMaxAngleStepSizeDegrees: f64,
        bUseMaxGap: bool,
    ) -> *mut OGRGeometry;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory17GetCurveParmetersEddddddRdS0_S0_S0_S0_S0_"]
    pub fn OGRGeometryFactory_GetCurveParmeters(
        x0: f64,
        y0: f64,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
        R: *mut f64,
        cx: *mut f64,
        cy: *mut f64,
        alpha0: *mut f64,
        alpha1: *mut f64,
        alpha2: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory17curveToLineStringEdddddddddidPKPKc"]
    pub fn OGRGeometryFactory_curveToLineString(
        x0: f64,
        y0: f64,
        z0: f64,
        x1: f64,
        y1: f64,
        z1: f64,
        x2: f64,
        y2: f64,
        z2: f64,
        bHasZ: ::std::os::raw::c_int,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRLineString;
}
extern "C" {
    #[link_name = "\u{1}_ZN18OGRGeometryFactory19curveFromLineStringEPK13OGRLineStringPKPKc"]
    pub fn OGRGeometryFactory_curveFromLineString(
        poLS: *const OGRLineString,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRCurve;
}
impl OGRGeometryFactory {
    #[inline]
    pub unsafe fn createFromWkb(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut OGRSpatialReference,
        arg3: *mut *mut OGRGeometry,
        arg4: ::std::os::raw::c_int,
        arg5: OGRwkbVariant,
    ) -> OGRErr {
        OGRGeometryFactory_createFromWkb(arg1, arg2, arg3, arg4, arg5)
    }
    #[inline]
    pub unsafe fn createFromWkb1(
        pabyData: *const ::std::os::raw::c_void,
        arg1: *mut OGRSpatialReference,
        arg2: *mut *mut OGRGeometry,
        nSize: ::std::os::raw::c_int,
        eVariant: OGRwkbVariant,
        nBytesConsumedOut: *mut ::std::os::raw::c_int,
    ) -> OGRErr {
        OGRGeometryFactory_createFromWkb1(pabyData, arg1, arg2, nSize, eVariant, nBytesConsumedOut)
    }
    #[inline]
    pub unsafe fn createFromWkt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut OGRSpatialReference,
        arg3: *mut *mut OGRGeometry,
    ) -> OGRErr {
        OGRGeometryFactory_createFromWkt(arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn createFromWkt1(
        arg1: *mut *const ::std::os::raw::c_char,
        arg2: *mut OGRSpatialReference,
        arg3: *mut *mut OGRGeometry,
    ) -> OGRErr {
        OGRGeometryFactory_createFromWkt1(arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn createFromFgf(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut OGRSpatialReference,
        arg3: *mut *mut OGRGeometry,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> OGRErr {
        OGRGeometryFactory_createFromFgf(arg1, arg2, arg3, arg4, arg5)
    }
    #[inline]
    pub unsafe fn createFromGML(arg1: *const ::std::os::raw::c_char) -> *mut OGRGeometry {
        OGRGeometryFactory_createFromGML(arg1)
    }
    #[inline]
    pub unsafe fn createFromGEOS(
        hGEOSCtxt: GEOSContextHandle_t,
        arg1: GEOSGeom,
    ) -> *mut OGRGeometry {
        OGRGeometryFactory_createFromGEOS(hGEOSCtxt, arg1)
    }
    #[inline]
    pub unsafe fn createFromGeoJson(arg1: *const ::std::os::raw::c_char) -> *mut OGRGeometry {
        OGRGeometryFactory_createFromGeoJson(arg1)
    }
    #[inline]
    pub unsafe fn createFromGeoJson1(oJSONObject: *const CPLJSONObject) -> *mut OGRGeometry {
        OGRGeometryFactory_createFromGeoJson1(oJSONObject)
    }
    #[inline]
    pub unsafe fn destroyGeometry(arg1: *mut OGRGeometry) {
        OGRGeometryFactory_destroyGeometry(arg1)
    }
    #[inline]
    pub unsafe fn createGeometry(arg1: OGRwkbGeometryType) -> *mut OGRGeometry {
        OGRGeometryFactory_createGeometry(arg1)
    }
    #[inline]
    pub unsafe fn forceToPolygon(arg1: *mut OGRGeometry) -> *mut OGRGeometry {
        OGRGeometryFactory_forceToPolygon(arg1)
    }
    #[inline]
    pub unsafe fn forceToLineString(
        arg1: *mut OGRGeometry,
        bOnlyInOrder: bool,
    ) -> *mut OGRGeometry {
        OGRGeometryFactory_forceToLineString(arg1, bOnlyInOrder)
    }
    #[inline]
    pub unsafe fn forceToMultiPolygon(arg1: *mut OGRGeometry) -> *mut OGRGeometry {
        OGRGeometryFactory_forceToMultiPolygon(arg1)
    }
    #[inline]
    pub unsafe fn forceToMultiPoint(arg1: *mut OGRGeometry) -> *mut OGRGeometry {
        OGRGeometryFactory_forceToMultiPoint(arg1)
    }
    #[inline]
    pub unsafe fn forceToMultiLineString(arg1: *mut OGRGeometry) -> *mut OGRGeometry {
        OGRGeometryFactory_forceToMultiLineString(arg1)
    }
    #[inline]
    pub unsafe fn forceTo(
        poGeom: *mut OGRGeometry,
        eTargetType: OGRwkbGeometryType,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry {
        OGRGeometryFactory_forceTo(poGeom, eTargetType, papszOptions)
    }
    #[inline]
    pub unsafe fn removeLowerDimensionSubGeoms(poGeom: *const OGRGeometry) -> *mut OGRGeometry {
        OGRGeometryFactory_removeLowerDimensionSubGeoms(poGeom)
    }
    #[inline]
    pub unsafe fn organizePolygons(
        papoPolygons: *mut *mut OGRGeometry,
        nPolygonCount: ::std::os::raw::c_int,
        pbResultValidGeometry: *mut ::std::os::raw::c_int,
        papszOptions: *mut *const ::std::os::raw::c_char,
    ) -> *mut OGRGeometry {
        OGRGeometryFactory_organizePolygons(
            papoPolygons,
            nPolygonCount,
            pbResultValidGeometry,
            papszOptions,
        )
    }
    #[inline]
    pub unsafe fn haveGEOS() -> bool {
        OGRGeometryFactory_haveGEOS()
    }
    #[inline]
    pub unsafe fn transformWithOptions(
        poSrcGeom: *const OGRGeometry,
        poCT: *mut OGRCoordinateTransformation,
        papszOptions: *mut *mut ::std::os::raw::c_char,
        cache: *const OGRGeometryFactory_TransformWithOptionsCache,
    ) -> *mut OGRGeometry {
        OGRGeometryFactory_transformWithOptions(poSrcGeom, poCT, papszOptions, cache)
    }
    #[inline]
    pub unsafe fn approximateArcAngles(
        dfX: f64,
        dfY: f64,
        dfZ: f64,
        dfPrimaryRadius: f64,
        dfSecondaryAxis: f64,
        dfRotation: f64,
        dfStartAngle: f64,
        dfEndAngle: f64,
        dfMaxAngleStepSizeDegrees: f64,
        bUseMaxGap: bool,
    ) -> *mut OGRGeometry {
        OGRGeometryFactory_approximateArcAngles(
            dfX,
            dfY,
            dfZ,
            dfPrimaryRadius,
            dfSecondaryAxis,
            dfRotation,
            dfStartAngle,
            dfEndAngle,
            dfMaxAngleStepSizeDegrees,
            bUseMaxGap,
        )
    }
    #[inline]
    pub unsafe fn GetCurveParmeters(
        x0: f64,
        y0: f64,
        x1: f64,
        y1: f64,
        x2: f64,
        y2: f64,
        R: *mut f64,
        cx: *mut f64,
        cy: *mut f64,
        alpha0: *mut f64,
        alpha1: *mut f64,
        alpha2: *mut f64,
    ) -> ::std::os::raw::c_int {
        OGRGeometryFactory_GetCurveParmeters(
            x0, y0, x1, y1, x2, y2, R, cx, cy, alpha0, alpha1, alpha2,
        )
    }
    #[inline]
    pub unsafe fn curveToLineString(
        x0: f64,
        y0: f64,
        z0: f64,
        x1: f64,
        y1: f64,
        z1: f64,
        x2: f64,
        y2: f64,
        z2: f64,
        bHasZ: ::std::os::raw::c_int,
        dfMaxAngleStepSizeDegrees: f64,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRLineString {
        OGRGeometryFactory_curveToLineString(
            x0,
            y0,
            z0,
            x1,
            y1,
            z1,
            x2,
            y2,
            z2,
            bHasZ,
            dfMaxAngleStepSizeDegrees,
            papszOptions,
        )
    }
    #[inline]
    pub unsafe fn curveFromLineString(
        poLS: *const OGRLineString,
        papszOptions: *const *const ::std::os::raw::c_char,
    ) -> *mut OGRCurve {
        OGRGeometryFactory_curveFromLineString(poLS, papszOptions)
    }
}
extern "C" {
    #[link_name = "\u{1}_Z18OGRFromOGCGeomTypePKc"]
    pub fn OGRFromOGCGeomType(pszGeomType: *const ::std::os::raw::c_char) -> OGRwkbGeometryType;
}
extern "C" {
    #[link_name = "\u{1}_Z16OGRToOGCGeomType18OGRwkbGeometryType"]
    pub fn OGRToOGCGeomType(eGeomType: OGRwkbGeometryType) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OGRPreparedGeometry {
    _unused: [u8; 0],
}
pub type OGRPreparedGeometry = _OGRPreparedGeometry;
extern "C" {
    #[link_name = "\u{1}_Z29OGRHasPreparedGeometrySupportv"]
    pub fn OGRHasPreparedGeometrySupport() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z25OGRCreatePreparedGeometryPK11OGRGeometry"]
    pub fn OGRCreatePreparedGeometry(poGeom: *const OGRGeometry) -> *mut OGRPreparedGeometry;
}
extern "C" {
    #[link_name = "\u{1}_Z26OGRDestroyPreparedGeometryP20_OGRPreparedGeometry"]
    pub fn OGRDestroyPreparedGeometry(poPreparedGeom: *mut OGRPreparedGeometry);
}
extern "C" {
    #[link_name = "\u{1}_Z29OGRPreparedGeometryIntersectsPK20_OGRPreparedGeometryPK11OGRGeometry"]
    pub fn OGRPreparedGeometryIntersects(
        poPreparedGeom: *const OGRPreparedGeometry,
        poOtherGeom: *const OGRGeometry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z27OGRPreparedGeometryContainsPK20_OGRPreparedGeometryPK11OGRGeometry"]
    pub fn OGRPreparedGeometryContains(
        poPreparedGeom: *const OGRPreparedGeometry,
        poOtherGeom: *const OGRGeometry,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OGRPreparedGeometryUniquePtrDeleter {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_OGRPreparedGeometryUniquePtrDeleter() {
    assert_eq!(
        ::std::mem::size_of::<OGRPreparedGeometryUniquePtrDeleter>(),
        1usize,
        concat!("Size of: ", stringify!(OGRPreparedGeometryUniquePtrDeleter))
    );
    assert_eq!(
        ::std::mem::align_of::<OGRPreparedGeometryUniquePtrDeleter>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(OGRPreparedGeometryUniquePtrDeleter)
        )
    );
}
pub type OGRPreparedGeometryUniquePtr = std_unique_ptr;
#[doc = " Success"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"OGRERR_NONE\"></div>"]
pub const OGRErr_OGRERR_NONE: OGRErr = 0;
#[doc = " Not enough data to deserialize"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"OGRERR_NOT_ENOUGH_DATA\"></div>"]
pub const OGRErr_OGRERR_NOT_ENOUGH_DATA: OGRErr = 1;
#[doc = " Not enough memory"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"OGRERR_NOT_ENOUGH_MEMORY\"></div>"]
pub const OGRErr_OGRERR_NOT_ENOUGH_MEMORY: OGRErr = 2;
#[doc = " Unsupported geometry type"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"OGRERR_UNSUPPORTED_GEOMETRY_TYPE\"></div>"]
pub const OGRErr_OGRERR_UNSUPPORTED_GEOMETRY_TYPE: OGRErr = 3;
#[doc = " Unsupported operation"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"OGRERR_UNSUPPORTED_OPERATION\"></div>"]
pub const OGRErr_OGRERR_UNSUPPORTED_OPERATION: OGRErr = 4;
#[doc = " Corrupt data"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"OGRERR_CORRUPT_DATA\"></div>"]
pub const OGRErr_OGRERR_CORRUPT_DATA: OGRErr = 5;
#[doc = " Failure"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"OGRERR_FAILURE\"></div>"]
pub const OGRErr_OGRERR_FAILURE: OGRErr = 6;
#[doc = " Unsupported SRS"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"OGRERR_UNSUPPORTED_SRS\"></div>"]
pub const OGRErr_OGRERR_UNSUPPORTED_SRS: OGRErr = 7;
#[doc = " Invalid handle"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"INVALID_HANDLE\"></div>"]
pub const OGRErr_INVALID_HANDLE: OGRErr = 8;
#[doc = " Non existing feature. Added in GDAL 2.0"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"NON_EXISTING_FEATURE\"></div>"]
pub const OGRErr_NON_EXISTING_FEATURE: OGRErr = 9;
#[doc = " Type for a OGR error"]
#[doc = ""]
#[doc = " <div rustbindgen replaces=\"OGRErr\"></div>"]
pub type OGRErr = ::std::os::raw::c_uint;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u32>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_wchar_t_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u16>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u16>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u16>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u16>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char16_t_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char16_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u32>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char32_t_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char32_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_17 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_18 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_19 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_20 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_21 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_22 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_23 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_24 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_25 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_26 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_27 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_28 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_29 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_30 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_31 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_32 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_33 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_34 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_35 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_36 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_37 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_38 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_39 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_40 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_41 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_42 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_43 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_44 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_45 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_46 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_47 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_48 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_49 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_50 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_51 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_52 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_53 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_54 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_55 {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_iterator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_iterator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_iterator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_6() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_7() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_8() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_9() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_10() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_11() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_12() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_13() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_14() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_15() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_6() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_7() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_8() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_wchar_t_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_9() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_wchar_t_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_10() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_wchar_t_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_11() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_wchar_t_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_12() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_13() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_14() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_15() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_56 {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_16() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_17() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_6() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_18() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_16() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u32>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_17() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_wchar_t_close0_instantiation_6() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_18() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_long_double_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_19() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_7() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_4(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_20() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_8() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u32>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_19() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_wchar_t_close0_instantiation_7() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_allocator_open2_wchar_t_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0_instantiation_4(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u32>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_20() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_wchar_t_close0_instantiation_8() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u16>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u16>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u16>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u16>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char16_t_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char16_t_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_allocator_open2_char16_t_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u16>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u16>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u16>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u16>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char16_t_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char16_t_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u32>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char32_t_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char32_t_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_allocator_open2_char32_t_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<std_hash>(),
        1usize,
        concat!("Size of template specialization: ", stringify!(std_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<u32>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<u32>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<u32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char32_t_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char32_t_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_21() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_9() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_wchar_t_close0_instantiation_21() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_wchar_t_close0_instantiation_9() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
pub type size_type = size_type;
pub type size_type = std_size_t;
#[test]
fn __bindgen_test_layout_std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_iterator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_57 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_58 {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0_instantiation_5(
) {
    assert_eq!(
        ::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>(),
        32usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_basic_string<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_char_traits_open0_char_close0_instantiation_22() {
    assert_eq!(
        ::std::mem::size_of::<std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_allocator_open0_char_close0_instantiation_10() {
    assert_eq!(
        ::std::mem::size_of::<std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_allocator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_59 {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_std_unique_ptr_open0_CPLXMLNode_CPLXMLTreeCloserDeleter_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_iterator_open0_std_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_iterator)
        )
    );
}
pub type size_type = std_size_t;
pub type iterator = std__Bit_iterator;
#[test]
fn __bindgen_test_layout_std_weak_ptr_open0_OGR_SRSNode_Listener_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std_weak_ptr>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_weak_ptr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_weak_ptr>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_weak_ptr)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_ptr_open0_OGRSpatialReference_Private_std_default_delete_open1_OGRSpatialReference_Private_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_OGRSpatialReference_Private_close0_instantiation()
{
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_ptr_open0_OGRCoordinateTransformationOptions_Private_std_default_delete_open1_OGRCoordinateTransformationOptions_Private_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_OGRCoordinateTransformationOptions_Private_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_ptr_open0_OGRCurve_ConstIterator_Private_std_default_delete_open1_OGRCurve_ConstIterator_Private_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_OGRCurve_ConstIterator_Private_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_ptr_open0_OGRSimpleCurve_Iterator_Private_std_default_delete_open1_OGRSimpleCurve_Iterator_Private_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_OGRSimpleCurve_Iterator_Private_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_ptr_open0_OGRSimpleCurve_ConstIterator_Private_std_default_delete_open1_OGRSimpleCurve_ConstIterator_Private_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_OGRSimpleCurve_ConstIterator_Private_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_unique_ptr_open0_OGRGeometryFactory_TransformWithOptionsCache_Private_std_default_delete_open1_OGRGeometryFactory_TransformWithOptionsCache_Private_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_unique_ptr>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_unique_ptr)
        )
    );
}
#[test]
fn __bindgen_test_layout_std_default_delete_open0_OGRGeometryFactory_TransformWithOptionsCache_Private_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<std_default_delete>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std_default_delete)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std_default_delete>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std_default_delete)
        )
    );
}
